// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDTF_LIBRARIES_GDTF_H
#define GDTF_LIBRARIES_GDTF_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace device
{
  class matrixtype;
  class colorcietype;
  class offsettype;
  class dmxtype;
  class dmxvalue;
  class nametype;
  class dataversion;
  class guidtype;
  class PhysicalUnitEnum;
  class MasterEnum;
  class PrimitiveTypeEnum;
  class LampTypeEnum;
  class BeamTypeEnum;
  class ColorSpaceEnum;
  class InterpolationToEnum;
  class SnapEnum;
  class YesNoEnum;
  class RelationTypesEnum;
  class RDMParameterTypeEnum;
  class ThresholdOperatorEnum;
  class RDMParameterDataTypeEnum;
  class RDMParameterCommandEnum;
  class RDMSensorTypeEnum;
  class RDMParameterSensorUnitEnum;
  class RDMSlotInfoTypeEnum;
  class RDMSlotLabelIDEnum;
  class RDMParameterSensorUnitPrefixEnum;
  class CESEnum;
  class AttributeEnum;
  class GDTF;
  class FixtureType;
  class Wheels;
  class Wheel;
  class Slot;
  class Facet;
  class Models;
  class Model;
  class Geometries;
  class Geometry;
  class Axis;
  class FilterBeam;
  class FilterColor;
  class FilterGobo;
  class FilterShaper;
  class Beam;
  class GeometryReference;
  class Break;
  class DMXModes;
  class DMXMode;
  class DMXChannels;
  class DMXChannel;
  class LogicalChannel;
  class ChannelFunction;
  class ChannelSet;
  class Relations;
  class Relation;
  class Revisions;
  class Revision;
  class FTPresets;
  class FTPreset;
  class FTMacros;
  class FTMacro;
  class MacroDMX;
  class DMXStep;
  class DMXValue;
  class MacroVisual;
  class VisualStep;
  class VisualValue;
  class PhysicalDescriptions;
  class Emitters;
  class Emitter;
  class Filters;
  class Filter;
  class Measurement;
  class MeasurementPoint;
  class ColorSpace;
  class DMXProfiles;
  class DMXProfile;
  class CRIs;
  class CRI;
  class Protocols;
  class Art_Net;
  class sACN;
  class KiNET;
  class PosiStageNet;
  class OpenSoundControl;
  class CITP;
  class RDM;
  class SoftwareVersionID;
  class DMXPersonality;
  class AttributeDefinitions;
  class ActivationGroups;
  class FeatureGroups;
  class ActivationGroup;
  class FeatureGroup;
  class Feature;
  class Attributes;
  class Attribute;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace device
{
  class matrixtype: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    matrixtype ();

    matrixtype (const char*);

    matrixtype (const ::std::string&);

    matrixtype (const ::xml_schema::string&);

    matrixtype (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    matrixtype (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    matrixtype (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    matrixtype (const matrixtype& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual matrixtype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~matrixtype ();
  };

  class colorcietype: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    colorcietype ();

    colorcietype (const char*);

    colorcietype (const ::std::string&);

    colorcietype (const ::xml_schema::string&);

    colorcietype (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    colorcietype (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    colorcietype (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    colorcietype (const colorcietype& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual colorcietype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~colorcietype ();
  };

  class offsettype: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    offsettype ();

    offsettype (const char*);

    offsettype (const ::std::string&);

    offsettype (const ::xml_schema::string&);

    offsettype (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    offsettype (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    offsettype (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    offsettype (const offsettype& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual offsettype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~offsettype ();
  };

  class dmxtype: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    dmxtype ();

    dmxtype (const char*);

    dmxtype (const ::std::string&);

    dmxtype (const ::xml_schema::string&);

    dmxtype (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    dmxtype (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    dmxtype (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    dmxtype (const dmxtype& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual dmxtype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dmxtype ();
  };

  class dmxvalue: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    dmxvalue ();

    dmxvalue (const char*);

    dmxvalue (const ::std::string&);

    dmxvalue (const ::xml_schema::string&);

    dmxvalue (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    dmxvalue (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    dmxvalue (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    dmxvalue (const dmxvalue& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual dmxvalue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dmxvalue ();
  };

  class nametype: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    nametype ();

    nametype (const char*);

    nametype (const ::std::string&);

    nametype (const ::xml_schema::string&);

    nametype (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    nametype (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    nametype (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    nametype (const nametype& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual nametype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nametype ();
  };

  class dataversion: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    dataversion (const ::xml_schema::float_&);

    dataversion (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    dataversion (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    dataversion (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    dataversion (const dataversion& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual dataversion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dataversion ();
  };

  class guidtype: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    guidtype ();

    guidtype (const char*);

    guidtype (const ::std::string&);

    guidtype (const ::xml_schema::string&);

    guidtype (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    guidtype (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    guidtype (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    guidtype (const guidtype& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual guidtype*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~guidtype ();
  };

  class PhysicalUnitEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      None,
      Percent,
      Length,
      Mass,
      Time,
      Temperature,
      LuminousIntensity,
      Angle,
      Force,
      Frequency,
      Current,
      Voltage,
      Power,
      Energy,
      Area,
      Volume,
      Speed,
      Acceleration,
      AngularSpeed,
      AngularAccc,
      WaveLength,
      ColorComponent
    };

    PhysicalUnitEnum (value v);

    PhysicalUnitEnum (const char* v);

    PhysicalUnitEnum (const ::std::string& v);

    PhysicalUnitEnum (const ::xml_schema::string& v);

    PhysicalUnitEnum (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    PhysicalUnitEnum (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    PhysicalUnitEnum (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    PhysicalUnitEnum (const PhysicalUnitEnum& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual PhysicalUnitEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    PhysicalUnitEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_PhysicalUnitEnum_convert ();
    }

    protected:
    value
    _xsd_PhysicalUnitEnum_convert () const;

    public:
    static const char* const _xsd_PhysicalUnitEnum_literals_[22];
    static const value _xsd_PhysicalUnitEnum_indexes_[22];
  };

  class MasterEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      None,
      Grand,
      Group
    };

    MasterEnum (value v);

    MasterEnum (const char* v);

    MasterEnum (const ::std::string& v);

    MasterEnum (const ::xml_schema::string& v);

    MasterEnum (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    MasterEnum (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    MasterEnum (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    MasterEnum (const MasterEnum& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual MasterEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    MasterEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_MasterEnum_convert ();
    }

    protected:
    value
    _xsd_MasterEnum_convert () const;

    public:
    static const char* const _xsd_MasterEnum_literals_[3];
    static const value _xsd_MasterEnum_indexes_[3];
  };

  class PrimitiveTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Undefined,
      Cube,
      Cylinder,
      Sphere,
      Base,
      Yoke,
      Head,
      Scanner,
      Conventional
    };

    PrimitiveTypeEnum (value v);

    PrimitiveTypeEnum (const char* v);

    PrimitiveTypeEnum (const ::std::string& v);

    PrimitiveTypeEnum (const ::xml_schema::string& v);

    PrimitiveTypeEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PrimitiveTypeEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PrimitiveTypeEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PrimitiveTypeEnum (const PrimitiveTypeEnum& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual PrimitiveTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    PrimitiveTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_PrimitiveTypeEnum_convert ();
    }

    protected:
    value
    _xsd_PrimitiveTypeEnum_convert () const;

    public:
    static const char* const _xsd_PrimitiveTypeEnum_literals_[9];
    static const value _xsd_PrimitiveTypeEnum_indexes_[9];
  };

  class LampTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Discharge,
      Tungsten,
      Halogen,
      LED
    };

    LampTypeEnum (value v);

    LampTypeEnum (const char* v);

    LampTypeEnum (const ::std::string& v);

    LampTypeEnum (const ::xml_schema::string& v);

    LampTypeEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    LampTypeEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    LampTypeEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    LampTypeEnum (const LampTypeEnum& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual LampTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    LampTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_LampTypeEnum_convert ();
    }

    protected:
    value
    _xsd_LampTypeEnum_convert () const;

    public:
    static const char* const _xsd_LampTypeEnum_literals_[4];
    static const value _xsd_LampTypeEnum_indexes_[4];
  };

  class BeamTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Wash,
      Spot,
      None
    };

    BeamTypeEnum (value v);

    BeamTypeEnum (const char* v);

    BeamTypeEnum (const ::std::string& v);

    BeamTypeEnum (const ::xml_schema::string& v);

    BeamTypeEnum (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    BeamTypeEnum (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    BeamTypeEnum (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    BeamTypeEnum (const BeamTypeEnum& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual BeamTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    BeamTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_BeamTypeEnum_convert ();
    }

    protected:
    value
    _xsd_BeamTypeEnum_convert () const;

    public:
    static const char* const _xsd_BeamTypeEnum_literals_[3];
    static const value _xsd_BeamTypeEnum_indexes_[3];
  };

  class ColorSpaceEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Custom,
      sRGB,
      ProPhoto,
      ANSI
    };

    ColorSpaceEnum (value v);

    ColorSpaceEnum (const char* v);

    ColorSpaceEnum (const ::std::string& v);

    ColorSpaceEnum (const ::xml_schema::string& v);

    ColorSpaceEnum (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    ColorSpaceEnum (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    ColorSpaceEnum (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    ColorSpaceEnum (const ColorSpaceEnum& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual ColorSpaceEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ColorSpaceEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_ColorSpaceEnum_convert ();
    }

    protected:
    value
    _xsd_ColorSpaceEnum_convert () const;

    public:
    static const char* const _xsd_ColorSpaceEnum_literals_[4];
    static const value _xsd_ColorSpaceEnum_indexes_[4];
  };

  class InterpolationToEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Linear,
      Step,
      Log
    };

    InterpolationToEnum (value v);

    InterpolationToEnum (const char* v);

    InterpolationToEnum (const ::std::string& v);

    InterpolationToEnum (const ::xml_schema::string& v);

    InterpolationToEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    InterpolationToEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    InterpolationToEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    InterpolationToEnum (const InterpolationToEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual InterpolationToEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    InterpolationToEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_InterpolationToEnum_convert ();
    }

    protected:
    value
    _xsd_InterpolationToEnum_convert () const;

    public:
    static const char* const _xsd_InterpolationToEnum_literals_[3];
    static const value _xsd_InterpolationToEnum_indexes_[3];
  };

  class SnapEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Yes,
      No,
      On,
      Off
    };

    SnapEnum (value v);

    SnapEnum (const char* v);

    SnapEnum (const ::std::string& v);

    SnapEnum (const ::xml_schema::string& v);

    SnapEnum (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    SnapEnum (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    SnapEnum (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    SnapEnum (const SnapEnum& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual SnapEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SnapEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_SnapEnum_convert ();
    }

    protected:
    value
    _xsd_SnapEnum_convert () const;

    public:
    static const char* const _xsd_SnapEnum_literals_[4];
    static const value _xsd_SnapEnum_indexes_[4];
  };

  class YesNoEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Yes,
      No
    };

    YesNoEnum (value v);

    YesNoEnum (const char* v);

    YesNoEnum (const ::std::string& v);

    YesNoEnum (const ::xml_schema::string& v);

    YesNoEnum (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    YesNoEnum (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    YesNoEnum (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    YesNoEnum (const YesNoEnum& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual YesNoEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    YesNoEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_YesNoEnum_convert ();
    }

    protected:
    value
    _xsd_YesNoEnum_convert () const;

    public:
    static const char* const _xsd_YesNoEnum_literals_[2];
    static const value _xsd_YesNoEnum_indexes_[2];
  };

  class RelationTypesEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Multiply,
      Override
    };

    RelationTypesEnum (value v);

    RelationTypesEnum (const char* v);

    RelationTypesEnum (const ::std::string& v);

    RelationTypesEnum (const ::xml_schema::string& v);

    RelationTypesEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RelationTypesEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RelationTypesEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RelationTypesEnum (const RelationTypesEnum& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual RelationTypesEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RelationTypesEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RelationTypesEnum_convert ();
    }

    protected:
    value
    _xsd_RelationTypesEnum_convert () const;

    public:
    static const char* const _xsd_RelationTypesEnum_literals_[2];
    static const value _xsd_RelationTypesEnum_indexes_[2];
  };

  class RDMParameterTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      RDM,
      FixtureType,
      Fixture
    };

    RDMParameterTypeEnum (value v);

    RDMParameterTypeEnum (const char* v);

    RDMParameterTypeEnum (const ::std::string& v);

    RDMParameterTypeEnum (const ::xml_schema::string& v);

    RDMParameterTypeEnum (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    RDMParameterTypeEnum (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    RDMParameterTypeEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    RDMParameterTypeEnum (const RDMParameterTypeEnum& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual RDMParameterTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMParameterTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMParameterTypeEnum_convert ();
    }

    protected:
    value
    _xsd_RDMParameterTypeEnum_convert () const;

    public:
    static const char* const _xsd_RDMParameterTypeEnum_literals_[3];
    static const value _xsd_RDMParameterTypeEnum_indexes_[3];
  };

  class ThresholdOperatorEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      Is,
      IsNot,
      Greater,
      Less
    };

    ThresholdOperatorEnum (value v);

    ThresholdOperatorEnum (const char* v);

    ThresholdOperatorEnum (const ::std::string& v);

    ThresholdOperatorEnum (const ::xml_schema::string& v);

    ThresholdOperatorEnum (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    ThresholdOperatorEnum (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    ThresholdOperatorEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    ThresholdOperatorEnum (const ThresholdOperatorEnum& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual ThresholdOperatorEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ThresholdOperatorEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_ThresholdOperatorEnum_convert ();
    }

    protected:
    value
    _xsd_ThresholdOperatorEnum_convert () const;

    public:
    static const char* const _xsd_ThresholdOperatorEnum_literals_[4];
    static const value _xsd_ThresholdOperatorEnum_indexes_[4];
  };

  class RDMParameterDataTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      DS_NOT_DEFINED,
      DS_BIT_FIELD,
      DS_ASCII,
      DS_UNSIGNED_BYTE,
      DS_SIGNED_BYTE,
      DS_UNSIGNED_WORD,
      DS_SIGNED_WORD,
      DS_UNSIGNED_DWORD,
      DS_SIGNED_DWORD,
      DS_MS
    };

    RDMParameterDataTypeEnum (value v);

    RDMParameterDataTypeEnum (const char* v);

    RDMParameterDataTypeEnum (const ::std::string& v);

    RDMParameterDataTypeEnum (const ::xml_schema::string& v);

    RDMParameterDataTypeEnum (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    RDMParameterDataTypeEnum (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    RDMParameterDataTypeEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    RDMParameterDataTypeEnum (const RDMParameterDataTypeEnum& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual RDMParameterDataTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMParameterDataTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMParameterDataTypeEnum_convert ();
    }

    protected:
    value
    _xsd_RDMParameterDataTypeEnum_convert () const;

    public:
    static const char* const _xsd_RDMParameterDataTypeEnum_literals_[10];
    static const value _xsd_RDMParameterDataTypeEnum_indexes_[10];
  };

  class RDMParameterCommandEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      None,
      CC_GET,
      CC_SET,
      CC_GET_SET
    };

    RDMParameterCommandEnum (value v);

    RDMParameterCommandEnum (const char* v);

    RDMParameterCommandEnum (const ::std::string& v);

    RDMParameterCommandEnum (const ::xml_schema::string& v);

    RDMParameterCommandEnum (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    RDMParameterCommandEnum (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    RDMParameterCommandEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    RDMParameterCommandEnum (const RDMParameterCommandEnum& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual RDMParameterCommandEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMParameterCommandEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMParameterCommandEnum_convert ();
    }

    protected:
    value
    _xsd_RDMParameterCommandEnum_convert () const;

    public:
    static const char* const _xsd_RDMParameterCommandEnum_literals_[4];
    static const value _xsd_RDMParameterCommandEnum_indexes_[4];
  };

  class RDMSensorTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      SENS_VOLTAGE,
      SENS_CURRENT,
      SENS_FREQUENCY,
      SENS_RESISTANCE,
      SENS_POWER,
      SENS_MASS,
      SENS_LENGTH,
      SENS_AREA,
      SENS_VOLUME,
      SENS_DENSITY,
      SENS_VELOCITY,
      SENS_ACCELERATION,
      SENS_FORCE,
      SENS_ENERGY,
      SENS_PRESSURE,
      SENS_TIME,
      SENS_ANGLE,
      SENS_POSITION_X,
      SENS_POSITION_Y,
      SENS_POSITION_Z,
      SENS_ANGULAR_VELOCITY,
      SENS_LUMINOUS_INTENSITY,
      SENS_LUMINOUS_FLUX,
      SENS_ILLUMINANCE,
      SENS_CHROMINANCE_RED,
      SENS_CHROMINANCE_GREEN,
      SENS_CHROMINANCE_BLUE,
      SENS_CONTACTS,
      SENS_MEMORY,
      SENS_ITEMS,
      SENS_HUMIDITY,
      SENS_COUNTER_16BIT,
      SENS_OTHER,
      SENS_MS
    };

    RDMSensorTypeEnum (value v);

    RDMSensorTypeEnum (const char* v);

    RDMSensorTypeEnum (const ::std::string& v);

    RDMSensorTypeEnum (const ::xml_schema::string& v);

    RDMSensorTypeEnum (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RDMSensorTypeEnum (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RDMSensorTypeEnum (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RDMSensorTypeEnum (const RDMSensorTypeEnum& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual RDMSensorTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMSensorTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMSensorTypeEnum_convert ();
    }

    protected:
    value
    _xsd_RDMSensorTypeEnum_convert () const;

    public:
    static const char* const _xsd_RDMSensorTypeEnum_literals_[34];
    static const value _xsd_RDMSensorTypeEnum_indexes_[34];
  };

  class RDMParameterSensorUnitEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      UNITS_NONE,
      UNITS_CENTIGRADE,
      UNITS_VOLTS_DC,
      UNITS_VOLTS_AC_PEAK,
      UNITS_VOLTS_AC_RMS,
      UNITS_AMPERE_DC,
      UNITS_AMPERE_AC_PEAK,
      UNITS_AMPERE_AC_RMS,
      UNITS_HERTZ,
      UNITS_OHM,
      UNITS_WATT,
      UNITS_KILOGRAM,
      UNITS_METERS,
      UNITS_METERS_SQUARED,
      UNITS_METERS_CUBED,
      UNITS_KILOGRAMMES_PER_METER_CUBED,
      UNITS_METERS_PER_SECOND,
      UNITS_METERS_PER_SECOND_SQUARED,
      UNITS_NEWTON,
      UNITS_JOULE,
      UNITS_PASCAL,
      UNITS_SECOND,
      UNITS_DEGREE,
      UNITS_STERADIAN,
      UNITS_CANDELA,
      UNITS_LUMEN,
      UNITS_LUX,
      UNITS_IRE,
      UNITS_BYTE,
      UNITS_MS
    };

    RDMParameterSensorUnitEnum (value v);

    RDMParameterSensorUnitEnum (const char* v);

    RDMParameterSensorUnitEnum (const ::std::string& v);

    RDMParameterSensorUnitEnum (const ::xml_schema::string& v);

    RDMParameterSensorUnitEnum (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    RDMParameterSensorUnitEnum (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    RDMParameterSensorUnitEnum (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    RDMParameterSensorUnitEnum (const RDMParameterSensorUnitEnum& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual RDMParameterSensorUnitEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMParameterSensorUnitEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMParameterSensorUnitEnum_convert ();
    }

    protected:
    value
    _xsd_RDMParameterSensorUnitEnum_convert () const;

    public:
    static const char* const _xsd_RDMParameterSensorUnitEnum_literals_[30];
    static const value _xsd_RDMParameterSensorUnitEnum_indexes_[30];
  };

  class RDMSlotInfoTypeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      ST_PRIMARY,
      ST_SEC_FINE,
      ST_SEC_TIMING,
      ST_SEC_SPEED,
      ST_SEC_CONTROL,
      ST_SEC_INDEX,
      ST_SEC_ROTATION,
      ST_SEC_INDEX_ROTATE,
      ST_SEC_UNDEFINED
    };

    RDMSlotInfoTypeEnum (value v);

    RDMSlotInfoTypeEnum (const char* v);

    RDMSlotInfoTypeEnum (const ::std::string& v);

    RDMSlotInfoTypeEnum (const ::xml_schema::string& v);

    RDMSlotInfoTypeEnum (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RDMSlotInfoTypeEnum (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RDMSlotInfoTypeEnum (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RDMSlotInfoTypeEnum (const RDMSlotInfoTypeEnum& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual RDMSlotInfoTypeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMSlotInfoTypeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMSlotInfoTypeEnum_convert ();
    }

    protected:
    value
    _xsd_RDMSlotInfoTypeEnum_convert () const;

    public:
    static const char* const _xsd_RDMSlotInfoTypeEnum_literals_[9];
    static const value _xsd_RDMSlotInfoTypeEnum_indexes_[9];
  };

  class RDMSlotLabelIDEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      SD_INTENSITY,
      SD_INTENSITY_MASTER,
      SD_PAN,
      SD_TILT,
      SD_COLOR_WHEEL,
      SD_COLOR_SUB_CYAN,
      SD_COLOR_SUB_YELLOW,
      SD_COLOR_SUB_MAGENTA,
      SD_COLOR_ADD_RED,
      SD_COLOR_ADD_GREEN,
      SD_COLOR_ADD_BLUE,
      SD_COLOR_CORRECTION,
      SD_COLOR_SCROLL,
      SD_COLOR_SEMAPHORE,
      SD_COLOR_ADD_AMBER,
      SD_COLOR_ADD_WHITE,
      SD_COLOR_ADD_W_ARM_WHITE,
      SD_COLOR_ADD_COOL_WHITE,
      SD_COLOR_SUB_UV,
      SD_COLOR_HUE,
      SD_COLOR_SATURATION,
      SD_STATIC_GOBO_WHEEL,
      SD_ROTO_GOBO_WHEEL,
      SD_PRISM_WHEEL,
      SD_EFFECTS_WHEEL,
      SD_BEAM_SIZE_IRIS,
      SD_EDGE,
      SD_FROST,
      SD_STROBE,
      SD_ZOOM,
      SD_FRAMING_SHUTTER,
      SD_SHUTTER_ROTATE,
      SD_DOUSER,
      SD_BARN_DOOR,
      SD_LAMP_CONTROL,
      SD_FIXTURE_CONTROL,
      SD_FIXTURE_SPEED,
      SD_MACRO,
      SD_POWER_CONTROL,
      SD_FAN_CONTROL,
      SD_HEATER_CONTROL,
      SD_FOUNTAIN_CONTROL,
      SD_UNDEFINED
    };

    RDMSlotLabelIDEnum (value v);

    RDMSlotLabelIDEnum (const char* v);

    RDMSlotLabelIDEnum (const ::std::string& v);

    RDMSlotLabelIDEnum (const ::xml_schema::string& v);

    RDMSlotLabelIDEnum (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    RDMSlotLabelIDEnum (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    RDMSlotLabelIDEnum (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    RDMSlotLabelIDEnum (const RDMSlotLabelIDEnum& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual RDMSlotLabelIDEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMSlotLabelIDEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMSlotLabelIDEnum_convert ();
    }

    protected:
    value
    _xsd_RDMSlotLabelIDEnum_convert () const;

    public:
    static const char* const _xsd_RDMSlotLabelIDEnum_literals_[43];
    static const value _xsd_RDMSlotLabelIDEnum_indexes_[43];
  };

  class RDMParameterSensorUnitPrefixEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      PREFIX_NONE,
      PREFIX_DECI,
      PREFIX_CENTI,
      PREFIX_MILLI,
      PREFIX_MICRO,
      PREFIX_NANO,
      PREFIX_PICO,
      PREFIX_FEMPTO,
      PREFIX_ATTO,
      PREFIX_ZEPTO,
      PREFIX_YOCTO,
      PREFIX_DECA,
      PREFIX_HECTO,
      PREFIX_KILO,
      PREFIX_MEGA,
      PREFIX_GIGA,
      PREFIX_TERRA,
      PREFIX_PETA,
      PREFIX_EXA,
      PREFIX_ZETTA,
      PREFIX_YOTTA
    };

    RDMParameterSensorUnitPrefixEnum (value v);

    RDMParameterSensorUnitPrefixEnum (const char* v);

    RDMParameterSensorUnitPrefixEnum (const ::std::string& v);

    RDMParameterSensorUnitPrefixEnum (const ::xml_schema::string& v);

    RDMParameterSensorUnitPrefixEnum (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    RDMParameterSensorUnitPrefixEnum (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    RDMParameterSensorUnitPrefixEnum (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    RDMParameterSensorUnitPrefixEnum (const RDMParameterSensorUnitPrefixEnum& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual RDMParameterSensorUnitPrefixEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDMParameterSensorUnitPrefixEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_RDMParameterSensorUnitPrefixEnum_convert ();
    }

    protected:
    value
    _xsd_RDMParameterSensorUnitPrefixEnum_convert () const;

    public:
    static const char* const _xsd_RDMParameterSensorUnitPrefixEnum_literals_[21];
    static const value _xsd_RDMParameterSensorUnitPrefixEnum_indexes_[21];
  };

  class CESEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      CES01,
      CES02,
      CES03,
      CES04,
      CES05,
      CES06,
      CES07,
      CES08,
      CES09,
      CES10,
      CES11,
      CES12,
      CES13,
      CES14,
      CES15,
      CES16,
      CES17,
      CES18,
      CES19,
      CES20,
      CES21,
      CES22,
      CES23,
      CES24,
      CES25,
      CES26,
      CES27,
      CES28,
      CES29,
      CES30,
      CES31,
      CES32,
      CES33,
      CES34,
      CES35,
      CES36,
      CES37,
      CES38,
      CES39,
      CES40,
      CES41,
      CES42,
      CES43,
      CES44,
      CES45,
      CES46,
      CES47,
      CES48,
      CES49,
      CES50,
      CES51,
      CES52,
      CES53,
      CES54,
      CES55,
      CES56,
      CES57,
      CES58,
      CES59,
      CES60,
      CES61,
      CES62,
      CES63,
      CES64,
      CES65,
      CES66,
      CES67,
      CES68,
      CES69,
      CES70,
      CES71,
      CES72,
      CES73,
      CES74,
      CES75,
      CES76,
      CES77,
      CES78,
      CES79,
      CES80,
      CES81,
      CES82,
      CES83,
      CES84,
      CES85,
      CES86,
      CES87,
      CES88,
      CES89,
      CES90,
      CES91,
      CES92,
      CES93,
      CES94,
      CES95,
      CES96,
      CES97,
      CES98,
      CES99
    };

    CESEnum (value v);

    CESEnum (const char* v);

    CESEnum (const ::std::string& v);

    CESEnum (const ::xml_schema::string& v);

    CESEnum (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    CESEnum (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    CESEnum (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    CESEnum (const CESEnum& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual CESEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CESEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_CESEnum_convert ();
    }

    protected:
    value
    _xsd_CESEnum_convert () const;

    public:
    static const char* const _xsd_CESEnum_literals_[99];
    static const value _xsd_CESEnum_indexes_[99];
  };

  class AttributeEnum: public ::xml_schema::string
  {
    public:
    enum value
    {
      AnimationWheel1,
      AnimationWheel1Audio,
      AnimationWheel1Macro,
      AnimationWheel1Mode,
      AnimationWheel1Pos,
      AnimationWheel1PosRotate,
      AnimationWheel1PosShake,
      AnimationWheel1Random,
      AnimationWheel1SelectEffects,
      AnimationWheel1SelectShake,
      AnimationWheel1SelectSpin,
      AnimationWheel2,
      AnimationWheel2Audio,
      AnimationWheel2Macro,
      AnimationWheel2Mode,
      AnimationWheel2Pos,
      AnimationWheel2PosRotate,
      AnimationWheel2PosShake,
      AnimationWheel2Random,
      AnimationWheel2SelectEffects,
      AnimationWheel2SelectShake,
      AnimationWheel2SelectSpin,
      AnimationWheel3,
      AnimationWheel3Audio,
      AnimationWheel3Macro,
      AnimationWheel3Mode,
      AnimationWheel3Pos,
      AnimationWheel3PosRotate,
      AnimationWheel3PosShake,
      AnimationWheel3Random,
      AnimationWheel3SelectEffects,
      AnimationWheel3SelectShake,
      AnimationWheel3SelectSpin,
      AnimationWheel4,
      AnimationWheel4Audio,
      AnimationWheel4Macro,
      AnimationWheel4Mode,
      AnimationWheel4Pos,
      AnimationWheel4PosRotate,
      AnimationWheel4PosShake,
      AnimationWheel4Random,
      AnimationWheel4SelectEffects,
      AnimationWheel4SelectShake,
      AnimationWheel4SelectSpin,
      AnimationWheel5,
      AnimationWheel5Audio,
      AnimationWheel5Macro,
      AnimationWheel5Mode,
      AnimationWheel5Pos,
      AnimationWheel5PosRotate,
      AnimationWheel5PosShake,
      AnimationWheel5Random,
      AnimationWheel5SelectEffects,
      AnimationWheel5SelectShake,
      AnimationWheel5SelectSpin,
      AnimationWheelShortcutMode,
      BeamEffectIndexRotateMode,
      BeamReset,
      BeamShaper,
      BeamShaperMacro,
      BeamShaperPos,
      BeamShaperPosRotate,
      BlackoutMode,
      Blade1A,
      Blade1B,
      Blade1Rot,
      Blade2A,
      Blade2B,
      Blade2Rot,
      Blade3A,
      Blade3B,
      Blade3Rot,
      Blade4A,
      Blade4B,
      Blade4Rot,
      Blade5A,
      Blade5B,
      Blade5Rot,
      Blower1,
      Blower2,
      Blower3,
      Blower4,
      Blower5,
      CIE_Brightness,
      CIE_X,
      CIE_Y,
      CRIMode,
      CTB,
      CTBReset,
      CTC,
      CTCReset,
      CTO,
      CTOReset,
      ChromaticMode,
      Color1,
      Color1Mode,
      Color1WheelAudio,
      Color1WheelIndex,
      Color1WheelRandom,
      Color1WheelSpin,
      Color2,
      Color2Mode,
      Color2WheelAudio,
      Color2WheelIndex,
      Color2WheelRandom,
      Color2WheelSpin,
      Color3,
      Color3Mode,
      Color3WheelAudio,
      Color3WheelIndex,
      Color3WheelRandom,
      Color3WheelSpin,
      Color4,
      Color4Mode,
      Color4WheelAudio,
      Color4WheelIndex,
      Color4WheelRandom,
      Color4WheelSpin,
      Color5,
      Color5Mode,
      Color5WheelAudio,
      Color5WheelIndex,
      Color5WheelRandom,
      Color5WheelSpin,
      ColorAdd_B,
      ColorAdd_BC,
      ColorAdd_BM,
      ColorAdd_C,
      ColorAdd_CW,
      ColorAdd_G,
      ColorAdd_GC,
      ColorAdd_GY,
      ColorAdd_M,
      ColorAdd_R,
      ColorAdd_RM,
      ColorAdd_RY,
      ColorAdd_UV,
      ColorAdd_W,
      ColorAdd_WW,
      ColorAdd_Y,
      ColorCalibrationMode,
      ColorConsistency,
      ColorControl,
      ColorEffects1,
      ColorEffects2,
      ColorEffects3,
      ColorEffects4,
      ColorEffects5,
      ColorMacro1,
      ColorMacro2,
      ColorMacro3,
      ColorMacro4,
      ColorMacro5,
      ColorMixMSpeed,
      ColorMixMode,
      ColorMixReset,
      ColorModelMode,
      ColorRGB_Blue,
      ColorRGB_Cyan,
      ColorRGB_Green,
      ColorRGB_Magenta,
      ColorRGB_Quality,
      ColorRGB_Red,
      ColorRGB_Yellow,
      ColorSettingsReset,
      ColorSub_B,
      ColorSub_C,
      ColorSub_G,
      ColorSub_M,
      ColorSub_R,
      ColorSub_Y,
      ColorUniformity,
      ColorWheelReset,
      ColorWheelSelectMSpeed,
      ColorWheelShortcutMode,
      Control1,
      Control2,
      Control3,
      Control4,
      Control5,
      CustomColor,
      CyanMode,
      DMXInput,
      Dimmer,
      DimmerCurve,
      DimmerMode,
      DisplayIntensity,
      Dummy,
      Effects1,
      Effects1Adjust1,
      Effects1Adjust2,
      Effects1Adjust3,
      Effects1Adjust4,
      Effects1Adjust5,
      Effects1Fade,
      Effects1Pos,
      Effects1PosRotate,
      Effects1Rate,
      Effects2,
      Effects2Adjust1,
      Effects2Adjust2,
      Effects2Adjust3,
      Effects2Adjust4,
      Effects2Adjust5,
      Effects2Fade,
      Effects2Pos,
      Effects2PosRotate,
      Effects2Rate,
      Effects3,
      Effects3Adjust1,
      Effects3Adjust2,
      Effects3Adjust3,
      Effects3Adjust4,
      Effects3Adjust5,
      Effects3Fade,
      Effects3Pos,
      Effects3PosRotate,
      Effects3Rate,
      Effects4,
      Effects4Adjust1,
      Effects4Adjust2,
      Effects4Adjust3,
      Effects4Adjust4,
      Effects4Adjust5,
      Effects4Fade,
      Effects4Pos,
      Effects4PosRotate,
      Effects4Rate,
      Effects5,
      Effects5Adjust1,
      Effects5Adjust2,
      Effects5Adjust3,
      Effects5Adjust4,
      Effects5Adjust5,
      Effects5Fade,
      Effects5Pos,
      Effects5PosRotate,
      Effects5Rate,
      EffectsSync,
      Fan1,
      Fan2,
      Fan3,
      Fan4,
      Fan5,
      FanMode,
      Fans,
      FixtureCalibrationReset,
      FixtureGlobalReset,
      Focus1,
      Focus1Adjust,
      Focus1Distance,
      Focus2,
      Focus2Adjust,
      Focus2Distance,
      Focus3,
      Focus3Adjust,
      Focus3Distance,
      Focus4,
      Focus4Adjust,
      Focus4Distance,
      Focus5,
      Focus5Adjust,
      Focus5Distance,
      FocusMSpeed,
      FocusMode,
      FocusReset,
      Fog1,
      Fog2,
      Fog3,
      Fog4,
      Fog5,
      FollowSpotMode,
      FrameMSpeed,
      FrameReset,
      Frost1,
      Frost1MSpeed,
      Frost2,
      Frost2MSpeed,
      Frost3,
      Frost3MSpeed,
      Frost4,
      Frost4MSpeed,
      Frost5,
      Frost5MSpeed,
      Function,
      GlobalMSpeed,
      Gobo1,
      Gobo1Pos,
      Gobo1PosRotate,
      Gobo1PosShake,
      Gobo1SelectEffects,
      Gobo1SelectShake,
      Gobo1SelectSpin,
      Gobo1WheelAudio,
      Gobo1WheelIndex,
      Gobo1WheelMode,
      Gobo1WheelRandom,
      Gobo1WheelShake,
      Gobo1WheelSpin,
      Gobo2,
      Gobo2Pos,
      Gobo2PosRotate,
      Gobo2PosShake,
      Gobo2SelectEffects,
      Gobo2SelectShake,
      Gobo2SelectSpin,
      Gobo2WheelAudio,
      Gobo2WheelIndex,
      Gobo2WheelMode,
      Gobo2WheelRandom,
      Gobo2WheelShake,
      Gobo2WheelSpin,
      Gobo3,
      Gobo3Pos,
      Gobo3PosRotate,
      Gobo3PosShake,
      Gobo3SelectEffects,
      Gobo3SelectShake,
      Gobo3SelectSpin,
      Gobo3WheelAudio,
      Gobo3WheelIndex,
      Gobo3WheelMode,
      Gobo3WheelRandom,
      Gobo3WheelShake,
      Gobo3WheelSpin,
      Gobo4,
      Gobo4Pos,
      Gobo4PosRotate,
      Gobo4PosShake,
      Gobo4SelectEffects,
      Gobo4SelectShake,
      Gobo4SelectSpin,
      Gobo4WheelAudio,
      Gobo4WheelIndex,
      Gobo4WheelMode,
      Gobo4WheelRandom,
      Gobo4WheelShake,
      Gobo4WheelSpin,
      Gobo5,
      Gobo5Pos,
      Gobo5PosRotate,
      Gobo5PosShake,
      Gobo5SelectEffects,
      Gobo5SelectShake,
      Gobo5SelectSpin,
      Gobo5WheelAudio,
      Gobo5WheelIndex,
      Gobo5WheelMode,
      Gobo5WheelRandom,
      Gobo5WheelShake,
      Gobo5WheelSpin,
      GoboWheel1MSpeed,
      GoboWheel2MSpeed,
      GoboWheel3MSpeed,
      GoboWheel4MSpeed,
      GoboWheel5MSpeed,
      GoboWheelReset,
      HSB_Brightness,
      HSB_Hue,
      HSB_Quality,
      HSB_Saturation,
      Haze1,
      Haze2,
      Haze3,
      Haze4,
      Haze5,
      IntensityMSpeed,
      IntensityReset,
      Iris,
      IrisMSpeed,
      IrisMode,
      IrisPulseClose,
      IrisPulseOpen,
      IrisReset,
      IrisStrobe,
      IrisStrobeRandom,
      LEDFrequency,
      LEDZoneMode,
      LampControl,
      LampPowerMode,
      MagentaMode,
      MediaContent,
      MediaFolder,
      NoFeature,
      NoFeature1,
      NoFeature2,
      NoFeature3,
      Pan,
      PanMode,
      PanReset,
      PanTiltMode,
      PixelMode,
      Playmode,
      PositionEffect,
      PositionEffectFade,
      PositionEffectRate,
      PositionMSpeed,
      PositionModes,
      PositionReset,
      Prism1,
      Prism1MSpeed,
      Prism1Macro,
      Prism1Pos,
      Prism1PosRotate,
      Prism1SelectSpin,
      Prism2,
      Prism2MSpeed,
      Prism2Macro,
      Prism2Pos,
      Prism2PosRotate,
      Prism2SelectSpin,
      Prism3,
      Prism3MSpeed,
      Prism3Macro,
      Prism3Pos,
      Prism3PosRotate,
      Prism3SelectSpin,
      Prism4,
      Prism4MSpeed,
      Prism4Macro,
      Prism4Pos,
      Prism4PosRotate,
      Prism4SelectSpin,
      Prism5,
      Prism5MSpeed,
      Prism5Macro,
      Prism5Pos,
      Prism5PosRotate,
      Prism5SelectSpin,
      ReflectorAdjust,
      ShaperMacros,
      ShaperMacrosSpeed,
      ShaperRot,
      Shutter1,
      Shutter1Strobe,
      Shutter1StrobeEffect,
      Shutter1StrobePulse,
      Shutter1StrobePulseClose,
      Shutter1StrobePulseOpen,
      Shutter1StrobeRandom,
      Shutter1StrobeRandomPulse,
      Shutter1StrobeRandomPulseClose,
      Shutter1StrobeRandomPulseOpen,
      Shutter2,
      Shutter2Strobe,
      Shutter2StrobeEffect,
      Shutter2StrobePulse,
      Shutter2StrobePulseClose,
      Shutter2StrobePulseOpen,
      Shutter2StrobeRandom,
      Shutter2StrobeRandomPulse,
      Shutter2StrobeRandomPulseClose,
      Shutter2StrobeRandomPulseOpen,
      Shutter3,
      Shutter3Strobe,
      Shutter3StrobeEffect,
      Shutter3StrobePulse,
      Shutter3StrobePulseClose,
      Shutter3StrobePulseOpen,
      Shutter3StrobeRandom,
      Shutter3StrobeRandomPulse,
      Shutter3StrobeRandomPulseClose,
      Shutter3StrobeRandomPulseOpen,
      Shutter4,
      Shutter4Strobe,
      Shutter4StrobeEffect,
      Shutter4StrobePulse,
      Shutter4StrobePulseClose,
      Shutter4StrobePulseOpen,
      Shutter4StrobeRandom,
      Shutter4StrobeRandomPulse,
      Shutter4StrobeRandomPulseClose,
      Shutter4StrobeRandomPulseOpen,
      Shutter5,
      Shutter5Strobe,
      Shutter5StrobeEffect,
      Shutter5StrobePulse,
      Shutter5StrobePulseClose,
      Shutter5StrobePulseOpen,
      Shutter5StrobeRandom,
      Shutter5StrobeRandomPulse,
      Shutter5StrobeRandomPulseClose,
      Shutter5StrobeRandomPulseOpen,
      ShutterReset,
      StrobeDuration,
      StrobeMode,
      StrobeRate,
      Tilt,
      TiltMode,
      TiltReset,
      UVStability,
      Video,
      VideoCamera1,
      VideoCamera2,
      VideoCamera3,
      VideoCamera4,
      VideoCamera5,
      VideoEffect1Parameter1,
      VideoEffect1Parameter2,
      VideoEffect1Parameter3,
      VideoEffect1Parameter4,
      VideoEffect1Parameter5,
      VideoEffect1Type,
      VideoEffect2Parameter1,
      VideoEffect2Parameter2,
      VideoEffect2Parameter3,
      VideoEffect2Parameter4,
      VideoEffect2Parameter5,
      VideoEffect2Type,
      VideoEffect3Parameter1,
      VideoEffect3Parameter2,
      VideoEffect3Parameter3,
      VideoEffect3Parameter4,
      VideoEffect3Parameter5,
      VideoEffect3Type,
      VideoEffect4Parameter1,
      VideoEffect4Parameter2,
      VideoEffect4Parameter3,
      VideoEffect4Parameter4,
      VideoEffect4Parameter5,
      VideoEffect4Type,
      VideoEffect5Parameter1,
      VideoEffect5Parameter2,
      VideoEffect5Parameter3,
      VideoEffect5Parameter4,
      VideoEffect5Parameter5,
      VideoEffect5Type,
      VideoScale1_All,
      VideoScale1_X,
      VideoScale1_Y,
      VideoScale1_Z,
      VideoScale2_All,
      VideoScale2_X,
      VideoScale2_Y,
      VideoScale2_Z,
      VideoScale3_All,
      VideoScale3_X,
      VideoScale3_Y,
      VideoScale3_Z,
      VideoScale4_All,
      VideoScale4_X,
      VideoScale4_Y,
      VideoScale4_Z,
      VideoScale5_All,
      VideoScale5_X,
      VideoScale5_Y,
      VideoScale5_Z,
      WavelengthCorrection,
      WhiteCount,
      XYZ_X,
      XYZ_Y,
      XYZ_Z,
      YellowMode,
      Zoom,
      ZoomMSpeed,
      ZoomMode,
      ZoomModeBeam,
      ZoomModeSpot,
      ZoomReset
    };

    AttributeEnum (value v);

    AttributeEnum (const char* v);

    AttributeEnum (const ::std::string& v);

    AttributeEnum (const ::xml_schema::string& v);

    AttributeEnum (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AttributeEnum (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AttributeEnum (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AttributeEnum (const AttributeEnum& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual AttributeEnum*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    AttributeEnum&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_AttributeEnum_convert ();
    }

    protected:
    value
    _xsd_AttributeEnum_convert () const;

    public:
    static const char* const _xsd_AttributeEnum_literals_[559];
    static const value _xsd_AttributeEnum_indexes_[559];
  };

  class GDTF: public ::xml_schema::type
  {
    public:
    // FixtureType
    //
    typedef ::device::FixtureType FixtureType_type;
    typedef ::xsd::cxx::tree::traits< FixtureType_type, char > FixtureType_traits;

    const FixtureType_type&
    FixtureType () const;

    FixtureType_type&
    FixtureType ();

    void
    FixtureType (const FixtureType_type& x);

    void
    FixtureType (::std::unique_ptr< FixtureType_type > p);

    // DataVersion
    //
    typedef ::device::dataversion DataVersion_type;
    typedef ::xsd::cxx::tree::traits< DataVersion_type, char > DataVersion_traits;

    const DataVersion_type&
    DataVersion () const;

    DataVersion_type&
    DataVersion ();

    void
    DataVersion (const DataVersion_type& x);

    void
    DataVersion (::std::unique_ptr< DataVersion_type > p);

    // Constructors.
    //
    GDTF (const FixtureType_type&,
          const DataVersion_type&);

    GDTF (::std::unique_ptr< FixtureType_type >,
          const DataVersion_type&);

    GDTF (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    GDTF (const GDTF& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual GDTF*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    GDTF&
    operator= (const GDTF& x);

    virtual 
    ~GDTF ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< FixtureType_type > FixtureType_;
    ::xsd::cxx::tree::one< DataVersion_type > DataVersion_;
  };

  class FixtureType: public ::xml_schema::type
  {
    public:
    // AttributeDefinitions
    //
    typedef ::device::AttributeDefinitions AttributeDefinitions_type;
    typedef ::xsd::cxx::tree::sequence< AttributeDefinitions_type > AttributeDefinitions_sequence;
    typedef AttributeDefinitions_sequence::iterator AttributeDefinitions_iterator;
    typedef AttributeDefinitions_sequence::const_iterator AttributeDefinitions_const_iterator;
    typedef ::xsd::cxx::tree::traits< AttributeDefinitions_type, char > AttributeDefinitions_traits;

    const AttributeDefinitions_sequence&
    AttributeDefinitions () const;

    AttributeDefinitions_sequence&
    AttributeDefinitions ();

    void
    AttributeDefinitions (const AttributeDefinitions_sequence& s);

    // Wheels
    //
    typedef ::device::Wheels Wheels_type;
    typedef ::xsd::cxx::tree::sequence< Wheels_type > Wheels_sequence;
    typedef Wheels_sequence::iterator Wheels_iterator;
    typedef Wheels_sequence::const_iterator Wheels_const_iterator;
    typedef ::xsd::cxx::tree::traits< Wheels_type, char > Wheels_traits;

    const Wheels_sequence&
    Wheels () const;

    Wheels_sequence&
    Wheels ();

    void
    Wheels (const Wheels_sequence& s);

    // PhysicalDescriptions
    //
    typedef ::device::PhysicalDescriptions PhysicalDescriptions_type;
    typedef ::xsd::cxx::tree::sequence< PhysicalDescriptions_type > PhysicalDescriptions_sequence;
    typedef PhysicalDescriptions_sequence::iterator PhysicalDescriptions_iterator;
    typedef PhysicalDescriptions_sequence::const_iterator PhysicalDescriptions_const_iterator;
    typedef ::xsd::cxx::tree::traits< PhysicalDescriptions_type, char > PhysicalDescriptions_traits;

    const PhysicalDescriptions_sequence&
    PhysicalDescriptions () const;

    PhysicalDescriptions_sequence&
    PhysicalDescriptions ();

    void
    PhysicalDescriptions (const PhysicalDescriptions_sequence& s);

    // Models
    //
    typedef ::device::Models Models_type;
    typedef ::xsd::cxx::tree::sequence< Models_type > Models_sequence;
    typedef Models_sequence::iterator Models_iterator;
    typedef Models_sequence::const_iterator Models_const_iterator;
    typedef ::xsd::cxx::tree::traits< Models_type, char > Models_traits;

    const Models_sequence&
    Models () const;

    Models_sequence&
    Models ();

    void
    Models (const Models_sequence& s);

    // Geometries
    //
    typedef ::device::Geometries Geometries_type;
    typedef ::xsd::cxx::tree::sequence< Geometries_type > Geometries_sequence;
    typedef Geometries_sequence::iterator Geometries_iterator;
    typedef Geometries_sequence::const_iterator Geometries_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometries_type, char > Geometries_traits;

    const Geometries_sequence&
    Geometries () const;

    Geometries_sequence&
    Geometries ();

    void
    Geometries (const Geometries_sequence& s);

    // DMXModes
    //
    typedef ::device::DMXModes DMXModes_type;
    typedef ::xsd::cxx::tree::sequence< DMXModes_type > DMXModes_sequence;
    typedef DMXModes_sequence::iterator DMXModes_iterator;
    typedef DMXModes_sequence::const_iterator DMXModes_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXModes_type, char > DMXModes_traits;

    const DMXModes_sequence&
    DMXModes () const;

    DMXModes_sequence&
    DMXModes ();

    void
    DMXModes (const DMXModes_sequence& s);

    // Revisions
    //
    typedef ::device::Revisions Revisions_type;
    typedef ::xsd::cxx::tree::sequence< Revisions_type > Revisions_sequence;
    typedef Revisions_sequence::iterator Revisions_iterator;
    typedef Revisions_sequence::const_iterator Revisions_const_iterator;
    typedef ::xsd::cxx::tree::traits< Revisions_type, char > Revisions_traits;

    const Revisions_sequence&
    Revisions () const;

    Revisions_sequence&
    Revisions ();

    void
    Revisions (const Revisions_sequence& s);

    // FTPresets
    //
    typedef ::device::FTPresets FTPresets_type;
    typedef ::xsd::cxx::tree::sequence< FTPresets_type > FTPresets_sequence;
    typedef FTPresets_sequence::iterator FTPresets_iterator;
    typedef FTPresets_sequence::const_iterator FTPresets_const_iterator;
    typedef ::xsd::cxx::tree::traits< FTPresets_type, char > FTPresets_traits;

    const FTPresets_sequence&
    FTPresets () const;

    FTPresets_sequence&
    FTPresets ();

    void
    FTPresets (const FTPresets_sequence& s);

    // Protocols
    //
    typedef ::device::Protocols Protocols_type;
    typedef ::xsd::cxx::tree::sequence< Protocols_type > Protocols_sequence;
    typedef Protocols_sequence::iterator Protocols_iterator;
    typedef Protocols_sequence::const_iterator Protocols_const_iterator;
    typedef ::xsd::cxx::tree::traits< Protocols_type, char > Protocols_traits;

    const Protocols_sequence&
    Protocols () const;

    Protocols_sequence&
    Protocols ();

    void
    Protocols (const Protocols_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // ShortName
    //
    typedef ::xml_schema::string ShortName_type;
    typedef ::xsd::cxx::tree::optional< ShortName_type > ShortName_optional;
    typedef ::xsd::cxx::tree::traits< ShortName_type, char > ShortName_traits;

    const ShortName_optional&
    ShortName () const;

    ShortName_optional&
    ShortName ();

    void
    ShortName (const ShortName_type& x);

    void
    ShortName (const ShortName_optional& x);

    void
    ShortName (::std::unique_ptr< ShortName_type > p);

    // LongName
    //
    typedef ::xml_schema::string LongName_type;
    typedef ::xsd::cxx::tree::optional< LongName_type > LongName_optional;
    typedef ::xsd::cxx::tree::traits< LongName_type, char > LongName_traits;

    const LongName_optional&
    LongName () const;

    LongName_optional&
    LongName ();

    void
    LongName (const LongName_type& x);

    void
    LongName (const LongName_optional& x);

    void
    LongName (::std::unique_ptr< LongName_type > p);

    // Manufacturer
    //
    typedef ::xml_schema::string Manufacturer_type;
    typedef ::xsd::cxx::tree::traits< Manufacturer_type, char > Manufacturer_traits;

    const Manufacturer_type&
    Manufacturer () const;

    Manufacturer_type&
    Manufacturer ();

    void
    Manufacturer (const Manufacturer_type& x);

    void
    Manufacturer (::std::unique_ptr< Manufacturer_type > p);

    // Description
    //
    typedef ::xml_schema::string Description_type;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_type&
    Description () const;

    Description_type&
    Description ();

    void
    Description (const Description_type& x);

    void
    Description (::std::unique_ptr< Description_type > p);

    // FixtureTypeID
    //
    typedef ::device::guidtype FixtureTypeID_type;
    typedef ::xsd::cxx::tree::traits< FixtureTypeID_type, char > FixtureTypeID_traits;

    const FixtureTypeID_type&
    FixtureTypeID () const;

    FixtureTypeID_type&
    FixtureTypeID ();

    void
    FixtureTypeID (const FixtureTypeID_type& x);

    void
    FixtureTypeID (::std::unique_ptr< FixtureTypeID_type > p);

    // Thumbnail
    //
    typedef ::xml_schema::string Thumbnail_type;
    typedef ::xsd::cxx::tree::optional< Thumbnail_type > Thumbnail_optional;
    typedef ::xsd::cxx::tree::traits< Thumbnail_type, char > Thumbnail_traits;

    const Thumbnail_optional&
    Thumbnail () const;

    Thumbnail_optional&
    Thumbnail ();

    void
    Thumbnail (const Thumbnail_type& x);

    void
    Thumbnail (const Thumbnail_optional& x);

    void
    Thumbnail (::std::unique_ptr< Thumbnail_type > p);

    // RefFT
    //
    typedef ::device::guidtype RefFT_type;
    typedef ::xsd::cxx::tree::optional< RefFT_type > RefFT_optional;
    typedef ::xsd::cxx::tree::traits< RefFT_type, char > RefFT_traits;

    const RefFT_optional&
    RefFT () const;

    RefFT_optional&
    RefFT ();

    void
    RefFT (const RefFT_type& x);

    void
    RefFT (const RefFT_optional& x);

    void
    RefFT (::std::unique_ptr< RefFT_type > p);

    // Constructors.
    //
    FixtureType (const Name_type&,
                 const Manufacturer_type&,
                 const Description_type&,
                 const FixtureTypeID_type&);

    FixtureType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    FixtureType (const FixtureType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual FixtureType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FixtureType&
    operator= (const FixtureType& x);

    virtual 
    ~FixtureType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    AttributeDefinitions_sequence AttributeDefinitions_;
    Wheels_sequence Wheels_;
    PhysicalDescriptions_sequence PhysicalDescriptions_;
    Models_sequence Models_;
    Geometries_sequence Geometries_;
    DMXModes_sequence DMXModes_;
    Revisions_sequence Revisions_;
    FTPresets_sequence FTPresets_;
    Protocols_sequence Protocols_;
    ::xsd::cxx::tree::one< Name_type > Name_;
    ShortName_optional ShortName_;
    LongName_optional LongName_;
    ::xsd::cxx::tree::one< Manufacturer_type > Manufacturer_;
    ::xsd::cxx::tree::one< Description_type > Description_;
    ::xsd::cxx::tree::one< FixtureTypeID_type > FixtureTypeID_;
    Thumbnail_optional Thumbnail_;
    RefFT_optional RefFT_;
  };

  class Wheels: public ::xml_schema::type
  {
    public:
    // Wheel
    //
    typedef ::device::Wheel Wheel_type;
    typedef ::xsd::cxx::tree::sequence< Wheel_type > Wheel_sequence;
    typedef Wheel_sequence::iterator Wheel_iterator;
    typedef Wheel_sequence::const_iterator Wheel_const_iterator;
    typedef ::xsd::cxx::tree::traits< Wheel_type, char > Wheel_traits;

    const Wheel_sequence&
    Wheel () const;

    Wheel_sequence&
    Wheel ();

    void
    Wheel (const Wheel_sequence& s);

    // Constructors.
    //
    Wheels ();

    Wheels (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Wheels (const Wheels& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Wheels*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Wheels&
    operator= (const Wheels& x);

    virtual 
    ~Wheels ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Wheel_sequence Wheel_;
  };

  class Wheel: public ::xml_schema::type
  {
    public:
    // Slot
    //
    typedef ::device::Slot Slot_type;
    typedef ::xsd::cxx::tree::sequence< Slot_type > Slot_sequence;
    typedef Slot_sequence::iterator Slot_iterator;
    typedef Slot_sequence::const_iterator Slot_const_iterator;
    typedef ::xsd::cxx::tree::traits< Slot_type, char > Slot_traits;

    const Slot_sequence&
    Slot () const;

    Slot_sequence&
    Slot ();

    void
    Slot (const Slot_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Constructors.
    //
    Wheel ();

    Wheel (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Wheel (const Wheel& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Wheel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Wheel&
    operator= (const Wheel& x);

    virtual 
    ~Wheel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Slot_sequence Slot_;
    Name_optional Name_;
  };

  class Slot: public ::xml_schema::type
  {
    public:
    // Facet
    //
    typedef ::device::Facet Facet_type;
    typedef ::xsd::cxx::tree::sequence< Facet_type > Facet_sequence;
    typedef Facet_sequence::iterator Facet_iterator;
    typedef Facet_sequence::const_iterator Facet_const_iterator;
    typedef ::xsd::cxx::tree::traits< Facet_type, char > Facet_traits;

    const Facet_sequence&
    Facet () const;

    Facet_sequence&
    Facet ();

    void
    Facet (const Facet_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Color
    //
    typedef ::device::colorcietype Color_type;
    typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
    typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

    const Color_optional&
    Color () const;

    Color_optional&
    Color ();

    void
    Color (const Color_type& x);

    void
    Color (const Color_optional& x);

    void
    Color (::std::unique_ptr< Color_type > p);

    // Filter
    //
    typedef ::xml_schema::string Filter_type;
    typedef ::xsd::cxx::tree::optional< Filter_type > Filter_optional;
    typedef ::xsd::cxx::tree::traits< Filter_type, char > Filter_traits;

    const Filter_optional&
    Filter () const;

    Filter_optional&
    Filter ();

    void
    Filter (const Filter_type& x);

    void
    Filter (const Filter_optional& x);

    void
    Filter (::std::unique_ptr< Filter_type > p);

    // MediaFileName
    //
    typedef ::xml_schema::string MediaFileName_type;
    typedef ::xsd::cxx::tree::optional< MediaFileName_type > MediaFileName_optional;
    typedef ::xsd::cxx::tree::traits< MediaFileName_type, char > MediaFileName_traits;

    const MediaFileName_optional&
    MediaFileName () const;

    MediaFileName_optional&
    MediaFileName ();

    void
    MediaFileName (const MediaFileName_type& x);

    void
    MediaFileName (const MediaFileName_optional& x);

    void
    MediaFileName (::std::unique_ptr< MediaFileName_type > p);

    // Constructors.
    //
    Slot (const Name_type&);

    Slot (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Slot (const Slot& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Slot*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Slot&
    operator= (const Slot& x);

    virtual 
    ~Slot ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Facet_sequence Facet_;
    ::xsd::cxx::tree::one< Name_type > Name_;
    Color_optional Color_;
    Filter_optional Filter_;
    MediaFileName_optional MediaFileName_;
  };

  class Facet: public ::xml_schema::type
  {
    public:
    // Color
    //
    typedef ::device::colorcietype Color_type;
    typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
    typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

    const Color_optional&
    Color () const;

    Color_optional&
    Color ();

    void
    Color (const Color_type& x);

    void
    Color (const Color_optional& x);

    void
    Color (::std::unique_ptr< Color_type > p);

    // Rotation
    //
    typedef ::xml_schema::string Rotation_type;
    typedef ::xsd::cxx::tree::optional< Rotation_type > Rotation_optional;
    typedef ::xsd::cxx::tree::traits< Rotation_type, char > Rotation_traits;

    const Rotation_optional&
    Rotation () const;

    Rotation_optional&
    Rotation ();

    void
    Rotation (const Rotation_type& x);

    void
    Rotation (const Rotation_optional& x);

    void
    Rotation (::std::unique_ptr< Rotation_type > p);

    // Constructors.
    //
    Facet ();

    Facet (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Facet (const Facet& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Facet*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Facet&
    operator= (const Facet& x);

    virtual 
    ~Facet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Color_optional Color_;
    Rotation_optional Rotation_;
  };

  class Models: public ::xml_schema::type
  {
    public:
    // Model
    //
    typedef ::device::Model Model_type;
    typedef ::xsd::cxx::tree::sequence< Model_type > Model_sequence;
    typedef Model_sequence::iterator Model_iterator;
    typedef Model_sequence::const_iterator Model_const_iterator;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_sequence&
    Model () const;

    Model_sequence&
    Model ();

    void
    Model (const Model_sequence& s);

    // Constructors.
    //
    Models ();

    Models (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Models (const Models& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Models*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Models&
    operator= (const Models& x);

    virtual 
    ~Models ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Model_sequence Model_;
  };

  class Model: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Length
    //
    typedef ::xml_schema::float_ Length_type;
    typedef ::xsd::cxx::tree::optional< Length_type > Length_optional;
    typedef ::xsd::cxx::tree::traits< Length_type, char > Length_traits;

    const Length_optional&
    Length () const;

    Length_optional&
    Length ();

    void
    Length (const Length_type& x);

    void
    Length (const Length_optional& x);

    // Width
    //
    typedef ::xml_schema::float_ Width_type;
    typedef ::xsd::cxx::tree::optional< Width_type > Width_optional;
    typedef ::xsd::cxx::tree::traits< Width_type, char > Width_traits;

    const Width_optional&
    Width () const;

    Width_optional&
    Width ();

    void
    Width (const Width_type& x);

    void
    Width (const Width_optional& x);

    // Height
    //
    typedef ::xml_schema::float_ Height_type;
    typedef ::xsd::cxx::tree::optional< Height_type > Height_optional;
    typedef ::xsd::cxx::tree::traits< Height_type, char > Height_traits;

    const Height_optional&
    Height () const;

    Height_optional&
    Height ();

    void
    Height (const Height_type& x);

    void
    Height (const Height_optional& x);

    // PrimitiveType
    //
    typedef ::device::PrimitiveTypeEnum PrimitiveType_type;
    typedef ::xsd::cxx::tree::optional< PrimitiveType_type > PrimitiveType_optional;
    typedef ::xsd::cxx::tree::traits< PrimitiveType_type, char > PrimitiveType_traits;

    const PrimitiveType_optional&
    PrimitiveType () const;

    PrimitiveType_optional&
    PrimitiveType ();

    void
    PrimitiveType (const PrimitiveType_type& x);

    void
    PrimitiveType (const PrimitiveType_optional& x);

    void
    PrimitiveType (::std::unique_ptr< PrimitiveType_type > p);

    // File
    //
    typedef ::xml_schema::string File_type;
    typedef ::xsd::cxx::tree::optional< File_type > File_optional;
    typedef ::xsd::cxx::tree::traits< File_type, char > File_traits;

    const File_optional&
    File () const;

    File_optional&
    File ();

    void
    File (const File_type& x);

    void
    File (const File_optional& x);

    void
    File (::std::unique_ptr< File_type > p);

    // Constructors.
    //
    Model (const Name_type&);

    Model (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Model (const Model& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Model*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Model&
    operator= (const Model& x);

    virtual 
    ~Model ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    Length_optional Length_;
    Width_optional Width_;
    Height_optional Height_;
    PrimitiveType_optional PrimitiveType_;
    File_optional File_;
  };

  class Geometries: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Constructors.
    //
    Geometries ();

    Geometries (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Geometries (const Geometries& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Geometries*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Geometries&
    operator= (const Geometries& x);

    virtual 
    ~Geometries ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis_sequence Axis_;
    FilterBeam_sequence FilterBeam_;
    FilterColor_sequence FilterColor_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper_sequence FilterShaper_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
  };

  class Geometry: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry1_type;
    typedef ::xsd::cxx::tree::sequence< Geometry1_type > Geometry1_sequence;
    typedef Geometry1_sequence::iterator Geometry1_iterator;
    typedef Geometry1_sequence::const_iterator Geometry1_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry1_type, char > Geometry1_traits;

    const Geometry1_sequence&
    Geometry1 () const;

    Geometry1_sequence&
    Geometry1 ();

    void
    Geometry1 (const Geometry1_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Constructors.
    //
    Geometry ();

    Geometry (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Geometry (const Geometry& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Geometry*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Geometry&
    operator= (const Geometry& x);

    virtual 
    ~Geometry ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry1_sequence Geometry1_;
    Axis_sequence Axis_;
    FilterBeam_sequence FilterBeam_;
    FilterColor_sequence FilterColor_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper_sequence FilterShaper_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
    Name_optional Name_;
    Model_optional Model_;
    Position_optional Position_;
  };

  class Axis: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis1_type;
    typedef ::xsd::cxx::tree::sequence< Axis1_type > Axis1_sequence;
    typedef Axis1_sequence::iterator Axis1_iterator;
    typedef Axis1_sequence::const_iterator Axis1_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis1_type, char > Axis1_traits;

    const Axis1_sequence&
    Axis1 () const;

    Axis1_sequence&
    Axis1 ();

    void
    Axis1 (const Axis1_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Constructors.
    //
    Axis ();

    Axis (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Axis (const Axis& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Axis*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Axis&
    operator= (const Axis& x);

    virtual 
    ~Axis ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis1_sequence Axis1_;
    FilterBeam_sequence FilterBeam_;
    FilterColor_sequence FilterColor_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper_sequence FilterShaper_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
    Name_optional Name_;
    Model_optional Model_;
    Position_optional Position_;
  };

  class FilterBeam: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam1_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam1_type > FilterBeam1_sequence;
    typedef FilterBeam1_sequence::iterator FilterBeam1_iterator;
    typedef FilterBeam1_sequence::const_iterator FilterBeam1_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam1_type, char > FilterBeam1_traits;

    const FilterBeam1_sequence&
    FilterBeam1 () const;

    FilterBeam1_sequence&
    FilterBeam1 ();

    void
    FilterBeam1 (const FilterBeam1_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Constructors.
    //
    FilterBeam ();

    FilterBeam (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    FilterBeam (const FilterBeam& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual FilterBeam*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FilterBeam&
    operator= (const FilterBeam& x);

    virtual 
    ~FilterBeam ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis_sequence Axis_;
    FilterBeam1_sequence FilterBeam1_;
    FilterColor_sequence FilterColor_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper_sequence FilterShaper_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
    Name_optional Name_;
    Model_optional Model_;
    Position_optional Position_;
  };

  class FilterColor: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor1_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor1_type > FilterColor1_sequence;
    typedef FilterColor1_sequence::iterator FilterColor1_iterator;
    typedef FilterColor1_sequence::const_iterator FilterColor1_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor1_type, char > FilterColor1_traits;

    const FilterColor1_sequence&
    FilterColor1 () const;

    FilterColor1_sequence&
    FilterColor1 ();

    void
    FilterColor1 (const FilterColor1_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Constructors.
    //
    FilterColor ();

    FilterColor (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    FilterColor (const FilterColor& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual FilterColor*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FilterColor&
    operator= (const FilterColor& x);

    virtual 
    ~FilterColor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis_sequence Axis_;
    FilterBeam_sequence FilterBeam_;
    FilterColor1_sequence FilterColor1_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper_sequence FilterShaper_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
    Name_optional Name_;
    Model_optional Model_;
    Position_optional Position_;
  };

  class FilterGobo: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo1_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo1_type > FilterGobo1_sequence;
    typedef FilterGobo1_sequence::iterator FilterGobo1_iterator;
    typedef FilterGobo1_sequence::const_iterator FilterGobo1_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo1_type, char > FilterGobo1_traits;

    const FilterGobo1_sequence&
    FilterGobo1 () const;

    FilterGobo1_sequence&
    FilterGobo1 ();

    void
    FilterGobo1 (const FilterGobo1_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Constructors.
    //
    FilterGobo ();

    FilterGobo (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    FilterGobo (const FilterGobo& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual FilterGobo*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FilterGobo&
    operator= (const FilterGobo& x);

    virtual 
    ~FilterGobo ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis_sequence Axis_;
    FilterBeam_sequence FilterBeam_;
    FilterColor_sequence FilterColor_;
    FilterGobo1_sequence FilterGobo1_;
    FilterShaper_sequence FilterShaper_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
    Name_optional Name_;
    Model_optional Model_;
    Position_optional Position_;
  };

  class FilterShaper: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper1_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper1_type > FilterShaper1_sequence;
    typedef FilterShaper1_sequence::iterator FilterShaper1_iterator;
    typedef FilterShaper1_sequence::const_iterator FilterShaper1_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper1_type, char > FilterShaper1_traits;

    const FilterShaper1_sequence&
    FilterShaper1 () const;

    FilterShaper1_sequence&
    FilterShaper1 ();

    void
    FilterShaper1 (const FilterShaper1_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam_type;
    typedef ::xsd::cxx::tree::sequence< Beam_type > Beam_sequence;
    typedef Beam_sequence::iterator Beam_iterator;
    typedef Beam_sequence::const_iterator Beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam_type, char > Beam_traits;

    const Beam_sequence&
    Beam () const;

    Beam_sequence&
    Beam ();

    void
    Beam (const Beam_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Constructors.
    //
    FilterShaper ();

    FilterShaper (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    FilterShaper (const FilterShaper& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual FilterShaper*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FilterShaper&
    operator= (const FilterShaper& x);

    virtual 
    ~FilterShaper ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis_sequence Axis_;
    FilterBeam_sequence FilterBeam_;
    FilterColor_sequence FilterColor_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper1_sequence FilterShaper1_;
    Beam_sequence Beam_;
    GeometryReference_sequence GeometryReference_;
    Name_optional Name_;
    Model_optional Model_;
    Position_optional Position_;
  };

  class Beam: public ::xml_schema::type
  {
    public:
    // Geometry
    //
    typedef ::device::Geometry Geometry_type;
    typedef ::xsd::cxx::tree::sequence< Geometry_type > Geometry_sequence;
    typedef Geometry_sequence::iterator Geometry_iterator;
    typedef Geometry_sequence::const_iterator Geometry_const_iterator;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_sequence&
    Geometry () const;

    Geometry_sequence&
    Geometry ();

    void
    Geometry (const Geometry_sequence& s);

    // Axis
    //
    typedef ::device::Axis Axis_type;
    typedef ::xsd::cxx::tree::sequence< Axis_type > Axis_sequence;
    typedef Axis_sequence::iterator Axis_iterator;
    typedef Axis_sequence::const_iterator Axis_const_iterator;
    typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

    const Axis_sequence&
    Axis () const;

    Axis_sequence&
    Axis ();

    void
    Axis (const Axis_sequence& s);

    // FilterBeam
    //
    typedef ::device::FilterBeam FilterBeam_type;
    typedef ::xsd::cxx::tree::sequence< FilterBeam_type > FilterBeam_sequence;
    typedef FilterBeam_sequence::iterator FilterBeam_iterator;
    typedef FilterBeam_sequence::const_iterator FilterBeam_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterBeam_type, char > FilterBeam_traits;

    const FilterBeam_sequence&
    FilterBeam () const;

    FilterBeam_sequence&
    FilterBeam ();

    void
    FilterBeam (const FilterBeam_sequence& s);

    // FilterColor
    //
    typedef ::device::FilterColor FilterColor_type;
    typedef ::xsd::cxx::tree::sequence< FilterColor_type > FilterColor_sequence;
    typedef FilterColor_sequence::iterator FilterColor_iterator;
    typedef FilterColor_sequence::const_iterator FilterColor_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterColor_type, char > FilterColor_traits;

    const FilterColor_sequence&
    FilterColor () const;

    FilterColor_sequence&
    FilterColor ();

    void
    FilterColor (const FilterColor_sequence& s);

    // FilterGobo
    //
    typedef ::device::FilterGobo FilterGobo_type;
    typedef ::xsd::cxx::tree::sequence< FilterGobo_type > FilterGobo_sequence;
    typedef FilterGobo_sequence::iterator FilterGobo_iterator;
    typedef FilterGobo_sequence::const_iterator FilterGobo_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterGobo_type, char > FilterGobo_traits;

    const FilterGobo_sequence&
    FilterGobo () const;

    FilterGobo_sequence&
    FilterGobo ();

    void
    FilterGobo (const FilterGobo_sequence& s);

    // FilterShaper
    //
    typedef ::device::FilterShaper FilterShaper_type;
    typedef ::xsd::cxx::tree::sequence< FilterShaper_type > FilterShaper_sequence;
    typedef FilterShaper_sequence::iterator FilterShaper_iterator;
    typedef FilterShaper_sequence::const_iterator FilterShaper_const_iterator;
    typedef ::xsd::cxx::tree::traits< FilterShaper_type, char > FilterShaper_traits;

    const FilterShaper_sequence&
    FilterShaper () const;

    FilterShaper_sequence&
    FilterShaper ();

    void
    FilterShaper (const FilterShaper_sequence& s);

    // Beam
    //
    typedef ::device::Beam Beam1_type;
    typedef ::xsd::cxx::tree::sequence< Beam1_type > Beam1_sequence;
    typedef Beam1_sequence::iterator Beam1_iterator;
    typedef Beam1_sequence::const_iterator Beam1_const_iterator;
    typedef ::xsd::cxx::tree::traits< Beam1_type, char > Beam1_traits;

    const Beam1_sequence&
    Beam1 () const;

    Beam1_sequence&
    Beam1 ();

    void
    Beam1 (const Beam1_sequence& s);

    // GeometryReference
    //
    typedef ::device::GeometryReference GeometryReference_type;
    typedef ::xsd::cxx::tree::sequence< GeometryReference_type > GeometryReference_sequence;
    typedef GeometryReference_sequence::iterator GeometryReference_iterator;
    typedef GeometryReference_sequence::const_iterator GeometryReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< GeometryReference_type, char > GeometryReference_traits;

    const GeometryReference_sequence&
    GeometryReference () const;

    GeometryReference_sequence&
    GeometryReference ();

    void
    GeometryReference (const GeometryReference_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_type&
    Model () const;

    Model_type&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_type&
    Position () const;

    Position_type&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // LampType
    //
    typedef ::device::LampTypeEnum LampType_type;
    typedef ::xsd::cxx::tree::optional< LampType_type > LampType_optional;
    typedef ::xsd::cxx::tree::traits< LampType_type, char > LampType_traits;

    const LampType_optional&
    LampType () const;

    LampType_optional&
    LampType ();

    void
    LampType (const LampType_type& x);

    void
    LampType (const LampType_optional& x);

    void
    LampType (::std::unique_ptr< LampType_type > p);

    // PowerConsumption
    //
    typedef ::xml_schema::float_ PowerConsumption_type;
    typedef ::xsd::cxx::tree::optional< PowerConsumption_type > PowerConsumption_optional;
    typedef ::xsd::cxx::tree::traits< PowerConsumption_type, char > PowerConsumption_traits;

    const PowerConsumption_optional&
    PowerConsumption () const;

    PowerConsumption_optional&
    PowerConsumption ();

    void
    PowerConsumption (const PowerConsumption_type& x);

    void
    PowerConsumption (const PowerConsumption_optional& x);

    // LuminousFlux
    //
    typedef ::xml_schema::float_ LuminousFlux_type;
    typedef ::xsd::cxx::tree::optional< LuminousFlux_type > LuminousFlux_optional;
    typedef ::xsd::cxx::tree::traits< LuminousFlux_type, char > LuminousFlux_traits;

    const LuminousFlux_optional&
    LuminousFlux () const;

    LuminousFlux_optional&
    LuminousFlux ();

    void
    LuminousFlux (const LuminousFlux_type& x);

    void
    LuminousFlux (const LuminousFlux_optional& x);

    // ColorTemperature
    //
    typedef ::xml_schema::float_ ColorTemperature_type;
    typedef ::xsd::cxx::tree::optional< ColorTemperature_type > ColorTemperature_optional;
    typedef ::xsd::cxx::tree::traits< ColorTemperature_type, char > ColorTemperature_traits;

    const ColorTemperature_optional&
    ColorTemperature () const;

    ColorTemperature_optional&
    ColorTemperature ();

    void
    ColorTemperature (const ColorTemperature_type& x);

    void
    ColorTemperature (const ColorTemperature_optional& x);

    // BeamAngle
    //
    typedef ::xml_schema::float_ BeamAngle_type;
    typedef ::xsd::cxx::tree::optional< BeamAngle_type > BeamAngle_optional;
    typedef ::xsd::cxx::tree::traits< BeamAngle_type, char > BeamAngle_traits;

    const BeamAngle_optional&
    BeamAngle () const;

    BeamAngle_optional&
    BeamAngle ();

    void
    BeamAngle (const BeamAngle_type& x);

    void
    BeamAngle (const BeamAngle_optional& x);

    // FieldAngle
    //
    typedef ::xml_schema::float_ FieldAngle_type;
    typedef ::xsd::cxx::tree::optional< FieldAngle_type > FieldAngle_optional;
    typedef ::xsd::cxx::tree::traits< FieldAngle_type, char > FieldAngle_traits;

    const FieldAngle_optional&
    FieldAngle () const;

    FieldAngle_optional&
    FieldAngle ();

    void
    FieldAngle (const FieldAngle_type& x);

    void
    FieldAngle (const FieldAngle_optional& x);

    // BeamRadius
    //
    typedef ::xml_schema::float_ BeamRadius_type;
    typedef ::xsd::cxx::tree::optional< BeamRadius_type > BeamRadius_optional;
    typedef ::xsd::cxx::tree::traits< BeamRadius_type, char > BeamRadius_traits;

    const BeamRadius_optional&
    BeamRadius () const;

    BeamRadius_optional&
    BeamRadius ();

    void
    BeamRadius (const BeamRadius_type& x);

    void
    BeamRadius (const BeamRadius_optional& x);

    // BeamType
    //
    typedef ::device::BeamTypeEnum BeamType_type;
    typedef ::xsd::cxx::tree::optional< BeamType_type > BeamType_optional;
    typedef ::xsd::cxx::tree::traits< BeamType_type, char > BeamType_traits;

    const BeamType_optional&
    BeamType () const;

    BeamType_optional&
    BeamType ();

    void
    BeamType (const BeamType_type& x);

    void
    BeamType (const BeamType_optional& x);

    void
    BeamType (::std::unique_ptr< BeamType_type > p);

    // ColorRenderingIndex
    //
    typedef ::xml_schema::integer ColorRenderingIndex_type;
    typedef ::xsd::cxx::tree::optional< ColorRenderingIndex_type > ColorRenderingIndex_optional;
    typedef ::xsd::cxx::tree::traits< ColorRenderingIndex_type, char > ColorRenderingIndex_traits;

    const ColorRenderingIndex_optional&
    ColorRenderingIndex () const;

    ColorRenderingIndex_optional&
    ColorRenderingIndex ();

    void
    ColorRenderingIndex (const ColorRenderingIndex_type& x);

    void
    ColorRenderingIndex (const ColorRenderingIndex_optional& x);

    // Constructors.
    //
    Beam (const Name_type&,
          const Model_type&,
          const Position_type&);

    Beam (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Beam (const Beam& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Beam*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Beam&
    operator= (const Beam& x);

    virtual 
    ~Beam ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Geometry_sequence Geometry_;
    Axis_sequence Axis_;
    FilterBeam_sequence FilterBeam_;
    FilterColor_sequence FilterColor_;
    FilterGobo_sequence FilterGobo_;
    FilterShaper_sequence FilterShaper_;
    Beam1_sequence Beam1_;
    GeometryReference_sequence GeometryReference_;
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Model_type > Model_;
    ::xsd::cxx::tree::one< Position_type > Position_;
    LampType_optional LampType_;
    PowerConsumption_optional PowerConsumption_;
    LuminousFlux_optional LuminousFlux_;
    ColorTemperature_optional ColorTemperature_;
    BeamAngle_optional BeamAngle_;
    FieldAngle_optional FieldAngle_;
    BeamRadius_optional BeamRadius_;
    BeamType_optional BeamType_;
    ColorRenderingIndex_optional ColorRenderingIndex_;
  };

  class GeometryReference: public ::xml_schema::type
  {
    public:
    // Break
    //
    typedef ::device::Break Break_type;
    typedef ::xsd::cxx::tree::sequence< Break_type > Break_sequence;
    typedef Break_sequence::iterator Break_iterator;
    typedef Break_sequence::const_iterator Break_const_iterator;
    typedef ::xsd::cxx::tree::traits< Break_type, char > Break_traits;

    const Break_sequence&
    Break () const;

    Break_sequence&
    Break ();

    void
    Break (const Break_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Position
    //
    typedef ::device::matrixtype Position_type;
    typedef ::xsd::cxx::tree::optional< Position_type > Position_optional;
    typedef ::xsd::cxx::tree::traits< Position_type, char > Position_traits;

    const Position_optional&
    Position () const;

    Position_optional&
    Position ();

    void
    Position (const Position_type& x);

    void
    Position (const Position_optional& x);

    void
    Position (::std::unique_ptr< Position_type > p);

    // Geometry
    //
    typedef ::device::nametype Geometry_type;
    typedef ::xsd::cxx::tree::optional< Geometry_type > Geometry_optional;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_optional&
    Geometry () const;

    Geometry_optional&
    Geometry ();

    void
    Geometry (const Geometry_type& x);

    void
    Geometry (const Geometry_optional& x);

    void
    Geometry (::std::unique_ptr< Geometry_type > p);

    // Model
    //
    typedef ::device::nametype Model_type;
    typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
    typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

    const Model_optional&
    Model () const;

    Model_optional&
    Model ();

    void
    Model (const Model_type& x);

    void
    Model (const Model_optional& x);

    void
    Model (::std::unique_ptr< Model_type > p);

    // Constructors.
    //
    GeometryReference ();

    GeometryReference (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    GeometryReference (const GeometryReference& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual GeometryReference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    GeometryReference&
    operator= (const GeometryReference& x);

    virtual 
    ~GeometryReference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Break_sequence Break_;
    Name_optional Name_;
    Position_optional Position_;
    Geometry_optional Geometry_;
    Model_optional Model_;
  };

  class Break: public ::xml_schema::type
  {
    public:
    // DMXOffset
    //
    typedef ::xml_schema::integer DMXOffset_type;
    typedef ::xsd::cxx::tree::optional< DMXOffset_type > DMXOffset_optional;
    typedef ::xsd::cxx::tree::traits< DMXOffset_type, char > DMXOffset_traits;

    const DMXOffset_optional&
    DMXOffset () const;

    DMXOffset_optional&
    DMXOffset ();

    void
    DMXOffset (const DMXOffset_type& x);

    void
    DMXOffset (const DMXOffset_optional& x);

    // DMXBreak
    //
    typedef ::xml_schema::integer DMXBreak_type;
    typedef ::xsd::cxx::tree::optional< DMXBreak_type > DMXBreak_optional;
    typedef ::xsd::cxx::tree::traits< DMXBreak_type, char > DMXBreak_traits;

    const DMXBreak_optional&
    DMXBreak () const;

    DMXBreak_optional&
    DMXBreak ();

    void
    DMXBreak (const DMXBreak_type& x);

    void
    DMXBreak (const DMXBreak_optional& x);

    // Constructors.
    //
    Break ();

    Break (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Break (const Break& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Break*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Break&
    operator= (const Break& x);

    virtual 
    ~Break ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXOffset_optional DMXOffset_;
    DMXBreak_optional DMXBreak_;
  };

  class DMXModes: public ::xml_schema::type
  {
    public:
    // DMXMode
    //
    typedef ::device::DMXMode DMXMode_type;
    typedef ::xsd::cxx::tree::sequence< DMXMode_type > DMXMode_sequence;
    typedef DMXMode_sequence::iterator DMXMode_iterator;
    typedef DMXMode_sequence::const_iterator DMXMode_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXMode_type, char > DMXMode_traits;

    const DMXMode_sequence&
    DMXMode () const;

    DMXMode_sequence&
    DMXMode ();

    void
    DMXMode (const DMXMode_sequence& s);

    // Constructors.
    //
    DMXModes ();

    DMXModes (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    DMXModes (const DMXModes& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual DMXModes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXModes&
    operator= (const DMXModes& x);

    virtual 
    ~DMXModes ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXMode_sequence DMXMode_;
  };

  class DMXMode: public ::xml_schema::type
  {
    public:
    // DMXChannels
    //
    typedef ::device::DMXChannels DMXChannels_type;
    typedef ::xsd::cxx::tree::sequence< DMXChannels_type > DMXChannels_sequence;
    typedef DMXChannels_sequence::iterator DMXChannels_iterator;
    typedef DMXChannels_sequence::const_iterator DMXChannels_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXChannels_type, char > DMXChannels_traits;

    const DMXChannels_sequence&
    DMXChannels () const;

    DMXChannels_sequence&
    DMXChannels ();

    void
    DMXChannels (const DMXChannels_sequence& s);

    // Relations
    //
    typedef ::device::Relations Relations_type;
    typedef ::xsd::cxx::tree::sequence< Relations_type > Relations_sequence;
    typedef Relations_sequence::iterator Relations_iterator;
    typedef Relations_sequence::const_iterator Relations_const_iterator;
    typedef ::xsd::cxx::tree::traits< Relations_type, char > Relations_traits;

    const Relations_sequence&
    Relations () const;

    Relations_sequence&
    Relations ();

    void
    Relations (const Relations_sequence& s);

    // FTMacros
    //
    typedef ::device::FTMacros FTMacros_type;
    typedef ::xsd::cxx::tree::sequence< FTMacros_type > FTMacros_sequence;
    typedef FTMacros_sequence::iterator FTMacros_iterator;
    typedef FTMacros_sequence::const_iterator FTMacros_const_iterator;
    typedef ::xsd::cxx::tree::traits< FTMacros_type, char > FTMacros_traits;

    const FTMacros_sequence&
    FTMacros () const;

    FTMacros_sequence&
    FTMacros ();

    void
    FTMacros (const FTMacros_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Geometry
    //
    typedef ::device::nametype Geometry_type;
    typedef ::xsd::cxx::tree::optional< Geometry_type > Geometry_optional;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_optional&
    Geometry () const;

    Geometry_optional&
    Geometry ();

    void
    Geometry (const Geometry_type& x);

    void
    Geometry (const Geometry_optional& x);

    void
    Geometry (::std::unique_ptr< Geometry_type > p);

    // Constructors.
    //
    DMXMode (const Name_type&);

    DMXMode (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    DMXMode (const DMXMode& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual DMXMode*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXMode&
    operator= (const DMXMode& x);

    virtual 
    ~DMXMode ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXChannels_sequence DMXChannels_;
    Relations_sequence Relations_;
    FTMacros_sequence FTMacros_;
    ::xsd::cxx::tree::one< Name_type > Name_;
    Geometry_optional Geometry_;
  };

  class DMXChannels: public ::xml_schema::type
  {
    public:
    // DMXChannel
    //
    typedef ::device::DMXChannel DMXChannel_type;
    typedef ::xsd::cxx::tree::sequence< DMXChannel_type > DMXChannel_sequence;
    typedef DMXChannel_sequence::iterator DMXChannel_iterator;
    typedef DMXChannel_sequence::const_iterator DMXChannel_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXChannel_type, char > DMXChannel_traits;

    const DMXChannel_sequence&
    DMXChannel () const;

    DMXChannel_sequence&
    DMXChannel ();

    void
    DMXChannel (const DMXChannel_sequence& s);

    // Constructors.
    //
    DMXChannels ();

    DMXChannels (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    DMXChannels (const DMXChannels& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual DMXChannels*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXChannels&
    operator= (const DMXChannels& x);

    virtual 
    ~DMXChannels ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXChannel_sequence DMXChannel_;
  };

  class DMXChannel: public ::xml_schema::type
  {
    public:
    // LogicalChannel
    //
    typedef ::device::LogicalChannel LogicalChannel_type;
    typedef ::xsd::cxx::tree::traits< LogicalChannel_type, char > LogicalChannel_traits;

    const LogicalChannel_type&
    LogicalChannel () const;

    LogicalChannel_type&
    LogicalChannel ();

    void
    LogicalChannel (const LogicalChannel_type& x);

    void
    LogicalChannel (::std::unique_ptr< LogicalChannel_type > p);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // DMXBreak
    //
    typedef ::xml_schema::integer DMXBreak_type;
    typedef ::xsd::cxx::tree::optional< DMXBreak_type > DMXBreak_optional;
    typedef ::xsd::cxx::tree::traits< DMXBreak_type, char > DMXBreak_traits;

    const DMXBreak_optional&
    DMXBreak () const;

    DMXBreak_optional&
    DMXBreak ();

    void
    DMXBreak (const DMXBreak_type& x);

    void
    DMXBreak (const DMXBreak_optional& x);

    // Offset
    //
    typedef ::device::offsettype Offset_type;
    typedef ::xsd::cxx::tree::optional< Offset_type > Offset_optional;
    typedef ::xsd::cxx::tree::traits< Offset_type, char > Offset_traits;

    const Offset_optional&
    Offset () const;

    Offset_optional&
    Offset ();

    void
    Offset (const Offset_type& x);

    void
    Offset (const Offset_optional& x);

    void
    Offset (::std::unique_ptr< Offset_type > p);

    // Default
    //
    typedef ::device::dmxtype Default_type;
    typedef ::xsd::cxx::tree::optional< Default_type > Default_optional;
    typedef ::xsd::cxx::tree::traits< Default_type, char > Default_traits;

    const Default_optional&
    Default () const;

    Default_optional&
    Default ();

    void
    Default (const Default_type& x);

    void
    Default (const Default_optional& x);

    void
    Default (::std::unique_ptr< Default_type > p);

    // Highlight
    //
    typedef ::device::dmxtype Highlight_type;
    typedef ::xsd::cxx::tree::optional< Highlight_type > Highlight_optional;
    typedef ::xsd::cxx::tree::traits< Highlight_type, char > Highlight_traits;

    const Highlight_optional&
    Highlight () const;

    Highlight_optional&
    Highlight ();

    void
    Highlight (const Highlight_type& x);

    void
    Highlight (const Highlight_optional& x);

    void
    Highlight (::std::unique_ptr< Highlight_type > p);

    // Geometry
    //
    typedef ::xml_schema::string Geometry_type;
    typedef ::xsd::cxx::tree::optional< Geometry_type > Geometry_optional;
    typedef ::xsd::cxx::tree::traits< Geometry_type, char > Geometry_traits;

    const Geometry_optional&
    Geometry () const;

    Geometry_optional&
    Geometry ();

    void
    Geometry (const Geometry_type& x);

    void
    Geometry (const Geometry_optional& x);

    void
    Geometry (::std::unique_ptr< Geometry_type > p);

    // Constructors.
    //
    DMXChannel (const LogicalChannel_type&);

    DMXChannel (::std::unique_ptr< LogicalChannel_type >);

    DMXChannel (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    DMXChannel (const DMXChannel& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual DMXChannel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXChannel&
    operator= (const DMXChannel& x);

    virtual 
    ~DMXChannel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< LogicalChannel_type > LogicalChannel_;
    Name_optional Name_;
    DMXBreak_optional DMXBreak_;
    Offset_optional Offset_;
    Default_optional Default_;
    Highlight_optional Highlight_;
    Geometry_optional Geometry_;
  };

  class LogicalChannel: public ::xml_schema::type
  {
    public:
    // ChannelFunction
    //
    typedef ::device::ChannelFunction ChannelFunction_type;
    typedef ::xsd::cxx::tree::sequence< ChannelFunction_type > ChannelFunction_sequence;
    typedef ChannelFunction_sequence::iterator ChannelFunction_iterator;
    typedef ChannelFunction_sequence::const_iterator ChannelFunction_const_iterator;
    typedef ::xsd::cxx::tree::traits< ChannelFunction_type, char > ChannelFunction_traits;

    const ChannelFunction_sequence&
    ChannelFunction () const;

    ChannelFunction_sequence&
    ChannelFunction ();

    void
    ChannelFunction (const ChannelFunction_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Attribute
    //
    typedef ::device::AttributeEnum Attribute_type;
    typedef ::xsd::cxx::tree::traits< Attribute_type, char > Attribute_traits;

    const Attribute_type&
    Attribute () const;

    Attribute_type&
    Attribute ();

    void
    Attribute (const Attribute_type& x);

    void
    Attribute (::std::unique_ptr< Attribute_type > p);

    // Snap
    //
    typedef ::device::SnapEnum Snap_type;
    typedef ::xsd::cxx::tree::optional< Snap_type > Snap_optional;
    typedef ::xsd::cxx::tree::traits< Snap_type, char > Snap_traits;

    const Snap_optional&
    Snap () const;

    Snap_optional&
    Snap ();

    void
    Snap (const Snap_type& x);

    void
    Snap (const Snap_optional& x);

    void
    Snap (::std::unique_ptr< Snap_type > p);

    // Master
    //
    typedef ::device::MasterEnum Master_type;
    typedef ::xsd::cxx::tree::optional< Master_type > Master_optional;
    typedef ::xsd::cxx::tree::traits< Master_type, char > Master_traits;

    const Master_optional&
    Master () const;

    Master_optional&
    Master ();

    void
    Master (const Master_type& x);

    void
    Master (const Master_optional& x);

    void
    Master (::std::unique_ptr< Master_type > p);

    // MibFade
    //
    typedef ::xml_schema::float_ MibFade_type;
    typedef ::xsd::cxx::tree::optional< MibFade_type > MibFade_optional;
    typedef ::xsd::cxx::tree::traits< MibFade_type, char > MibFade_traits;

    const MibFade_optional&
    MibFade () const;

    MibFade_optional&
    MibFade ();

    void
    MibFade (const MibFade_type& x);

    void
    MibFade (const MibFade_optional& x);

    // DMXChangeTimeLimit
    //
    typedef ::xml_schema::float_ DMXChangeTimeLimit_type;
    typedef ::xsd::cxx::tree::optional< DMXChangeTimeLimit_type > DMXChangeTimeLimit_optional;
    typedef ::xsd::cxx::tree::traits< DMXChangeTimeLimit_type, char > DMXChangeTimeLimit_traits;

    const DMXChangeTimeLimit_optional&
    DMXChangeTimeLimit () const;

    DMXChangeTimeLimit_optional&
    DMXChangeTimeLimit ();

    void
    DMXChangeTimeLimit (const DMXChangeTimeLimit_type& x);

    void
    DMXChangeTimeLimit (const DMXChangeTimeLimit_optional& x);

    // Constructors.
    //
    LogicalChannel (const Attribute_type&);

    LogicalChannel (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    LogicalChannel (const LogicalChannel& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual LogicalChannel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    LogicalChannel&
    operator= (const LogicalChannel& x);

    virtual 
    ~LogicalChannel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ChannelFunction_sequence ChannelFunction_;
    Name_optional Name_;
    ::xsd::cxx::tree::one< Attribute_type > Attribute_;
    Snap_optional Snap_;
    Master_optional Master_;
    MibFade_optional MibFade_;
    DMXChangeTimeLimit_optional DMXChangeTimeLimit_;
  };

  class ChannelFunction: public ::xml_schema::type
  {
    public:
    // ChannelSet
    //
    typedef ::device::ChannelSet ChannelSet_type;
    typedef ::xsd::cxx::tree::sequence< ChannelSet_type > ChannelSet_sequence;
    typedef ChannelSet_sequence::iterator ChannelSet_iterator;
    typedef ChannelSet_sequence::const_iterator ChannelSet_const_iterator;
    typedef ::xsd::cxx::tree::traits< ChannelSet_type, char > ChannelSet_traits;

    const ChannelSet_sequence&
    ChannelSet () const;

    ChannelSet_sequence&
    ChannelSet ();

    void
    ChannelSet (const ChannelSet_sequence& s);

    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Attribute
    //
    typedef ::device::AttributeEnum Attribute_type;
    typedef ::xsd::cxx::tree::traits< Attribute_type, char > Attribute_traits;

    const Attribute_type&
    Attribute () const;

    Attribute_type&
    Attribute ();

    void
    Attribute (const Attribute_type& x);

    void
    Attribute (::std::unique_ptr< Attribute_type > p);

    // OriginalAttribute
    //
    typedef ::xml_schema::string OriginalAttribute_type;
    typedef ::xsd::cxx::tree::optional< OriginalAttribute_type > OriginalAttribute_optional;
    typedef ::xsd::cxx::tree::traits< OriginalAttribute_type, char > OriginalAttribute_traits;

    const OriginalAttribute_optional&
    OriginalAttribute () const;

    OriginalAttribute_optional&
    OriginalAttribute ();

    void
    OriginalAttribute (const OriginalAttribute_type& x);

    void
    OriginalAttribute (const OriginalAttribute_optional& x);

    void
    OriginalAttribute (::std::unique_ptr< OriginalAttribute_type > p);

    // DMXFrom
    //
    typedef ::device::dmxtype DMXFrom_type;
    typedef ::xsd::cxx::tree::optional< DMXFrom_type > DMXFrom_optional;
    typedef ::xsd::cxx::tree::traits< DMXFrom_type, char > DMXFrom_traits;

    const DMXFrom_optional&
    DMXFrom () const;

    DMXFrom_optional&
    DMXFrom ();

    void
    DMXFrom (const DMXFrom_type& x);

    void
    DMXFrom (const DMXFrom_optional& x);

    void
    DMXFrom (::std::unique_ptr< DMXFrom_type > p);

    // PhysicalFrom
    //
    typedef ::xml_schema::float_ PhysicalFrom_type;
    typedef ::xsd::cxx::tree::optional< PhysicalFrom_type > PhysicalFrom_optional;
    typedef ::xsd::cxx::tree::traits< PhysicalFrom_type, char > PhysicalFrom_traits;

    const PhysicalFrom_optional&
    PhysicalFrom () const;

    PhysicalFrom_optional&
    PhysicalFrom ();

    void
    PhysicalFrom (const PhysicalFrom_type& x);

    void
    PhysicalFrom (const PhysicalFrom_optional& x);

    // PhysicalTo
    //
    typedef ::xml_schema::float_ PhysicalTo_type;
    typedef ::xsd::cxx::tree::optional< PhysicalTo_type > PhysicalTo_optional;
    typedef ::xsd::cxx::tree::traits< PhysicalTo_type, char > PhysicalTo_traits;

    const PhysicalTo_optional&
    PhysicalTo () const;

    PhysicalTo_optional&
    PhysicalTo ();

    void
    PhysicalTo (const PhysicalTo_type& x);

    void
    PhysicalTo (const PhysicalTo_optional& x);

    // RealFade
    //
    typedef ::xml_schema::float_ RealFade_type;
    typedef ::xsd::cxx::tree::optional< RealFade_type > RealFade_optional;
    typedef ::xsd::cxx::tree::traits< RealFade_type, char > RealFade_traits;

    const RealFade_optional&
    RealFade () const;

    RealFade_optional&
    RealFade ();

    void
    RealFade (const RealFade_type& x);

    void
    RealFade (const RealFade_optional& x);

    // Wheel
    //
    typedef ::xml_schema::string Wheel_type;
    typedef ::xsd::cxx::tree::optional< Wheel_type > Wheel_optional;
    typedef ::xsd::cxx::tree::traits< Wheel_type, char > Wheel_traits;

    const Wheel_optional&
    Wheel () const;

    Wheel_optional&
    Wheel ();

    void
    Wheel (const Wheel_type& x);

    void
    Wheel (const Wheel_optional& x);

    void
    Wheel (::std::unique_ptr< Wheel_type > p);

    // Emitter
    //
    typedef ::xml_schema::string Emitter_type;
    typedef ::xsd::cxx::tree::optional< Emitter_type > Emitter_optional;
    typedef ::xsd::cxx::tree::traits< Emitter_type, char > Emitter_traits;

    const Emitter_optional&
    Emitter () const;

    Emitter_optional&
    Emitter ();

    void
    Emitter (const Emitter_type& x);

    void
    Emitter (const Emitter_optional& x);

    void
    Emitter (::std::unique_ptr< Emitter_type > p);

    // Filter
    //
    typedef ::xml_schema::string Filter_type;
    typedef ::xsd::cxx::tree::optional< Filter_type > Filter_optional;
    typedef ::xsd::cxx::tree::traits< Filter_type, char > Filter_traits;

    const Filter_optional&
    Filter () const;

    Filter_optional&
    Filter ();

    void
    Filter (const Filter_type& x);

    void
    Filter (const Filter_optional& x);

    void
    Filter (::std::unique_ptr< Filter_type > p);

    // ModeMaster
    //
    typedef ::xml_schema::string ModeMaster_type;
    typedef ::xsd::cxx::tree::optional< ModeMaster_type > ModeMaster_optional;
    typedef ::xsd::cxx::tree::traits< ModeMaster_type, char > ModeMaster_traits;

    const ModeMaster_optional&
    ModeMaster () const;

    ModeMaster_optional&
    ModeMaster ();

    void
    ModeMaster (const ModeMaster_type& x);

    void
    ModeMaster (const ModeMaster_optional& x);

    void
    ModeMaster (::std::unique_ptr< ModeMaster_type > p);

    // ModeFrom
    //
    typedef ::device::dmxtype ModeFrom_type;
    typedef ::xsd::cxx::tree::traits< ModeFrom_type, char > ModeFrom_traits;

    const ModeFrom_type&
    ModeFrom () const;

    ModeFrom_type&
    ModeFrom ();

    void
    ModeFrom (const ModeFrom_type& x);

    void
    ModeFrom (::std::unique_ptr< ModeFrom_type > p);

    static const ModeFrom_type&
    ModeFrom_default_value ();

    // ModeTo
    //
    typedef ::device::dmxtype ModeTo_type;
    typedef ::xsd::cxx::tree::optional< ModeTo_type > ModeTo_optional;
    typedef ::xsd::cxx::tree::traits< ModeTo_type, char > ModeTo_traits;

    const ModeTo_optional&
    ModeTo () const;

    ModeTo_optional&
    ModeTo ();

    void
    ModeTo (const ModeTo_type& x);

    void
    ModeTo (const ModeTo_optional& x);

    void
    ModeTo (::std::unique_ptr< ModeTo_type > p);

    // Constructors.
    //
    ChannelFunction (const Attribute_type&);

    ChannelFunction (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    ChannelFunction (const ChannelFunction& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual ChannelFunction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ChannelFunction&
    operator= (const ChannelFunction& x);

    virtual 
    ~ChannelFunction ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ChannelSet_sequence ChannelSet_;
    Name_optional Name_;
    ::xsd::cxx::tree::one< Attribute_type > Attribute_;
    OriginalAttribute_optional OriginalAttribute_;
    DMXFrom_optional DMXFrom_;
    PhysicalFrom_optional PhysicalFrom_;
    PhysicalTo_optional PhysicalTo_;
    RealFade_optional RealFade_;
    Wheel_optional Wheel_;
    Emitter_optional Emitter_;
    Filter_optional Filter_;
    ModeMaster_optional ModeMaster_;
    ::xsd::cxx::tree::one< ModeFrom_type > ModeFrom_;
    static const ModeFrom_type ModeFrom_default_value_;
    ModeTo_optional ModeTo_;
  };

  class ChannelSet: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // DMXFrom
    //
    typedef ::device::dmxtype DMXFrom_type;
    typedef ::xsd::cxx::tree::optional< DMXFrom_type > DMXFrom_optional;
    typedef ::xsd::cxx::tree::traits< DMXFrom_type, char > DMXFrom_traits;

    const DMXFrom_optional&
    DMXFrom () const;

    DMXFrom_optional&
    DMXFrom ();

    void
    DMXFrom (const DMXFrom_type& x);

    void
    DMXFrom (const DMXFrom_optional& x);

    void
    DMXFrom (::std::unique_ptr< DMXFrom_type > p);

    // DMXTo
    //
    typedef ::device::dmxtype DMXTo_type;
    typedef ::xsd::cxx::tree::optional< DMXTo_type > DMXTo_optional;
    typedef ::xsd::cxx::tree::traits< DMXTo_type, char > DMXTo_traits;

    const DMXTo_optional&
    DMXTo () const;

    DMXTo_optional&
    DMXTo ();

    void
    DMXTo (const DMXTo_type& x);

    void
    DMXTo (const DMXTo_optional& x);

    void
    DMXTo (::std::unique_ptr< DMXTo_type > p);

    // PhysicalFrom
    //
    typedef ::xml_schema::float_ PhysicalFrom_type;
    typedef ::xsd::cxx::tree::optional< PhysicalFrom_type > PhysicalFrom_optional;
    typedef ::xsd::cxx::tree::traits< PhysicalFrom_type, char > PhysicalFrom_traits;

    const PhysicalFrom_optional&
    PhysicalFrom () const;

    PhysicalFrom_optional&
    PhysicalFrom ();

    void
    PhysicalFrom (const PhysicalFrom_type& x);

    void
    PhysicalFrom (const PhysicalFrom_optional& x);

    // PhysicalTo
    //
    typedef ::xml_schema::float_ PhysicalTo_type;
    typedef ::xsd::cxx::tree::optional< PhysicalTo_type > PhysicalTo_optional;
    typedef ::xsd::cxx::tree::traits< PhysicalTo_type, char > PhysicalTo_traits;

    const PhysicalTo_optional&
    PhysicalTo () const;

    PhysicalTo_optional&
    PhysicalTo ();

    void
    PhysicalTo (const PhysicalTo_type& x);

    void
    PhysicalTo (const PhysicalTo_optional& x);

    // WheelSlotIndex
    //
    typedef ::xml_schema::integer WheelSlotIndex_type;
    typedef ::xsd::cxx::tree::optional< WheelSlotIndex_type > WheelSlotIndex_optional;
    typedef ::xsd::cxx::tree::traits< WheelSlotIndex_type, char > WheelSlotIndex_traits;

    const WheelSlotIndex_optional&
    WheelSlotIndex () const;

    WheelSlotIndex_optional&
    WheelSlotIndex ();

    void
    WheelSlotIndex (const WheelSlotIndex_type& x);

    void
    WheelSlotIndex (const WheelSlotIndex_optional& x);

    // Constructors.
    //
    ChannelSet ();

    ChannelSet (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    ChannelSet (const ChannelSet& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual ChannelSet*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ChannelSet&
    operator= (const ChannelSet& x);

    virtual 
    ~ChannelSet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Name_optional Name_;
    DMXFrom_optional DMXFrom_;
    DMXTo_optional DMXTo_;
    PhysicalFrom_optional PhysicalFrom_;
    PhysicalTo_optional PhysicalTo_;
    WheelSlotIndex_optional WheelSlotIndex_;
  };

  class Relations: public ::xml_schema::type
  {
    public:
    // Relation
    //
    typedef ::device::Relation Relation_type;
    typedef ::xsd::cxx::tree::sequence< Relation_type > Relation_sequence;
    typedef Relation_sequence::iterator Relation_iterator;
    typedef Relation_sequence::const_iterator Relation_const_iterator;
    typedef ::xsd::cxx::tree::traits< Relation_type, char > Relation_traits;

    const Relation_sequence&
    Relation () const;

    Relation_sequence&
    Relation ();

    void
    Relation (const Relation_sequence& s);

    // Constructors.
    //
    Relations ();

    Relations (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Relations (const Relations& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Relations*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Relations&
    operator= (const Relations& x);

    virtual 
    ~Relations ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Relation_sequence Relation_;
  };

  class Relation: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Master
    //
    typedef ::xml_schema::string Master_type;
    typedef ::xsd::cxx::tree::traits< Master_type, char > Master_traits;

    const Master_type&
    Master () const;

    Master_type&
    Master ();

    void
    Master (const Master_type& x);

    void
    Master (::std::unique_ptr< Master_type > p);

    // Follower
    //
    typedef ::xml_schema::string Follower_type;
    typedef ::xsd::cxx::tree::traits< Follower_type, char > Follower_traits;

    const Follower_type&
    Follower () const;

    Follower_type&
    Follower ();

    void
    Follower (const Follower_type& x);

    void
    Follower (::std::unique_ptr< Follower_type > p);

    // Type
    //
    typedef ::device::RelationTypesEnum Type_type;
    typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

    const Type_type&
    Type () const;

    Type_type&
    Type ();

    void
    Type (const Type_type& x);

    void
    Type (::std::unique_ptr< Type_type > p);

    // Constructors.
    //
    Relation (const Name_type&,
              const Master_type&,
              const Follower_type&,
              const Type_type&);

    Relation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Relation (const Relation& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Relation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Relation&
    operator= (const Relation& x);

    virtual 
    ~Relation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Master_type > Master_;
    ::xsd::cxx::tree::one< Follower_type > Follower_;
    ::xsd::cxx::tree::one< Type_type > Type_;
  };

  class Revisions: public ::xml_schema::type
  {
    public:
    // Revision
    //
    typedef ::device::Revision Revision_type;
    typedef ::xsd::cxx::tree::sequence< Revision_type > Revision_sequence;
    typedef Revision_sequence::iterator Revision_iterator;
    typedef Revision_sequence::const_iterator Revision_const_iterator;
    typedef ::xsd::cxx::tree::traits< Revision_type, char > Revision_traits;

    const Revision_sequence&
    Revision () const;

    Revision_sequence&
    Revision ();

    void
    Revision (const Revision_sequence& s);

    // Constructors.
    //
    Revisions ();

    Revisions (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Revisions (const Revisions& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Revisions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Revisions&
    operator= (const Revisions& x);

    virtual 
    ~Revisions ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Revision_sequence Revision_;
  };

  class Revision: public ::xml_schema::type
  {
    public:
    // Text
    //
    typedef ::xml_schema::string Text_type;
    typedef ::xsd::cxx::tree::optional< Text_type > Text_optional;
    typedef ::xsd::cxx::tree::traits< Text_type, char > Text_traits;

    const Text_optional&
    Text () const;

    Text_optional&
    Text ();

    void
    Text (const Text_type& x);

    void
    Text (const Text_optional& x);

    void
    Text (::std::unique_ptr< Text_type > p);

    // Date
    //
    typedef ::xml_schema::date_time Date_type;
    typedef ::xsd::cxx::tree::optional< Date_type > Date_optional;
    typedef ::xsd::cxx::tree::traits< Date_type, char > Date_traits;

    const Date_optional&
    Date () const;

    Date_optional&
    Date ();

    void
    Date (const Date_type& x);

    void
    Date (const Date_optional& x);

    void
    Date (::std::unique_ptr< Date_type > p);

    // UserID
    //
    typedef ::xml_schema::integer UserID_type;
    typedef ::xsd::cxx::tree::optional< UserID_type > UserID_optional;
    typedef ::xsd::cxx::tree::traits< UserID_type, char > UserID_traits;

    const UserID_optional&
    UserID () const;

    UserID_optional&
    UserID ();

    void
    UserID (const UserID_type& x);

    void
    UserID (const UserID_optional& x);

    // Constructors.
    //
    Revision ();

    Revision (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Revision (const Revision& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Revision*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Revision&
    operator= (const Revision& x);

    virtual 
    ~Revision ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Text_optional Text_;
    Date_optional Date_;
    UserID_optional UserID_;
  };

  class FTPresets: public ::xml_schema::type
  {
    public:
    // FTPreset
    //
    typedef ::device::FTPreset FTPreset_type;
    typedef ::xsd::cxx::tree::sequence< FTPreset_type > FTPreset_sequence;
    typedef FTPreset_sequence::iterator FTPreset_iterator;
    typedef FTPreset_sequence::const_iterator FTPreset_const_iterator;
    typedef ::xsd::cxx::tree::traits< FTPreset_type, char > FTPreset_traits;

    const FTPreset_sequence&
    FTPreset () const;

    FTPreset_sequence&
    FTPreset ();

    void
    FTPreset (const FTPreset_sequence& s);

    // Constructors.
    //
    FTPresets ();

    FTPresets (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    FTPresets (const FTPresets& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual FTPresets*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FTPresets&
    operator= (const FTPresets& x);

    virtual 
    ~FTPresets ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    FTPreset_sequence FTPreset_;
  };

  class FTPreset: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    FTPreset ();

    FTPreset (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    FTPreset (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    FTPreset (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    FTPreset (const FTPreset& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual FTPreset*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~FTPreset ();
  };

  class FTMacros: public ::xml_schema::type
  {
    public:
    // FTMacro
    //
    typedef ::device::FTMacro FTMacro_type;
    typedef ::xsd::cxx::tree::sequence< FTMacro_type > FTMacro_sequence;
    typedef FTMacro_sequence::iterator FTMacro_iterator;
    typedef FTMacro_sequence::const_iterator FTMacro_const_iterator;
    typedef ::xsd::cxx::tree::traits< FTMacro_type, char > FTMacro_traits;

    const FTMacro_sequence&
    FTMacro () const;

    FTMacro_sequence&
    FTMacro ();

    void
    FTMacro (const FTMacro_sequence& s);

    // Constructors.
    //
    FTMacros ();

    FTMacros (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    FTMacros (const FTMacros& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual FTMacros*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FTMacros&
    operator= (const FTMacros& x);

    virtual 
    ~FTMacros ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    FTMacro_sequence FTMacro_;
  };

  class FTMacro: public ::xml_schema::type
  {
    public:
    // MacroDMX
    //
    typedef ::device::MacroDMX MacroDMX_type;
    typedef ::xsd::cxx::tree::sequence< MacroDMX_type > MacroDMX_sequence;
    typedef MacroDMX_sequence::iterator MacroDMX_iterator;
    typedef MacroDMX_sequence::const_iterator MacroDMX_const_iterator;
    typedef ::xsd::cxx::tree::traits< MacroDMX_type, char > MacroDMX_traits;

    const MacroDMX_sequence&
    MacroDMX () const;

    MacroDMX_sequence&
    MacroDMX ();

    void
    MacroDMX (const MacroDMX_sequence& s);

    // MacroVisual
    //
    typedef ::device::MacroVisual MacroVisual_type;
    typedef ::xsd::cxx::tree::sequence< MacroVisual_type > MacroVisual_sequence;
    typedef MacroVisual_sequence::iterator MacroVisual_iterator;
    typedef MacroVisual_sequence::const_iterator MacroVisual_const_iterator;
    typedef ::xsd::cxx::tree::traits< MacroVisual_type, char > MacroVisual_traits;

    const MacroVisual_sequence&
    MacroVisual () const;

    MacroVisual_sequence&
    MacroVisual ();

    void
    MacroVisual (const MacroVisual_sequence& s);

    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Constructors.
    //
    FTMacro ();

    FTMacro (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    FTMacro (const FTMacro& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual FTMacro*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FTMacro&
    operator= (const FTMacro& x);

    virtual 
    ~FTMacro ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    MacroDMX_sequence MacroDMX_;
    MacroVisual_sequence MacroVisual_;
    Name_optional Name_;
  };

  class MacroDMX: public ::xml_schema::type
  {
    public:
    // DMXStep
    //
    typedef ::device::DMXStep DMXStep_type;
    typedef ::xsd::cxx::tree::sequence< DMXStep_type > DMXStep_sequence;
    typedef DMXStep_sequence::iterator DMXStep_iterator;
    typedef DMXStep_sequence::const_iterator DMXStep_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXStep_type, char > DMXStep_traits;

    const DMXStep_sequence&
    DMXStep () const;

    DMXStep_sequence&
    DMXStep ();

    void
    DMXStep (const DMXStep_sequence& s);

    // Constructors.
    //
    MacroDMX ();

    MacroDMX (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    MacroDMX (const MacroDMX& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual MacroDMX*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    MacroDMX&
    operator= (const MacroDMX& x);

    virtual 
    ~MacroDMX ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXStep_sequence DMXStep_;
  };

  class DMXStep: public ::xml_schema::type
  {
    public:
    // DMXValue
    //
    typedef ::device::DMXValue DMXValue_type;
    typedef ::xsd::cxx::tree::sequence< DMXValue_type > DMXValue_sequence;
    typedef DMXValue_sequence::iterator DMXValue_iterator;
    typedef DMXValue_sequence::const_iterator DMXValue_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXValue_type, char > DMXValue_traits;

    const DMXValue_sequence&
    DMXValue () const;

    DMXValue_sequence&
    DMXValue ();

    void
    DMXValue (const DMXValue_sequence& s);

    // Duration
    //
    typedef ::xml_schema::integer Duration_type;
    typedef ::xsd::cxx::tree::optional< Duration_type > Duration_optional;
    typedef ::xsd::cxx::tree::traits< Duration_type, char > Duration_traits;

    const Duration_optional&
    Duration () const;

    Duration_optional&
    Duration ();

    void
    Duration (const Duration_type& x);

    void
    Duration (const Duration_optional& x);

    // Constructors.
    //
    DMXStep ();

    DMXStep (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    DMXStep (const DMXStep& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual DMXStep*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXStep&
    operator= (const DMXStep& x);

    virtual 
    ~DMXStep ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXValue_sequence DMXValue_;
    Duration_optional Duration_;
  };

  class DMXValue: public ::xml_schema::type
  {
    public:
    // Value
    //
    typedef ::device::dmxtype Value_type;
    typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
    typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

    const Value_optional&
    Value () const;

    Value_optional&
    Value ();

    void
    Value (const Value_type& x);

    void
    Value (const Value_optional& x);

    void
    Value (::std::unique_ptr< Value_type > p);

    // DMXChannel
    //
    typedef ::xml_schema::string DMXChannel_type;
    typedef ::xsd::cxx::tree::optional< DMXChannel_type > DMXChannel_optional;
    typedef ::xsd::cxx::tree::traits< DMXChannel_type, char > DMXChannel_traits;

    const DMXChannel_optional&
    DMXChannel () const;

    DMXChannel_optional&
    DMXChannel ();

    void
    DMXChannel (const DMXChannel_type& x);

    void
    DMXChannel (const DMXChannel_optional& x);

    void
    DMXChannel (::std::unique_ptr< DMXChannel_type > p);

    // Constructors.
    //
    DMXValue ();

    DMXValue (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    DMXValue (const DMXValue& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual DMXValue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXValue&
    operator= (const DMXValue& x);

    virtual 
    ~DMXValue ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Value_optional Value_;
    DMXChannel_optional DMXChannel_;
  };

  class MacroVisual: public ::xml_schema::type
  {
    public:
    // VisualStep
    //
    typedef ::device::VisualStep VisualStep_type;
    typedef ::xsd::cxx::tree::sequence< VisualStep_type > VisualStep_sequence;
    typedef VisualStep_sequence::iterator VisualStep_iterator;
    typedef VisualStep_sequence::const_iterator VisualStep_const_iterator;
    typedef ::xsd::cxx::tree::traits< VisualStep_type, char > VisualStep_traits;

    const VisualStep_sequence&
    VisualStep () const;

    VisualStep_sequence&
    VisualStep ();

    void
    VisualStep (const VisualStep_sequence& s);

    // Constructors.
    //
    MacroVisual ();

    MacroVisual (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    MacroVisual (const MacroVisual& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual MacroVisual*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    MacroVisual&
    operator= (const MacroVisual& x);

    virtual 
    ~MacroVisual ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    VisualStep_sequence VisualStep_;
  };

  class VisualStep: public ::xml_schema::type
  {
    public:
    // VisualValue
    //
    typedef ::device::VisualValue VisualValue_type;
    typedef ::xsd::cxx::tree::sequence< VisualValue_type > VisualValue_sequence;
    typedef VisualValue_sequence::iterator VisualValue_iterator;
    typedef VisualValue_sequence::const_iterator VisualValue_const_iterator;
    typedef ::xsd::cxx::tree::traits< VisualValue_type, char > VisualValue_traits;

    const VisualValue_sequence&
    VisualValue () const;

    VisualValue_sequence&
    VisualValue ();

    void
    VisualValue (const VisualValue_sequence& s);

    // Duration
    //
    typedef ::xml_schema::integer Duration_type;
    typedef ::xsd::cxx::tree::optional< Duration_type > Duration_optional;
    typedef ::xsd::cxx::tree::traits< Duration_type, char > Duration_traits;

    const Duration_optional&
    Duration () const;

    Duration_optional&
    Duration ();

    void
    Duration (const Duration_type& x);

    void
    Duration (const Duration_optional& x);

    // Fade
    //
    typedef ::xml_schema::string Fade_type;
    typedef ::xsd::cxx::tree::optional< Fade_type > Fade_optional;
    typedef ::xsd::cxx::tree::traits< Fade_type, char > Fade_traits;

    const Fade_optional&
    Fade () const;

    Fade_optional&
    Fade ();

    void
    Fade (const Fade_type& x);

    void
    Fade (const Fade_optional& x);

    void
    Fade (::std::unique_ptr< Fade_type > p);

    // Delay
    //
    typedef ::xml_schema::string Delay_type;
    typedef ::xsd::cxx::tree::optional< Delay_type > Delay_optional;
    typedef ::xsd::cxx::tree::traits< Delay_type, char > Delay_traits;

    const Delay_optional&
    Delay () const;

    Delay_optional&
    Delay ();

    void
    Delay (const Delay_type& x);

    void
    Delay (const Delay_optional& x);

    void
    Delay (::std::unique_ptr< Delay_type > p);

    // Constructors.
    //
    VisualStep ();

    VisualStep (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    VisualStep (const VisualStep& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual VisualStep*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    VisualStep&
    operator= (const VisualStep& x);

    virtual 
    ~VisualStep ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    VisualValue_sequence VisualValue_;
    Duration_optional Duration_;
    Fade_optional Fade_;
    Delay_optional Delay_;
  };

  class VisualValue: public ::xml_schema::type
  {
    public:
    // Value
    //
    typedef ::xml_schema::string Value_type;
    typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
    typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

    const Value_optional&
    Value () const;

    Value_optional&
    Value ();

    void
    Value (const Value_type& x);

    void
    Value (const Value_optional& x);

    void
    Value (::std::unique_ptr< Value_type > p);

    // ChannelFunction
    //
    typedef ::xml_schema::string ChannelFunction_type;
    typedef ::xsd::cxx::tree::optional< ChannelFunction_type > ChannelFunction_optional;
    typedef ::xsd::cxx::tree::traits< ChannelFunction_type, char > ChannelFunction_traits;

    const ChannelFunction_optional&
    ChannelFunction () const;

    ChannelFunction_optional&
    ChannelFunction ();

    void
    ChannelFunction (const ChannelFunction_type& x);

    void
    ChannelFunction (const ChannelFunction_optional& x);

    void
    ChannelFunction (::std::unique_ptr< ChannelFunction_type > p);

    // Constructors.
    //
    VisualValue ();

    VisualValue (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    VisualValue (const VisualValue& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual VisualValue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    VisualValue&
    operator= (const VisualValue& x);

    virtual 
    ~VisualValue ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Value_optional Value_;
    ChannelFunction_optional ChannelFunction_;
  };

  class PhysicalDescriptions: public ::xml_schema::type
  {
    public:
    // Emitters
    //
    typedef ::device::Emitters Emitters_type;
    typedef ::xsd::cxx::tree::sequence< Emitters_type > Emitters_sequence;
    typedef Emitters_sequence::iterator Emitters_iterator;
    typedef Emitters_sequence::const_iterator Emitters_const_iterator;
    typedef ::xsd::cxx::tree::traits< Emitters_type, char > Emitters_traits;

    const Emitters_sequence&
    Emitters () const;

    Emitters_sequence&
    Emitters ();

    void
    Emitters (const Emitters_sequence& s);

    // Filters
    //
    typedef ::device::Filters Filters_type;
    typedef ::xsd::cxx::tree::sequence< Filters_type > Filters_sequence;
    typedef Filters_sequence::iterator Filters_iterator;
    typedef Filters_sequence::const_iterator Filters_const_iterator;
    typedef ::xsd::cxx::tree::traits< Filters_type, char > Filters_traits;

    const Filters_sequence&
    Filters () const;

    Filters_sequence&
    Filters ();

    void
    Filters (const Filters_sequence& s);

    // ColorSpace
    //
    typedef ::device::ColorSpace ColorSpace_type;
    typedef ::xsd::cxx::tree::sequence< ColorSpace_type > ColorSpace_sequence;
    typedef ColorSpace_sequence::iterator ColorSpace_iterator;
    typedef ColorSpace_sequence::const_iterator ColorSpace_const_iterator;
    typedef ::xsd::cxx::tree::traits< ColorSpace_type, char > ColorSpace_traits;

    const ColorSpace_sequence&
    ColorSpace () const;

    ColorSpace_sequence&
    ColorSpace ();

    void
    ColorSpace (const ColorSpace_sequence& s);

    // DMXProfiles
    //
    typedef ::device::DMXProfiles DMXProfiles_type;
    typedef ::xsd::cxx::tree::sequence< DMXProfiles_type > DMXProfiles_sequence;
    typedef DMXProfiles_sequence::iterator DMXProfiles_iterator;
    typedef DMXProfiles_sequence::const_iterator DMXProfiles_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXProfiles_type, char > DMXProfiles_traits;

    const DMXProfiles_sequence&
    DMXProfiles () const;

    DMXProfiles_sequence&
    DMXProfiles ();

    void
    DMXProfiles (const DMXProfiles_sequence& s);

    // CRIs
    //
    typedef ::device::CRIs CRIs_type;
    typedef ::xsd::cxx::tree::sequence< CRIs_type > CRIs_sequence;
    typedef CRIs_sequence::iterator CRIs_iterator;
    typedef CRIs_sequence::const_iterator CRIs_const_iterator;
    typedef ::xsd::cxx::tree::traits< CRIs_type, char > CRIs_traits;

    const CRIs_sequence&
    CRIs () const;

    CRIs_sequence&
    CRIs ();

    void
    CRIs (const CRIs_sequence& s);

    // Constructors.
    //
    PhysicalDescriptions ();

    PhysicalDescriptions (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    PhysicalDescriptions (const PhysicalDescriptions& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual PhysicalDescriptions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    PhysicalDescriptions&
    operator= (const PhysicalDescriptions& x);

    virtual 
    ~PhysicalDescriptions ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Emitters_sequence Emitters_;
    Filters_sequence Filters_;
    ColorSpace_sequence ColorSpace_;
    DMXProfiles_sequence DMXProfiles_;
    CRIs_sequence CRIs_;
  };

  class Emitters: public ::xml_schema::type
  {
    public:
    // Emitter
    //
    typedef ::device::Emitter Emitter_type;
    typedef ::xsd::cxx::tree::sequence< Emitter_type > Emitter_sequence;
    typedef Emitter_sequence::iterator Emitter_iterator;
    typedef Emitter_sequence::const_iterator Emitter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Emitter_type, char > Emitter_traits;

    const Emitter_sequence&
    Emitter () const;

    Emitter_sequence&
    Emitter ();

    void
    Emitter (const Emitter_sequence& s);

    // Constructors.
    //
    Emitters ();

    Emitters (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Emitters (const Emitters& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Emitters*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Emitters&
    operator= (const Emitters& x);

    virtual 
    ~Emitters ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Emitter_sequence Emitter_;
  };

  class Emitter: public ::xml_schema::type
  {
    public:
    // Measurement
    //
    typedef ::device::Measurement Measurement_type;
    typedef ::xsd::cxx::tree::sequence< Measurement_type > Measurement_sequence;
    typedef Measurement_sequence::iterator Measurement_iterator;
    typedef Measurement_sequence::const_iterator Measurement_const_iterator;
    typedef ::xsd::cxx::tree::traits< Measurement_type, char > Measurement_traits;

    const Measurement_sequence&
    Measurement () const;

    Measurement_sequence&
    Measurement ();

    void
    Measurement (const Measurement_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Color
    //
    typedef ::device::colorcietype Color_type;
    typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
    typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

    const Color_optional&
    Color () const;

    Color_optional&
    Color ();

    void
    Color (const Color_type& x);

    void
    Color (const Color_optional& x);

    void
    Color (::std::unique_ptr< Color_type > p);

    // DominantWaveLength
    //
    typedef ::xml_schema::float_ DominantWaveLength_type;
    typedef ::xsd::cxx::tree::optional< DominantWaveLength_type > DominantWaveLength_optional;
    typedef ::xsd::cxx::tree::traits< DominantWaveLength_type, char > DominantWaveLength_traits;

    const DominantWaveLength_optional&
    DominantWaveLength () const;

    DominantWaveLength_optional&
    DominantWaveLength ();

    void
    DominantWaveLength (const DominantWaveLength_type& x);

    void
    DominantWaveLength (const DominantWaveLength_optional& x);

    // DiodePart
    //
    typedef ::xml_schema::string DiodePart_type;
    typedef ::xsd::cxx::tree::optional< DiodePart_type > DiodePart_optional;
    typedef ::xsd::cxx::tree::traits< DiodePart_type, char > DiodePart_traits;

    const DiodePart_optional&
    DiodePart () const;

    DiodePart_optional&
    DiodePart ();

    void
    DiodePart (const DiodePart_type& x);

    void
    DiodePart (const DiodePart_optional& x);

    void
    DiodePart (::std::unique_ptr< DiodePart_type > p);

    // Constructors.
    //
    Emitter ();

    Emitter (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Emitter (const Emitter& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Emitter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Emitter&
    operator= (const Emitter& x);

    virtual 
    ~Emitter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Measurement_sequence Measurement_;
    Name_optional Name_;
    Color_optional Color_;
    DominantWaveLength_optional DominantWaveLength_;
    DiodePart_optional DiodePart_;
  };

  class Filters: public ::xml_schema::type
  {
    public:
    // Filter
    //
    typedef ::device::Filter Filter_type;
    typedef ::xsd::cxx::tree::sequence< Filter_type > Filter_sequence;
    typedef Filter_sequence::iterator Filter_iterator;
    typedef Filter_sequence::const_iterator Filter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Filter_type, char > Filter_traits;

    const Filter_sequence&
    Filter () const;

    Filter_sequence&
    Filter ();

    void
    Filter (const Filter_sequence& s);

    // Constructors.
    //
    Filters ();

    Filters (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Filters (const Filters& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Filters*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Filters&
    operator= (const Filters& x);

    virtual 
    ~Filters ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Filter_sequence Filter_;
  };

  class Filter: public ::xml_schema::type
  {
    public:
    // Measurement
    //
    typedef ::device::Measurement Measurement_type;
    typedef ::xsd::cxx::tree::sequence< Measurement_type > Measurement_sequence;
    typedef Measurement_sequence::iterator Measurement_iterator;
    typedef Measurement_sequence::const_iterator Measurement_const_iterator;
    typedef ::xsd::cxx::tree::traits< Measurement_type, char > Measurement_traits;

    const Measurement_sequence&
    Measurement () const;

    Measurement_sequence&
    Measurement ();

    void
    Measurement (const Measurement_sequence& s);

    // Name
    //
    typedef ::device::nametype Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Color
    //
    typedef ::device::colorcietype Color_type;
    typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
    typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

    const Color_optional&
    Color () const;

    Color_optional&
    Color ();

    void
    Color (const Color_type& x);

    void
    Color (const Color_optional& x);

    void
    Color (::std::unique_ptr< Color_type > p);

    // Constructors.
    //
    Filter ();

    Filter (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Filter (const Filter& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Filter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Filter&
    operator= (const Filter& x);

    virtual 
    ~Filter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Measurement_sequence Measurement_;
    Name_optional Name_;
    Color_optional Color_;
  };

  class Measurement: public ::xml_schema::type
  {
    public:
    // MeasurementPoint
    //
    typedef ::device::MeasurementPoint MeasurementPoint_type;
    typedef ::xsd::cxx::tree::sequence< MeasurementPoint_type > MeasurementPoint_sequence;
    typedef MeasurementPoint_sequence::iterator MeasurementPoint_iterator;
    typedef MeasurementPoint_sequence::const_iterator MeasurementPoint_const_iterator;
    typedef ::xsd::cxx::tree::traits< MeasurementPoint_type, char > MeasurementPoint_traits;

    const MeasurementPoint_sequence&
    MeasurementPoint () const;

    MeasurementPoint_sequence&
    MeasurementPoint ();

    void
    MeasurementPoint (const MeasurementPoint_sequence& s);

    // Physical
    //
    typedef ::xml_schema::float_ Physical_type;
    typedef ::xsd::cxx::tree::optional< Physical_type > Physical_optional;
    typedef ::xsd::cxx::tree::traits< Physical_type, char > Physical_traits;

    const Physical_optional&
    Physical () const;

    Physical_optional&
    Physical ();

    void
    Physical (const Physical_type& x);

    void
    Physical (const Physical_optional& x);

    // LuminousIntensity
    //
    typedef ::xml_schema::float_ LuminousIntensity_type;
    typedef ::xsd::cxx::tree::optional< LuminousIntensity_type > LuminousIntensity_optional;
    typedef ::xsd::cxx::tree::traits< LuminousIntensity_type, char > LuminousIntensity_traits;

    const LuminousIntensity_optional&
    LuminousIntensity () const;

    LuminousIntensity_optional&
    LuminousIntensity ();

    void
    LuminousIntensity (const LuminousIntensity_type& x);

    void
    LuminousIntensity (const LuminousIntensity_optional& x);

    // Transmission
    //
    typedef ::xml_schema::float_ Transmission_type;
    typedef ::xsd::cxx::tree::optional< Transmission_type > Transmission_optional;
    typedef ::xsd::cxx::tree::traits< Transmission_type, char > Transmission_traits;

    const Transmission_optional&
    Transmission () const;

    Transmission_optional&
    Transmission ();

    void
    Transmission (const Transmission_type& x);

    void
    Transmission (const Transmission_optional& x);

    // InterpolationTo
    //
    typedef ::device::InterpolationToEnum InterpolationTo_type;
    typedef ::xsd::cxx::tree::optional< InterpolationTo_type > InterpolationTo_optional;
    typedef ::xsd::cxx::tree::traits< InterpolationTo_type, char > InterpolationTo_traits;

    const InterpolationTo_optional&
    InterpolationTo () const;

    InterpolationTo_optional&
    InterpolationTo ();

    void
    InterpolationTo (const InterpolationTo_type& x);

    void
    InterpolationTo (const InterpolationTo_optional& x);

    void
    InterpolationTo (::std::unique_ptr< InterpolationTo_type > p);

    // Constructors.
    //
    Measurement ();

    Measurement (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Measurement (const Measurement& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Measurement*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Measurement&
    operator= (const Measurement& x);

    virtual 
    ~Measurement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    MeasurementPoint_sequence MeasurementPoint_;
    Physical_optional Physical_;
    LuminousIntensity_optional LuminousIntensity_;
    Transmission_optional Transmission_;
    InterpolationTo_optional InterpolationTo_;
  };

  class MeasurementPoint: public ::xml_schema::type
  {
    public:
    // WaveLength
    //
    typedef ::xml_schema::float_ WaveLength_type;
    typedef ::xsd::cxx::tree::optional< WaveLength_type > WaveLength_optional;
    typedef ::xsd::cxx::tree::traits< WaveLength_type, char > WaveLength_traits;

    const WaveLength_optional&
    WaveLength () const;

    WaveLength_optional&
    WaveLength ();

    void
    WaveLength (const WaveLength_type& x);

    void
    WaveLength (const WaveLength_optional& x);

    // Energy
    //
    typedef ::xml_schema::float_ Energy_type;
    typedef ::xsd::cxx::tree::optional< Energy_type > Energy_optional;
    typedef ::xsd::cxx::tree::traits< Energy_type, char > Energy_traits;

    const Energy_optional&
    Energy () const;

    Energy_optional&
    Energy ();

    void
    Energy (const Energy_type& x);

    void
    Energy (const Energy_optional& x);

    // Constructors.
    //
    MeasurementPoint ();

    MeasurementPoint (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    MeasurementPoint (const MeasurementPoint& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual MeasurementPoint*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    MeasurementPoint&
    operator= (const MeasurementPoint& x);

    virtual 
    ~MeasurementPoint ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    WaveLength_optional WaveLength_;
    Energy_optional Energy_;
  };

  class ColorSpace: public ::xml_schema::type
  {
    public:
    // ColorSpace
    //
    typedef ::device::ColorSpaceEnum ColorSpace1_type;
    typedef ::xsd::cxx::tree::optional< ColorSpace1_type > ColorSpace1_optional;
    typedef ::xsd::cxx::tree::traits< ColorSpace1_type, char > ColorSpace1_traits;

    const ColorSpace1_optional&
    ColorSpace1 () const;

    ColorSpace1_optional&
    ColorSpace1 ();

    void
    ColorSpace1 (const ColorSpace1_type& x);

    void
    ColorSpace1 (const ColorSpace1_optional& x);

    void
    ColorSpace1 (::std::unique_ptr< ColorSpace1_type > p);

    // Red
    //
    typedef ::device::colorcietype Red_type;
    typedef ::xsd::cxx::tree::optional< Red_type > Red_optional;
    typedef ::xsd::cxx::tree::traits< Red_type, char > Red_traits;

    const Red_optional&
    Red () const;

    Red_optional&
    Red ();

    void
    Red (const Red_type& x);

    void
    Red (const Red_optional& x);

    void
    Red (::std::unique_ptr< Red_type > p);

    // Green
    //
    typedef ::device::colorcietype Green_type;
    typedef ::xsd::cxx::tree::optional< Green_type > Green_optional;
    typedef ::xsd::cxx::tree::traits< Green_type, char > Green_traits;

    const Green_optional&
    Green () const;

    Green_optional&
    Green ();

    void
    Green (const Green_type& x);

    void
    Green (const Green_optional& x);

    void
    Green (::std::unique_ptr< Green_type > p);

    // Blue
    //
    typedef ::device::colorcietype Blue_type;
    typedef ::xsd::cxx::tree::optional< Blue_type > Blue_optional;
    typedef ::xsd::cxx::tree::traits< Blue_type, char > Blue_traits;

    const Blue_optional&
    Blue () const;

    Blue_optional&
    Blue ();

    void
    Blue (const Blue_type& x);

    void
    Blue (const Blue_optional& x);

    void
    Blue (::std::unique_ptr< Blue_type > p);

    // WhitePoint
    //
    typedef ::device::colorcietype WhitePoint_type;
    typedef ::xsd::cxx::tree::optional< WhitePoint_type > WhitePoint_optional;
    typedef ::xsd::cxx::tree::traits< WhitePoint_type, char > WhitePoint_traits;

    const WhitePoint_optional&
    WhitePoint () const;

    WhitePoint_optional&
    WhitePoint ();

    void
    WhitePoint (const WhitePoint_type& x);

    void
    WhitePoint (const WhitePoint_optional& x);

    void
    WhitePoint (::std::unique_ptr< WhitePoint_type > p);

    // Constructors.
    //
    ColorSpace ();

    ColorSpace (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    ColorSpace (const ColorSpace& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual ColorSpace*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ColorSpace&
    operator= (const ColorSpace& x);

    virtual 
    ~ColorSpace ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ColorSpace1_optional ColorSpace1_;
    Red_optional Red_;
    Green_optional Green_;
    Blue_optional Blue_;
    WhitePoint_optional WhitePoint_;
  };

  class DMXProfiles: public ::xml_schema::type
  {
    public:
    // DMXProfile
    //
    typedef ::device::DMXProfile DMXProfile_type;
    typedef ::xsd::cxx::tree::sequence< DMXProfile_type > DMXProfile_sequence;
    typedef DMXProfile_sequence::iterator DMXProfile_iterator;
    typedef DMXProfile_sequence::const_iterator DMXProfile_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXProfile_type, char > DMXProfile_traits;

    const DMXProfile_sequence&
    DMXProfile () const;

    DMXProfile_sequence&
    DMXProfile ();

    void
    DMXProfile (const DMXProfile_sequence& s);

    // Constructors.
    //
    DMXProfiles ();

    DMXProfiles (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    DMXProfiles (const DMXProfiles& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual DMXProfiles*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXProfiles&
    operator= (const DMXProfiles& x);

    virtual 
    ~DMXProfiles ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXProfile_sequence DMXProfile_;
  };

  class DMXProfile: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    DMXProfile ();

    DMXProfile (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    DMXProfile (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    DMXProfile (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    DMXProfile (const DMXProfile& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual DMXProfile*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DMXProfile ();
  };

  class CRIs: public ::xml_schema::type
  {
    public:
    // CRI
    //
    typedef ::device::CRI CRI_type;
    typedef ::xsd::cxx::tree::sequence< CRI_type > CRI_sequence;
    typedef CRI_sequence::iterator CRI_iterator;
    typedef CRI_sequence::const_iterator CRI_const_iterator;
    typedef ::xsd::cxx::tree::traits< CRI_type, char > CRI_traits;

    const CRI_sequence&
    CRI () const;

    CRI_sequence&
    CRI ();

    void
    CRI (const CRI_sequence& s);

    // Constructors.
    //
    CRIs ();

    CRIs (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    CRIs (const CRIs& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual CRIs*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CRIs&
    operator= (const CRIs& x);

    virtual 
    ~CRIs ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CRI_sequence CRI_;
  };

  class CRI: public ::xml_schema::type
  {
    public:
    // CES
    //
    typedef ::device::CESEnum CES_type;
    typedef ::xsd::cxx::tree::optional< CES_type > CES_optional;
    typedef ::xsd::cxx::tree::traits< CES_type, char > CES_traits;

    const CES_optional&
    CES () const;

    CES_optional&
    CES ();

    void
    CES (const CES_type& x);

    void
    CES (const CES_optional& x);

    void
    CES (::std::unique_ptr< CES_type > p);

    // ColorRenderingIndex
    //
    typedef ::xml_schema::integer ColorRenderingIndex_type;
    typedef ::xsd::cxx::tree::optional< ColorRenderingIndex_type > ColorRenderingIndex_optional;
    typedef ::xsd::cxx::tree::traits< ColorRenderingIndex_type, char > ColorRenderingIndex_traits;

    const ColorRenderingIndex_optional&
    ColorRenderingIndex () const;

    ColorRenderingIndex_optional&
    ColorRenderingIndex ();

    void
    ColorRenderingIndex (const ColorRenderingIndex_type& x);

    void
    ColorRenderingIndex (const ColorRenderingIndex_optional& x);

    // Constructors.
    //
    CRI ();

    CRI (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    CRI (const CRI& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual CRI*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CRI&
    operator= (const CRI& x);

    virtual 
    ~CRI ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CES_optional CES_;
    ColorRenderingIndex_optional ColorRenderingIndex_;
  };

  class Protocols: public ::xml_schema::type
  {
    public:
    // RDM
    //
    typedef ::device::RDM RDM_type;
    typedef ::xsd::cxx::tree::sequence< RDM_type > RDM_sequence;
    typedef RDM_sequence::iterator RDM_iterator;
    typedef RDM_sequence::const_iterator RDM_const_iterator;
    typedef ::xsd::cxx::tree::traits< RDM_type, char > RDM_traits;

    const RDM_sequence&
    RDM () const;

    RDM_sequence&
    RDM ();

    void
    RDM (const RDM_sequence& s);

    // Art-Net
    //
    typedef ::device::Art_Net Art_Net_type;
    typedef ::xsd::cxx::tree::sequence< Art_Net_type > Art_Net_sequence;
    typedef Art_Net_sequence::iterator Art_Net_iterator;
    typedef Art_Net_sequence::const_iterator Art_Net_const_iterator;
    typedef ::xsd::cxx::tree::traits< Art_Net_type, char > Art_Net_traits;

    const Art_Net_sequence&
    Art_Net () const;

    Art_Net_sequence&
    Art_Net ();

    void
    Art_Net (const Art_Net_sequence& s);

    // sACN
    //
    typedef ::device::sACN sACN_type;
    typedef ::xsd::cxx::tree::sequence< sACN_type > sACN_sequence;
    typedef sACN_sequence::iterator sACN_iterator;
    typedef sACN_sequence::const_iterator sACN_const_iterator;
    typedef ::xsd::cxx::tree::traits< sACN_type, char > sACN_traits;

    const sACN_sequence&
    sACN () const;

    sACN_sequence&
    sACN ();

    void
    sACN (const sACN_sequence& s);

    // KiNET
    //
    typedef ::device::KiNET KiNET_type;
    typedef ::xsd::cxx::tree::sequence< KiNET_type > KiNET_sequence;
    typedef KiNET_sequence::iterator KiNET_iterator;
    typedef KiNET_sequence::const_iterator KiNET_const_iterator;
    typedef ::xsd::cxx::tree::traits< KiNET_type, char > KiNET_traits;

    const KiNET_sequence&
    KiNET () const;

    KiNET_sequence&
    KiNET ();

    void
    KiNET (const KiNET_sequence& s);

    // PosiStageNet
    //
    typedef ::device::PosiStageNet PosiStageNet_type;
    typedef ::xsd::cxx::tree::sequence< PosiStageNet_type > PosiStageNet_sequence;
    typedef PosiStageNet_sequence::iterator PosiStageNet_iterator;
    typedef PosiStageNet_sequence::const_iterator PosiStageNet_const_iterator;
    typedef ::xsd::cxx::tree::traits< PosiStageNet_type, char > PosiStageNet_traits;

    const PosiStageNet_sequence&
    PosiStageNet () const;

    PosiStageNet_sequence&
    PosiStageNet ();

    void
    PosiStageNet (const PosiStageNet_sequence& s);

    // OpenSoundControl
    //
    typedef ::device::OpenSoundControl OpenSoundControl_type;
    typedef ::xsd::cxx::tree::sequence< OpenSoundControl_type > OpenSoundControl_sequence;
    typedef OpenSoundControl_sequence::iterator OpenSoundControl_iterator;
    typedef OpenSoundControl_sequence::const_iterator OpenSoundControl_const_iterator;
    typedef ::xsd::cxx::tree::traits< OpenSoundControl_type, char > OpenSoundControl_traits;

    const OpenSoundControl_sequence&
    OpenSoundControl () const;

    OpenSoundControl_sequence&
    OpenSoundControl ();

    void
    OpenSoundControl (const OpenSoundControl_sequence& s);

    // CITP
    //
    typedef ::device::CITP CITP_type;
    typedef ::xsd::cxx::tree::sequence< CITP_type > CITP_sequence;
    typedef CITP_sequence::iterator CITP_iterator;
    typedef CITP_sequence::const_iterator CITP_const_iterator;
    typedef ::xsd::cxx::tree::traits< CITP_type, char > CITP_traits;

    const CITP_sequence&
    CITP () const;

    CITP_sequence&
    CITP ();

    void
    CITP (const CITP_sequence& s);

    // Constructors.
    //
    Protocols ();

    Protocols (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Protocols (const Protocols& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Protocols*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Protocols&
    operator= (const Protocols& x);

    virtual 
    ~Protocols ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    RDM_sequence RDM_;
    Art_Net_sequence Art_Net_;
    sACN_sequence sACN_;
    KiNET_sequence KiNET_;
    PosiStageNet_sequence PosiStageNet_;
    OpenSoundControl_sequence OpenSoundControl_;
    CITP_sequence CITP_;
  };

  class Art_Net: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    Art_Net ();

    Art_Net (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Art_Net (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Art_Net (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Art_Net (const Art_Net& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Art_Net*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Art_Net ();
  };

  class sACN: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    sACN ();

    sACN (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    sACN (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    sACN (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    sACN (const sACN& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual sACN*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~sACN ();
  };

  class KiNET: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    KiNET ();

    KiNET (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    KiNET (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    KiNET (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    KiNET (const KiNET& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual KiNET*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~KiNET ();
  };

  class PosiStageNet: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    PosiStageNet ();

    PosiStageNet (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PosiStageNet (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PosiStageNet (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PosiStageNet (const PosiStageNet& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual PosiStageNet*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PosiStageNet ();
  };

  class OpenSoundControl: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    OpenSoundControl ();

    OpenSoundControl (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    OpenSoundControl (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    OpenSoundControl (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    OpenSoundControl (const OpenSoundControl& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual OpenSoundControl*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~OpenSoundControl ();
  };

  class CITP: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    CITP ();

    CITP (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    CITP (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    CITP (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    CITP (const CITP& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual CITP*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CITP ();
  };

  class RDM: public ::xml_schema::type
  {
    public:
    // SoftwareVersionID
    //
    typedef ::device::SoftwareVersionID SoftwareVersionID_type;
    typedef ::xsd::cxx::tree::sequence< SoftwareVersionID_type > SoftwareVersionID_sequence;
    typedef SoftwareVersionID_sequence::iterator SoftwareVersionID_iterator;
    typedef SoftwareVersionID_sequence::const_iterator SoftwareVersionID_const_iterator;
    typedef ::xsd::cxx::tree::traits< SoftwareVersionID_type, char > SoftwareVersionID_traits;

    const SoftwareVersionID_sequence&
    SoftwareVersionID () const;

    SoftwareVersionID_sequence&
    SoftwareVersionID ();

    void
    SoftwareVersionID (const SoftwareVersionID_sequence& s);

    // ManufacturerID
    //
    typedef ::xml_schema::string ManufacturerID_type;
    typedef ::xsd::cxx::tree::optional< ManufacturerID_type > ManufacturerID_optional;
    typedef ::xsd::cxx::tree::traits< ManufacturerID_type, char > ManufacturerID_traits;

    const ManufacturerID_optional&
    ManufacturerID () const;

    ManufacturerID_optional&
    ManufacturerID ();

    void
    ManufacturerID (const ManufacturerID_type& x);

    void
    ManufacturerID (const ManufacturerID_optional& x);

    void
    ManufacturerID (::std::unique_ptr< ManufacturerID_type > p);

    // DeviceModelID
    //
    typedef ::xml_schema::string DeviceModelID_type;
    typedef ::xsd::cxx::tree::optional< DeviceModelID_type > DeviceModelID_optional;
    typedef ::xsd::cxx::tree::traits< DeviceModelID_type, char > DeviceModelID_traits;

    const DeviceModelID_optional&
    DeviceModelID () const;

    DeviceModelID_optional&
    DeviceModelID ();

    void
    DeviceModelID (const DeviceModelID_type& x);

    void
    DeviceModelID (const DeviceModelID_optional& x);

    void
    DeviceModelID (::std::unique_ptr< DeviceModelID_type > p);

    // Constructors.
    //
    RDM ();

    RDM (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    RDM (const RDM& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual RDM*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RDM&
    operator= (const RDM& x);

    virtual 
    ~RDM ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    SoftwareVersionID_sequence SoftwareVersionID_;
    ManufacturerID_optional ManufacturerID_;
    DeviceModelID_optional DeviceModelID_;
  };

  class SoftwareVersionID: public ::xml_schema::type
  {
    public:
    // DMXPersonality
    //
    typedef ::device::DMXPersonality DMXPersonality_type;
    typedef ::xsd::cxx::tree::sequence< DMXPersonality_type > DMXPersonality_sequence;
    typedef DMXPersonality_sequence::iterator DMXPersonality_iterator;
    typedef DMXPersonality_sequence::const_iterator DMXPersonality_const_iterator;
    typedef ::xsd::cxx::tree::traits< DMXPersonality_type, char > DMXPersonality_traits;

    const DMXPersonality_sequence&
    DMXPersonality () const;

    DMXPersonality_sequence&
    DMXPersonality ();

    void
    DMXPersonality (const DMXPersonality_sequence& s);

    // Value
    //
    typedef ::xml_schema::string Value_type;
    typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
    typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

    const Value_optional&
    Value () const;

    Value_optional&
    Value ();

    void
    Value (const Value_type& x);

    void
    Value (const Value_optional& x);

    void
    Value (::std::unique_ptr< Value_type > p);

    // Constructors.
    //
    SoftwareVersionID ();

    SoftwareVersionID (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    SoftwareVersionID (const SoftwareVersionID& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual SoftwareVersionID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SoftwareVersionID&
    operator= (const SoftwareVersionID& x);

    virtual 
    ~SoftwareVersionID ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DMXPersonality_sequence DMXPersonality_;
    Value_optional Value_;
  };

  class DMXPersonality: public ::xml_schema::type
  {
    public:
    // Value
    //
    typedef ::xml_schema::string Value_type;
    typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
    typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

    const Value_optional&
    Value () const;

    Value_optional&
    Value ();

    void
    Value (const Value_type& x);

    void
    Value (const Value_optional& x);

    void
    Value (::std::unique_ptr< Value_type > p);

    // DMXMode
    //
    typedef ::device::nametype DMXMode_type;
    typedef ::xsd::cxx::tree::optional< DMXMode_type > DMXMode_optional;
    typedef ::xsd::cxx::tree::traits< DMXMode_type, char > DMXMode_traits;

    const DMXMode_optional&
    DMXMode () const;

    DMXMode_optional&
    DMXMode ();

    void
    DMXMode (const DMXMode_type& x);

    void
    DMXMode (const DMXMode_optional& x);

    void
    DMXMode (::std::unique_ptr< DMXMode_type > p);

    // Constructors.
    //
    DMXPersonality ();

    DMXPersonality (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    DMXPersonality (const DMXPersonality& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual DMXPersonality*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DMXPersonality&
    operator= (const DMXPersonality& x);

    virtual 
    ~DMXPersonality ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Value_optional Value_;
    DMXMode_optional DMXMode_;
  };

  class AttributeDefinitions: public ::xml_schema::type
  {
    public:
    // ActivationGroups
    //
    typedef ::device::ActivationGroups ActivationGroups_type;
    typedef ::xsd::cxx::tree::optional< ActivationGroups_type > ActivationGroups_optional;
    typedef ::xsd::cxx::tree::traits< ActivationGroups_type, char > ActivationGroups_traits;

    const ActivationGroups_optional&
    ActivationGroups () const;

    ActivationGroups_optional&
    ActivationGroups ();

    void
    ActivationGroups (const ActivationGroups_type& x);

    void
    ActivationGroups (const ActivationGroups_optional& x);

    void
    ActivationGroups (::std::unique_ptr< ActivationGroups_type > p);

    // FeatureGroups
    //
    typedef ::device::FeatureGroups FeatureGroups_type;
    typedef ::xsd::cxx::tree::traits< FeatureGroups_type, char > FeatureGroups_traits;

    const FeatureGroups_type&
    FeatureGroups () const;

    FeatureGroups_type&
    FeatureGroups ();

    void
    FeatureGroups (const FeatureGroups_type& x);

    void
    FeatureGroups (::std::unique_ptr< FeatureGroups_type > p);

    // Attributes
    //
    typedef ::device::Attributes Attributes_type;
    typedef ::xsd::cxx::tree::traits< Attributes_type, char > Attributes_traits;

    const Attributes_type&
    Attributes () const;

    Attributes_type&
    Attributes ();

    void
    Attributes (const Attributes_type& x);

    void
    Attributes (::std::unique_ptr< Attributes_type > p);

    // Constructors.
    //
    AttributeDefinitions (const FeatureGroups_type&,
                          const Attributes_type&);

    AttributeDefinitions (::std::unique_ptr< FeatureGroups_type >,
                          ::std::unique_ptr< Attributes_type >);

    AttributeDefinitions (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    AttributeDefinitions (const AttributeDefinitions& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual AttributeDefinitions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    AttributeDefinitions&
    operator= (const AttributeDefinitions& x);

    virtual 
    ~AttributeDefinitions ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ActivationGroups_optional ActivationGroups_;
    ::xsd::cxx::tree::one< FeatureGroups_type > FeatureGroups_;
    ::xsd::cxx::tree::one< Attributes_type > Attributes_;
  };

  class ActivationGroups: public ::xml_schema::type
  {
    public:
    // ActivationGroup
    //
    typedef ::device::ActivationGroup ActivationGroup_type;
    typedef ::xsd::cxx::tree::sequence< ActivationGroup_type > ActivationGroup_sequence;
    typedef ActivationGroup_sequence::iterator ActivationGroup_iterator;
    typedef ActivationGroup_sequence::const_iterator ActivationGroup_const_iterator;
    typedef ::xsd::cxx::tree::traits< ActivationGroup_type, char > ActivationGroup_traits;

    const ActivationGroup_sequence&
    ActivationGroup () const;

    ActivationGroup_sequence&
    ActivationGroup ();

    void
    ActivationGroup (const ActivationGroup_sequence& s);

    // Constructors.
    //
    ActivationGroups ();

    ActivationGroups (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    ActivationGroups (const ActivationGroups& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual ActivationGroups*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ActivationGroups&
    operator= (const ActivationGroups& x);

    virtual 
    ~ActivationGroups ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ActivationGroup_sequence ActivationGroup_;
  };

  class FeatureGroups: public ::xml_schema::type
  {
    public:
    // FeatureGroup
    //
    typedef ::device::FeatureGroup FeatureGroup_type;
    typedef ::xsd::cxx::tree::sequence< FeatureGroup_type > FeatureGroup_sequence;
    typedef FeatureGroup_sequence::iterator FeatureGroup_iterator;
    typedef FeatureGroup_sequence::const_iterator FeatureGroup_const_iterator;
    typedef ::xsd::cxx::tree::traits< FeatureGroup_type, char > FeatureGroup_traits;

    const FeatureGroup_sequence&
    FeatureGroup () const;

    FeatureGroup_sequence&
    FeatureGroup ();

    void
    FeatureGroup (const FeatureGroup_sequence& s);

    // Constructors.
    //
    FeatureGroups ();

    FeatureGroups (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    FeatureGroups (const FeatureGroups& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual FeatureGroups*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FeatureGroups&
    operator= (const FeatureGroups& x);

    virtual 
    ~FeatureGroups ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    FeatureGroup_sequence FeatureGroup_;
  };

  class ActivationGroup: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Constructors.
    //
    ActivationGroup ();

    ActivationGroup (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    ActivationGroup (const ActivationGroup& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual ActivationGroup*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ActivationGroup&
    operator= (const ActivationGroup& x);

    virtual 
    ~ActivationGroup ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Name_optional Name_;
  };

  class FeatureGroup: public ::xml_schema::type
  {
    public:
    // Feature
    //
    typedef ::device::Feature Feature_type;
    typedef ::xsd::cxx::tree::sequence< Feature_type > Feature_sequence;
    typedef Feature_sequence::iterator Feature_iterator;
    typedef Feature_sequence::const_iterator Feature_const_iterator;
    typedef ::xsd::cxx::tree::traits< Feature_type, char > Feature_traits;

    const Feature_sequence&
    Feature () const;

    Feature_sequence&
    Feature ();

    void
    Feature (const Feature_sequence& s);

    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Pretty
    //
    typedef ::xml_schema::string Pretty_type;
    typedef ::xsd::cxx::tree::traits< Pretty_type, char > Pretty_traits;

    const Pretty_type&
    Pretty () const;

    Pretty_type&
    Pretty ();

    void
    Pretty (const Pretty_type& x);

    void
    Pretty (::std::unique_ptr< Pretty_type > p);

    // Constructors.
    //
    FeatureGroup (const Name_type&,
                  const Pretty_type&);

    FeatureGroup (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    FeatureGroup (const FeatureGroup& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual FeatureGroup*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FeatureGroup&
    operator= (const FeatureGroup& x);

    virtual 
    ~FeatureGroup ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Feature_sequence Feature_;
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Pretty_type > Pretty_;
  };

  class Feature: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_optional&
    Name () const;

    Name_optional&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (const Name_optional& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Constructors.
    //
    Feature ();

    Feature (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Feature (const Feature& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Feature*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Feature&
    operator= (const Feature& x);

    virtual 
    ~Feature ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Name_optional Name_;
  };

  class Attributes: public ::xml_schema::type
  {
    public:
    // Attribute
    //
    typedef ::device::Attribute Attribute_type;
    typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;
    typedef Attribute_sequence::iterator Attribute_iterator;
    typedef Attribute_sequence::const_iterator Attribute_const_iterator;
    typedef ::xsd::cxx::tree::traits< Attribute_type, char > Attribute_traits;

    const Attribute_sequence&
    Attribute () const;

    Attribute_sequence&
    Attribute ();

    void
    Attribute (const Attribute_sequence& s);

    // Constructors.
    //
    Attributes ();

    Attributes (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Attributes (const Attributes& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Attributes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Attributes&
    operator= (const Attributes& x);

    virtual 
    ~Attributes ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Attribute_sequence Attribute_;
  };

  class Attribute: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::device::AttributeEnum Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::unique_ptr< Name_type > p);

    // Pretty
    //
    typedef ::xml_schema::string Pretty_type;
    typedef ::xsd::cxx::tree::traits< Pretty_type, char > Pretty_traits;

    const Pretty_type&
    Pretty () const;

    Pretty_type&
    Pretty ();

    void
    Pretty (const Pretty_type& x);

    void
    Pretty (::std::unique_ptr< Pretty_type > p);

    // ActivationGroup
    //
    typedef ::xml_schema::string ActivationGroup_type;
    typedef ::xsd::cxx::tree::optional< ActivationGroup_type > ActivationGroup_optional;
    typedef ::xsd::cxx::tree::traits< ActivationGroup_type, char > ActivationGroup_traits;

    const ActivationGroup_optional&
    ActivationGroup () const;

    ActivationGroup_optional&
    ActivationGroup ();

    void
    ActivationGroup (const ActivationGroup_type& x);

    void
    ActivationGroup (const ActivationGroup_optional& x);

    void
    ActivationGroup (::std::unique_ptr< ActivationGroup_type > p);

    // PhysicalUnit
    //
    typedef ::device::PhysicalUnitEnum PhysicalUnit_type;
    typedef ::xsd::cxx::tree::optional< PhysicalUnit_type > PhysicalUnit_optional;
    typedef ::xsd::cxx::tree::traits< PhysicalUnit_type, char > PhysicalUnit_traits;

    const PhysicalUnit_optional&
    PhysicalUnit () const;

    PhysicalUnit_optional&
    PhysicalUnit ();

    void
    PhysicalUnit (const PhysicalUnit_type& x);

    void
    PhysicalUnit (const PhysicalUnit_optional& x);

    void
    PhysicalUnit (::std::unique_ptr< PhysicalUnit_type > p);

    // Color
    //
    typedef ::device::colorcietype Color_type;
    typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
    typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

    const Color_optional&
    Color () const;

    Color_optional&
    Color ();

    void
    Color (const Color_type& x);

    void
    Color (const Color_optional& x);

    void
    Color (::std::unique_ptr< Color_type > p);

    // Feature
    //
    typedef ::xml_schema::string Feature_type;
    typedef ::xsd::cxx::tree::optional< Feature_type > Feature_optional;
    typedef ::xsd::cxx::tree::traits< Feature_type, char > Feature_traits;

    const Feature_optional&
    Feature () const;

    Feature_optional&
    Feature ();

    void
    Feature (const Feature_type& x);

    void
    Feature (const Feature_optional& x);

    void
    Feature (::std::unique_ptr< Feature_type > p);

    // MainAttribute
    //
    typedef ::xml_schema::string MainAttribute_type;
    typedef ::xsd::cxx::tree::optional< MainAttribute_type > MainAttribute_optional;
    typedef ::xsd::cxx::tree::traits< MainAttribute_type, char > MainAttribute_traits;

    const MainAttribute_optional&
    MainAttribute () const;

    MainAttribute_optional&
    MainAttribute ();

    void
    MainAttribute (const MainAttribute_type& x);

    void
    MainAttribute (const MainAttribute_optional& x);

    void
    MainAttribute (::std::unique_ptr< MainAttribute_type > p);

    // Constructors.
    //
    Attribute (const Name_type&,
               const Pretty_type&);

    Attribute (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Attribute (const Attribute& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Attribute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Attribute&
    operator= (const Attribute& x);

    virtual 
    ~Attribute ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< Pretty_type > Pretty_;
    ActivationGroup_optional ActivationGroup_;
    PhysicalUnit_optional PhysicalUnit_;
    Color_optional Color_;
    Feature_optional Feature_;
    MainAttribute_optional MainAttribute_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace device
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GDTF >
  GDTF_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FixtureType >
  FixtureType_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheels >
  Wheels_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Wheel >
  Wheel_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Slot >
  Slot_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Slot >
  Slot_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Slot >
  Slot_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Facet >
  Facet_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Facet >
  Facet_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Facet >
  Facet_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Models >
  Models_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Models >
  Models_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Models >
  Models_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Models >
  Models_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Models >
  Models_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Model >
  Model_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Model >
  Model_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Model >
  Model_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Model >
  Model_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Model >
  Model_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometries >
  Geometries_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Geometry >
  Geometry_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Axis >
  Axis_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Axis >
  Axis_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Axis >
  Axis_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterBeam >
  FilterBeam_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterColor >
  FilterColor_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterGobo >
  FilterGobo_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FilterShaper >
  FilterShaper_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Beam >
  Beam_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Beam >
  Beam_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Beam >
  Beam_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::GeometryReference >
  GeometryReference_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Break >
  Break_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Break >
  Break_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Break >
  Break_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Break >
  Break_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Break >
  Break_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXModes >
  DMXModes_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXMode >
  DMXMode_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannels >
  DMXChannels_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXChannel >
  DMXChannel_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::LogicalChannel >
  LogicalChannel_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelFunction >
  ChannelFunction_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ChannelSet >
  ChannelSet_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Relations >
  Relations_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Relations >
  Relations_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relations >
  Relations_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Relation >
  Relation_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Relation >
  Relation_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Relation >
  Relation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revisions >
  Revisions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Revision >
  Revision_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Revision >
  Revision_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Revision >
  Revision_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPresets >
  FTPresets_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTPreset >
  FTPreset_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacros >
  FTMacros_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FTMacro >
  FTMacro_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroDMX >
  MacroDMX_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXStep >
  DMXStep_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXValue >
  DMXValue_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MacroVisual >
  MacroVisual_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualStep >
  VisualStep_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::VisualValue >
  VisualValue_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PhysicalDescriptions >
  PhysicalDescriptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitters >
  Emitters_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Emitter >
  Emitter_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Filters >
  Filters_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Filters >
  Filters_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filters >
  Filters_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Filter >
  Filter_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Filter >
  Filter_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Filter >
  Filter_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Measurement >
  Measurement_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::MeasurementPoint >
  MeasurementPoint_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ColorSpace >
  ColorSpace_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfiles >
  DMXProfiles_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXProfile >
  DMXProfile_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRIs >
  CRIs_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::CRI >
  CRI_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::CRI >
  CRI_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CRI >
  CRI_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Protocols >
  Protocols_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Art_Net >
  Art_Net_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::sACN >
  sACN_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::sACN >
  sACN_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::sACN >
  sACN_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::KiNET >
  KiNET_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::PosiStageNet >
  PosiStageNet_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::OpenSoundControl >
  OpenSoundControl_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::CITP >
  CITP_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::CITP >
  CITP_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::CITP >
  CITP_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::RDM >
  RDM_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::RDM >
  RDM_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::RDM >
  RDM_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::SoftwareVersionID >
  SoftwareVersionID_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::DMXPersonality >
  DMXPersonality_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::AttributeDefinitions >
  AttributeDefinitions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroups >
  ActivationGroups_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroups >
  FeatureGroups_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::ActivationGroup >
  ActivationGroup_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::FeatureGroup >
  FeatureGroup_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Feature >
  Feature_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Feature >
  Feature_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Feature >
  Feature_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attributes >
  Attributes_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::device::Attribute >
  Attribute_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GDTF_LIBRARIES_GDTF_H
