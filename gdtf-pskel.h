// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDTF_LIBRARIES_GDTF_PSKEL_H
#define GDTF_LIBRARIES_GDTF_PSKEL_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace device
{
  class matrixtype_pskel;
  class colorcietype_pskel;
  class offsettype_pskel;
  class dmxtype_pskel;
  class dmxvalue_pskel;
  class nametype_pskel;
  class dataversion_pskel;
  class guidtype_pskel;
  class PhysicalUnitEnum_pskel;
  class MasterEnum_pskel;
  class PrimitiveTypeEnum_pskel;
  class LampTypeEnum_pskel;
  class BeamTypeEnum_pskel;
  class ColorSpaceEnum_pskel;
  class InterpolationToEnum_pskel;
  class SnapEnum_pskel;
  class YesNoEnum_pskel;
  class RelationTypesEnum_pskel;
  class RDMParameterTypeEnum_pskel;
  class ThresholdOperatorEnum_pskel;
  class RDMParameterDataTypeEnum_pskel;
  class RDMParameterCommandEnum_pskel;
  class RDMSensorTypeEnum_pskel;
  class RDMParameterSensorUnitEnum_pskel;
  class RDMSlotInfoTypeEnum_pskel;
  class RDMSlotLabelIDEnum_pskel;
  class RDMParameterSensorUnitPrefixEnum_pskel;
  class CESEnum_pskel;
  class AttributeEnum_pskel;
  class GDTF_pskel;
  class FixtureType_pskel;
  class Wheels_pskel;
  class Wheel_pskel;
  class Slot_pskel;
  class Facet_pskel;
  class Models_pskel;
  class Model_pskel;
  class Geometries_pskel;
  class Geometry_pskel;
  class Axis_pskel;
  class FilterBeam_pskel;
  class FilterColor_pskel;
  class FilterGobo_pskel;
  class FilterShaper_pskel;
  class Beam_pskel;
  class GeometryReference_pskel;
  class Break_pskel;
  class DMXModes_pskel;
  class DMXMode_pskel;
  class DMXChannels_pskel;
  class DMXChannel_pskel;
  class LogicalChannel_pskel;
  class ChannelFunction_pskel;
  class ChannelSet_pskel;
  class Relations_pskel;
  class Relation_pskel;
  class Revisions_pskel;
  class Revision_pskel;
  class FTPresets_pskel;
  class FTPreset_pskel;
  class FTMacros_pskel;
  class FTMacro_pskel;
  class MacroDMX_pskel;
  class DMXStep_pskel;
  class DMXValue_pskel;
  class MacroVisual_pskel;
  class VisualStep_pskel;
  class VisualValue_pskel;
  class PhysicalDescriptions_pskel;
  class Emitters_pskel;
  class Emitter_pskel;
  class Filters_pskel;
  class Filter_pskel;
  class Measurement_pskel;
  class MeasurementPoint_pskel;
  class ColorSpace_pskel;
  class DMXProfiles_pskel;
  class DMXProfile_pskel;
  class CRIs_pskel;
  class CRI_pskel;
  class Protocols_pskel;
  class Art_Net_pskel;
  class sACN_pskel;
  class KiNET_pskel;
  class PosiStageNet_pskel;
  class OpenSoundControl_pskel;
  class CITP_pskel;
  class RDM_pskel;
  class SoftwareVersionID_pskel;
  class DMXPersonality_pskel;
  class AttributeDefinitions_pskel;
  class ActivationGroups_pskel;
  class FeatureGroups_pskel;
  class ActivationGroup_pskel;
  class FeatureGroup_pskel;
  class Feature_pskel;
  class Attributes_pskel;
  class Attribute_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

namespace device
{
  class matrixtype_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_matrixtype ();
  };

  class colorcietype_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_colorcietype ();
  };

  class offsettype_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_offsettype ();
  };

  class dmxtype_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_dmxtype ();
  };

  class dmxvalue_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_dmxvalue ();
  };

  class nametype_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_nametype ();
  };

  class dataversion_pskel: public virtual ::xml_schema::float_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_dataversion ();
  };

  class guidtype_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_guidtype ();
  };

  class PhysicalUnitEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PhysicalUnitEnum ();
  };

  class MasterEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_MasterEnum ();
  };

  class PrimitiveTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PrimitiveTypeEnum ();
  };

  class LampTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LampTypeEnum ();
  };

  class BeamTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_BeamTypeEnum ();
  };

  class ColorSpaceEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ColorSpaceEnum ();
  };

  class InterpolationToEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_InterpolationToEnum ();
  };

  class SnapEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_SnapEnum ();
  };

  class YesNoEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_YesNoEnum ();
  };

  class RelationTypesEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RelationTypesEnum ();
  };

  class RDMParameterTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMParameterTypeEnum ();
  };

  class ThresholdOperatorEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ThresholdOperatorEnum ();
  };

  class RDMParameterDataTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMParameterDataTypeEnum ();
  };

  class RDMParameterCommandEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMParameterCommandEnum ();
  };

  class RDMSensorTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMSensorTypeEnum ();
  };

  class RDMParameterSensorUnitEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMParameterSensorUnitEnum ();
  };

  class RDMSlotInfoTypeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMSlotInfoTypeEnum ();
  };

  class RDMSlotLabelIDEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMSlotLabelIDEnum ();
  };

  class RDMParameterSensorUnitPrefixEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_RDMParameterSensorUnitPrefixEnum ();
  };

  class CESEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CESEnum ();
  };

  class AttributeEnum_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_AttributeEnum ();
  };

  class GDTF_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FixtureType ();

    virtual void
    DataVersion ();

    virtual void
    post_GDTF ();

    // Parser construction API.
    //
    void
    FixtureType_parser (::device::FixtureType_pskel&);

    void
    DataVersion_parser (::device::dataversion_pskel&);

    void
    parsers (::device::FixtureType_pskel& /* FixtureType */,
             ::device::dataversion_pskel& /* DataVersion */);

    // Constructor.
    //
    GDTF_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::FixtureType_pskel* FixtureType_parser_;
    ::device::dataversion_pskel* DataVersion_parser_;
  };

  class FixtureType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    AttributeDefinitions ();

    virtual void
    Wheels ();

    virtual void
    PhysicalDescriptions ();

    virtual void
    Models ();

    virtual void
    Geometries ();

    virtual void
    DMXModes ();

    virtual void
    Revisions ();

    virtual void
    FTPresets ();

    virtual void
    Protocols ();

    virtual void
    Name ();

    virtual void
    ShortName (const ::std::string&);

    virtual void
    LongName (const ::std::string&);

    virtual void
    Manufacturer (const ::std::string&);

    virtual void
    Description (const ::std::string&);

    virtual void
    FixtureTypeID ();

    virtual void
    Thumbnail (const ::std::string&);

    virtual void
    RefFT ();

    virtual void
    post_FixtureType ();

    // Parser construction API.
    //
    void
    AttributeDefinitions_parser (::device::AttributeDefinitions_pskel&);

    void
    Wheels_parser (::device::Wheels_pskel&);

    void
    PhysicalDescriptions_parser (::device::PhysicalDescriptions_pskel&);

    void
    Models_parser (::device::Models_pskel&);

    void
    Geometries_parser (::device::Geometries_pskel&);

    void
    DMXModes_parser (::device::DMXModes_pskel&);

    void
    Revisions_parser (::device::Revisions_pskel&);

    void
    FTPresets_parser (::device::FTPresets_pskel&);

    void
    Protocols_parser (::device::Protocols_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    ShortName_parser (::xml_schema::string_pskel&);

    void
    LongName_parser (::xml_schema::string_pskel&);

    void
    Manufacturer_parser (::xml_schema::string_pskel&);

    void
    Description_parser (::xml_schema::string_pskel&);

    void
    FixtureTypeID_parser (::device::guidtype_pskel&);

    void
    Thumbnail_parser (::xml_schema::string_pskel&);

    void
    RefFT_parser (::device::guidtype_pskel&);

    void
    parsers (::device::AttributeDefinitions_pskel& /* AttributeDefinitions */,
             ::device::Wheels_pskel& /* Wheels */,
             ::device::PhysicalDescriptions_pskel& /* PhysicalDescriptions */,
             ::device::Models_pskel& /* Models */,
             ::device::Geometries_pskel& /* Geometries */,
             ::device::DMXModes_pskel& /* DMXModes */,
             ::device::Revisions_pskel& /* Revisions */,
             ::device::FTPresets_pskel& /* FTPresets */,
             ::device::Protocols_pskel& /* Protocols */,
             ::device::nametype_pskel& /* Name */,
             ::xml_schema::string_pskel& /* ShortName */,
             ::xml_schema::string_pskel& /* LongName */,
             ::xml_schema::string_pskel& /* Manufacturer */,
             ::xml_schema::string_pskel& /* Description */,
             ::device::guidtype_pskel& /* FixtureTypeID */,
             ::xml_schema::string_pskel& /* Thumbnail */,
             ::device::guidtype_pskel& /* RefFT */);

    // Constructor.
    //
    FixtureType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::AttributeDefinitions_pskel* AttributeDefinitions_parser_;
    ::device::Wheels_pskel* Wheels_parser_;
    ::device::PhysicalDescriptions_pskel* PhysicalDescriptions_parser_;
    ::device::Models_pskel* Models_parser_;
    ::device::Geometries_pskel* Geometries_parser_;
    ::device::DMXModes_pskel* DMXModes_parser_;
    ::device::Revisions_pskel* Revisions_parser_;
    ::device::FTPresets_pskel* FTPresets_parser_;
    ::device::Protocols_pskel* Protocols_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::xml_schema::string_pskel* ShortName_parser_;
    ::xml_schema::string_pskel* LongName_parser_;
    ::xml_schema::string_pskel* Manufacturer_parser_;
    ::xml_schema::string_pskel* Description_parser_;
    ::device::guidtype_pskel* FixtureTypeID_parser_;
    ::xml_schema::string_pskel* Thumbnail_parser_;
    ::device::guidtype_pskel* RefFT_parser_;
  };

  class Wheels_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Wheel ();

    virtual void
    post_Wheels ();

    // Parser construction API.
    //
    void
    Wheel_parser (::device::Wheel_pskel&);

    void
    parsers (::device::Wheel_pskel& /* Wheel */);

    // Constructor.
    //
    Wheels_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Wheel_pskel* Wheel_parser_;
  };

  class Wheel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Slot ();

    virtual void
    Name ();

    virtual void
    post_Wheel ();

    // Parser construction API.
    //
    void
    Slot_parser (::device::Slot_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    parsers (::device::Slot_pskel& /* Slot */,
             ::device::nametype_pskel& /* Name */);

    // Constructor.
    //
    Wheel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Slot_pskel* Slot_parser_;
    ::device::nametype_pskel* Name_parser_;
  };

  class Slot_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Facet ();

    virtual void
    Name ();

    virtual void
    Color ();

    virtual void
    Filter (const ::std::string&);

    virtual void
    MediaFileName (const ::std::string&);

    virtual void
    post_Slot ();

    // Parser construction API.
    //
    void
    Facet_parser (::device::Facet_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Color_parser (::device::colorcietype_pskel&);

    void
    Filter_parser (::xml_schema::string_pskel&);

    void
    MediaFileName_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::Facet_pskel& /* Facet */,
             ::device::nametype_pskel& /* Name */,
             ::device::colorcietype_pskel& /* Color */,
             ::xml_schema::string_pskel& /* Filter */,
             ::xml_schema::string_pskel& /* MediaFileName */);

    // Constructor.
    //
    Slot_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Facet_pskel* Facet_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::colorcietype_pskel* Color_parser_;
    ::xml_schema::string_pskel* Filter_parser_;
    ::xml_schema::string_pskel* MediaFileName_parser_;
  };

  class Facet_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Color ();

    virtual void
    Rotation (const ::std::string&);

    virtual void
    post_Facet ();

    // Parser construction API.
    //
    void
    Color_parser (::device::colorcietype_pskel&);

    void
    Rotation_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::colorcietype_pskel& /* Color */,
             ::xml_schema::string_pskel& /* Rotation */);

    // Constructor.
    //
    Facet_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::colorcietype_pskel* Color_parser_;
    ::xml_schema::string_pskel* Rotation_parser_;
  };

  class Models_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Model ();

    virtual void
    post_Models ();

    // Parser construction API.
    //
    void
    Model_parser (::device::Model_pskel&);

    void
    parsers (::device::Model_pskel& /* Model */);

    // Constructor.
    //
    Models_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Model_pskel* Model_parser_;
  };

  class Model_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name ();

    virtual void
    Length (float);

    virtual void
    Width (float);

    virtual void
    Height (float);

    virtual void
    PrimitiveType ();

    virtual void
    File (const ::std::string&);

    virtual void
    post_Model ();

    // Parser construction API.
    //
    void
    Name_parser (::device::nametype_pskel&);

    void
    Length_parser (::xml_schema::float_pskel&);

    void
    Width_parser (::xml_schema::float_pskel&);

    void
    Height_parser (::xml_schema::float_pskel&);

    void
    PrimitiveType_parser (::device::PrimitiveTypeEnum_pskel&);

    void
    File_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::nametype_pskel& /* Name */,
             ::xml_schema::float_pskel& /* Length */,
             ::xml_schema::float_pskel& /* Width */,
             ::xml_schema::float_pskel& /* Height */,
             ::device::PrimitiveTypeEnum_pskel& /* PrimitiveType */,
             ::xml_schema::string_pskel& /* File */);

    // Constructor.
    //
    Model_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::nametype_pskel* Name_parser_;
    ::xml_schema::float_pskel* Length_parser_;
    ::xml_schema::float_pskel* Width_parser_;
    ::xml_schema::float_pskel* Height_parser_;
    ::device::PrimitiveTypeEnum_pskel* PrimitiveType_parser_;
    ::xml_schema::string_pskel* File_parser_;
  };

  class Geometries_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    post_Geometries ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */);

    // Constructor.
    //
    Geometries_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
  };

  class Geometry_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_Geometry ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */);

    // Constructor.
    //
    Geometry_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
  };

  class Axis_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_Axis ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */);

    // Constructor.
    //
    Axis_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
  };

  class FilterBeam_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterBeam ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */);

    // Constructor.
    //
    FilterBeam_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
  };

  class FilterColor_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterColor ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */);

    // Constructor.
    //
    FilterColor_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
  };

  class FilterGobo_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterGobo ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */);

    // Constructor.
    //
    FilterGobo_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
  };

  class FilterShaper_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterShaper ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */);

    // Constructor.
    //
    FilterShaper_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
  };

  class Beam_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    LampType ();

    virtual void
    PowerConsumption (float);

    virtual void
    LuminousFlux (float);

    virtual void
    ColorTemperature (float);

    virtual void
    BeamAngle (float);

    virtual void
    FieldAngle (float);

    virtual void
    BeamRadius (float);

    virtual void
    BeamType ();

    virtual void
    ColorRenderingIndex (long long);

    virtual void
    post_Beam ();

    // Parser construction API.
    //
    void
    Geometry_parser (::device::Geometry_pskel&);

    void
    Axis_parser (::device::Axis_pskel&);

    void
    FilterBeam_parser (::device::FilterBeam_pskel&);

    void
    FilterColor_parser (::device::FilterColor_pskel&);

    void
    FilterGobo_parser (::device::FilterGobo_pskel&);

    void
    FilterShaper_parser (::device::FilterShaper_pskel&);

    void
    Beam_parser (::device::Beam_pskel&);

    void
    GeometryReference_parser (::device::GeometryReference_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    LampType_parser (::device::LampTypeEnum_pskel&);

    void
    PowerConsumption_parser (::xml_schema::float_pskel&);

    void
    LuminousFlux_parser (::xml_schema::float_pskel&);

    void
    ColorTemperature_parser (::xml_schema::float_pskel&);

    void
    BeamAngle_parser (::xml_schema::float_pskel&);

    void
    FieldAngle_parser (::xml_schema::float_pskel&);

    void
    BeamRadius_parser (::xml_schema::float_pskel&);

    void
    BeamType_parser (::device::BeamTypeEnum_pskel&);

    void
    ColorRenderingIndex_parser (::xml_schema::integer_pskel&);

    void
    parsers (::device::Geometry_pskel& /* Geometry */,
             ::device::Axis_pskel& /* Axis */,
             ::device::FilterBeam_pskel& /* FilterBeam */,
             ::device::FilterColor_pskel& /* FilterColor */,
             ::device::FilterGobo_pskel& /* FilterGobo */,
             ::device::FilterShaper_pskel& /* FilterShaper */,
             ::device::Beam_pskel& /* Beam */,
             ::device::GeometryReference_pskel& /* GeometryReference */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Model */,
             ::device::matrixtype_pskel& /* Position */,
             ::device::LampTypeEnum_pskel& /* LampType */,
             ::xml_schema::float_pskel& /* PowerConsumption */,
             ::xml_schema::float_pskel& /* LuminousFlux */,
             ::xml_schema::float_pskel& /* ColorTemperature */,
             ::xml_schema::float_pskel& /* BeamAngle */,
             ::xml_schema::float_pskel& /* FieldAngle */,
             ::xml_schema::float_pskel& /* BeamRadius */,
             ::device::BeamTypeEnum_pskel& /* BeamType */,
             ::xml_schema::integer_pskel& /* ColorRenderingIndex */);

    // Constructor.
    //
    Beam_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Geometry_pskel* Geometry_parser_;
    ::device::Axis_pskel* Axis_parser_;
    ::device::FilterBeam_pskel* FilterBeam_parser_;
    ::device::FilterColor_pskel* FilterColor_parser_;
    ::device::FilterGobo_pskel* FilterGobo_parser_;
    ::device::FilterShaper_pskel* FilterShaper_parser_;
    ::device::Beam_pskel* Beam_parser_;
    ::device::GeometryReference_pskel* GeometryReference_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Model_parser_;
    ::device::matrixtype_pskel* Position_parser_;
    ::device::LampTypeEnum_pskel* LampType_parser_;
    ::xml_schema::float_pskel* PowerConsumption_parser_;
    ::xml_schema::float_pskel* LuminousFlux_parser_;
    ::xml_schema::float_pskel* ColorTemperature_parser_;
    ::xml_schema::float_pskel* BeamAngle_parser_;
    ::xml_schema::float_pskel* FieldAngle_parser_;
    ::xml_schema::float_pskel* BeamRadius_parser_;
    ::device::BeamTypeEnum_pskel* BeamType_parser_;
    ::xml_schema::integer_pskel* ColorRenderingIndex_parser_;
  };

  class GeometryReference_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Break ();

    virtual void
    Name ();

    virtual void
    Position ();

    virtual void
    Geometry ();

    virtual void
    Model ();

    virtual void
    post_GeometryReference ();

    // Parser construction API.
    //
    void
    Break_parser (::device::Break_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Position_parser (::device::matrixtype_pskel&);

    void
    Geometry_parser (::device::nametype_pskel&);

    void
    Model_parser (::device::nametype_pskel&);

    void
    parsers (::device::Break_pskel& /* Break */,
             ::device::nametype_pskel& /* Name */,
             ::device::matrixtype_pskel& /* Position */,
             ::device::nametype_pskel& /* Geometry */,
             ::device::nametype_pskel& /* Model */);

    // Constructor.
    //
    GeometryReference_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Break_pskel* Break_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::matrixtype_pskel* Position_parser_;
    ::device::nametype_pskel* Geometry_parser_;
    ::device::nametype_pskel* Model_parser_;
  };

  class Break_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXOffset (long long);

    virtual void
    DMXBreak (long long);

    virtual void
    post_Break ();

    // Parser construction API.
    //
    void
    DMXOffset_parser (::xml_schema::integer_pskel&);

    void
    DMXBreak_parser (::xml_schema::integer_pskel&);

    void
    parsers (::xml_schema::integer_pskel& /* DMXOffset */,
             ::xml_schema::integer_pskel& /* DMXBreak */);

    // Constructor.
    //
    Break_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::integer_pskel* DMXOffset_parser_;
    ::xml_schema::integer_pskel* DMXBreak_parser_;
  };

  class DMXModes_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXMode ();

    virtual void
    post_DMXModes ();

    // Parser construction API.
    //
    void
    DMXMode_parser (::device::DMXMode_pskel&);

    void
    parsers (::device::DMXMode_pskel& /* DMXMode */);

    // Constructor.
    //
    DMXModes_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::DMXMode_pskel* DMXMode_parser_;
  };

  class DMXMode_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXChannels ();

    virtual void
    Relations ();

    virtual void
    FTMacros ();

    virtual void
    Name ();

    virtual void
    Geometry ();

    virtual void
    post_DMXMode ();

    // Parser construction API.
    //
    void
    DMXChannels_parser (::device::DMXChannels_pskel&);

    void
    Relations_parser (::device::Relations_pskel&);

    void
    FTMacros_parser (::device::FTMacros_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Geometry_parser (::device::nametype_pskel&);

    void
    parsers (::device::DMXChannels_pskel& /* DMXChannels */,
             ::device::Relations_pskel& /* Relations */,
             ::device::FTMacros_pskel& /* FTMacros */,
             ::device::nametype_pskel& /* Name */,
             ::device::nametype_pskel& /* Geometry */);

    // Constructor.
    //
    DMXMode_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::DMXChannels_pskel* DMXChannels_parser_;
    ::device::Relations_pskel* Relations_parser_;
    ::device::FTMacros_pskel* FTMacros_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::nametype_pskel* Geometry_parser_;
  };

  class DMXChannels_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXChannel ();

    virtual void
    post_DMXChannels ();

    // Parser construction API.
    //
    void
    DMXChannel_parser (::device::DMXChannel_pskel&);

    void
    parsers (::device::DMXChannel_pskel& /* DMXChannel */);

    // Constructor.
    //
    DMXChannels_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::DMXChannel_pskel* DMXChannel_parser_;
  };

  class DMXChannel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    LogicalChannel ();

    virtual void
    Name ();

    virtual void
    DMXBreak (long long);

    virtual void
    Offset ();

    virtual void
    Default ();

    virtual void
    Highlight ();

    virtual void
    Geometry (const ::std::string&);

    virtual void
    post_DMXChannel ();

    // Parser construction API.
    //
    void
    LogicalChannel_parser (::device::LogicalChannel_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    DMXBreak_parser (::xml_schema::integer_pskel&);

    void
    Offset_parser (::device::offsettype_pskel&);

    void
    Default_parser (::device::dmxtype_pskel&);

    void
    Highlight_parser (::device::dmxtype_pskel&);

    void
    Geometry_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::LogicalChannel_pskel& /* LogicalChannel */,
             ::device::nametype_pskel& /* Name */,
             ::xml_schema::integer_pskel& /* DMXBreak */,
             ::device::offsettype_pskel& /* Offset */,
             ::device::dmxtype_pskel& /* Default */,
             ::device::dmxtype_pskel& /* Highlight */,
             ::xml_schema::string_pskel& /* Geometry */);

    // Constructor.
    //
    DMXChannel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::LogicalChannel_pskel* LogicalChannel_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::xml_schema::integer_pskel* DMXBreak_parser_;
    ::device::offsettype_pskel* Offset_parser_;
    ::device::dmxtype_pskel* Default_parser_;
    ::device::dmxtype_pskel* Highlight_parser_;
    ::xml_schema::string_pskel* Geometry_parser_;
  };

  class LogicalChannel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ChannelFunction ();

    virtual void
    Name ();

    virtual void
    Attribute ();

    virtual void
    Snap ();

    virtual void
    Master ();

    virtual void
    MibFade (float);

    virtual void
    DMXChangeTimeLimit (float);

    virtual void
    post_LogicalChannel ();

    // Parser construction API.
    //
    void
    ChannelFunction_parser (::device::ChannelFunction_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Attribute_parser (::device::AttributeEnum_pskel&);

    void
    Snap_parser (::device::SnapEnum_pskel&);

    void
    Master_parser (::device::MasterEnum_pskel&);

    void
    MibFade_parser (::xml_schema::float_pskel&);

    void
    DMXChangeTimeLimit_parser (::xml_schema::float_pskel&);

    void
    parsers (::device::ChannelFunction_pskel& /* ChannelFunction */,
             ::device::nametype_pskel& /* Name */,
             ::device::AttributeEnum_pskel& /* Attribute */,
             ::device::SnapEnum_pskel& /* Snap */,
             ::device::MasterEnum_pskel& /* Master */,
             ::xml_schema::float_pskel& /* MibFade */,
             ::xml_schema::float_pskel& /* DMXChangeTimeLimit */);

    // Constructor.
    //
    LogicalChannel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::ChannelFunction_pskel* ChannelFunction_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::AttributeEnum_pskel* Attribute_parser_;
    ::device::SnapEnum_pskel* Snap_parser_;
    ::device::MasterEnum_pskel* Master_parser_;
    ::xml_schema::float_pskel* MibFade_parser_;
    ::xml_schema::float_pskel* DMXChangeTimeLimit_parser_;
  };

  class ChannelFunction_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ChannelSet ();

    virtual void
    Name (const ::std::string&);

    virtual void
    Attribute ();

    virtual void
    OriginalAttribute (const ::std::string&);

    virtual void
    DMXFrom ();

    virtual void
    PhysicalFrom (float);

    virtual void
    PhysicalTo (float);

    virtual void
    RealFade (float);

    virtual void
    Wheel (const ::std::string&);

    virtual void
    Emitter (const ::std::string&);

    virtual void
    Filter (const ::std::string&);

    virtual void
    ModeMaster (const ::std::string&);

    virtual void
    ModeFrom ();

    virtual void
    ModeTo ();

    virtual void
    post_ChannelFunction ();

    // Parser construction API.
    //
    void
    ChannelSet_parser (::device::ChannelSet_pskel&);

    void
    Name_parser (::xml_schema::string_pskel&);

    void
    Attribute_parser (::device::AttributeEnum_pskel&);

    void
    OriginalAttribute_parser (::xml_schema::string_pskel&);

    void
    DMXFrom_parser (::device::dmxtype_pskel&);

    void
    PhysicalFrom_parser (::xml_schema::float_pskel&);

    void
    PhysicalTo_parser (::xml_schema::float_pskel&);

    void
    RealFade_parser (::xml_schema::float_pskel&);

    void
    Wheel_parser (::xml_schema::string_pskel&);

    void
    Emitter_parser (::xml_schema::string_pskel&);

    void
    Filter_parser (::xml_schema::string_pskel&);

    void
    ModeMaster_parser (::xml_schema::string_pskel&);

    void
    ModeFrom_parser (::device::dmxtype_pskel&);

    void
    ModeTo_parser (::device::dmxtype_pskel&);

    void
    parsers (::device::ChannelSet_pskel& /* ChannelSet */,
             ::xml_schema::string_pskel& /* Name */,
             ::device::AttributeEnum_pskel& /* Attribute */,
             ::xml_schema::string_pskel& /* OriginalAttribute */,
             ::device::dmxtype_pskel& /* DMXFrom */,
             ::xml_schema::float_pskel& /* PhysicalFrom */,
             ::xml_schema::float_pskel& /* PhysicalTo */,
             ::xml_schema::float_pskel& /* RealFade */,
             ::xml_schema::string_pskel& /* Wheel */,
             ::xml_schema::string_pskel& /* Emitter */,
             ::xml_schema::string_pskel& /* Filter */,
             ::xml_schema::string_pskel& /* ModeMaster */,
             ::device::dmxtype_pskel& /* ModeFrom */,
             ::device::dmxtype_pskel& /* ModeTo */);

    // Constructor.
    //
    ChannelFunction_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::ChannelSet_pskel* ChannelSet_parser_;
    ::xml_schema::string_pskel* Name_parser_;
    ::device::AttributeEnum_pskel* Attribute_parser_;
    ::xml_schema::string_pskel* OriginalAttribute_parser_;
    ::device::dmxtype_pskel* DMXFrom_parser_;
    ::xml_schema::float_pskel* PhysicalFrom_parser_;
    ::xml_schema::float_pskel* PhysicalTo_parser_;
    ::xml_schema::float_pskel* RealFade_parser_;
    ::xml_schema::string_pskel* Wheel_parser_;
    ::xml_schema::string_pskel* Emitter_parser_;
    ::xml_schema::string_pskel* Filter_parser_;
    ::xml_schema::string_pskel* ModeMaster_parser_;
    ::device::dmxtype_pskel* ModeFrom_parser_;
    ::device::dmxtype_pskel* ModeTo_parser_;
  };

  class ChannelSet_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    DMXFrom ();

    virtual void
    DMXTo ();

    virtual void
    PhysicalFrom (float);

    virtual void
    PhysicalTo (float);

    virtual void
    WheelSlotIndex (long long);

    virtual void
    post_ChannelSet ();

    // Parser construction API.
    //
    void
    Name_parser (::xml_schema::string_pskel&);

    void
    DMXFrom_parser (::device::dmxtype_pskel&);

    void
    DMXTo_parser (::device::dmxtype_pskel&);

    void
    PhysicalFrom_parser (::xml_schema::float_pskel&);

    void
    PhysicalTo_parser (::xml_schema::float_pskel&);

    void
    WheelSlotIndex_parser (::xml_schema::integer_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Name */,
             ::device::dmxtype_pskel& /* DMXFrom */,
             ::device::dmxtype_pskel& /* DMXTo */,
             ::xml_schema::float_pskel& /* PhysicalFrom */,
             ::xml_schema::float_pskel& /* PhysicalTo */,
             ::xml_schema::integer_pskel& /* WheelSlotIndex */);

    // Constructor.
    //
    ChannelSet_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Name_parser_;
    ::device::dmxtype_pskel* DMXFrom_parser_;
    ::device::dmxtype_pskel* DMXTo_parser_;
    ::xml_schema::float_pskel* PhysicalFrom_parser_;
    ::xml_schema::float_pskel* PhysicalTo_parser_;
    ::xml_schema::integer_pskel* WheelSlotIndex_parser_;
  };

  class Relations_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Relation ();

    virtual void
    post_Relations ();

    // Parser construction API.
    //
    void
    Relation_parser (::device::Relation_pskel&);

    void
    parsers (::device::Relation_pskel& /* Relation */);

    // Constructor.
    //
    Relations_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Relation_pskel* Relation_parser_;
  };

  class Relation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    Master (const ::std::string&);

    virtual void
    Follower (const ::std::string&);

    virtual void
    Type ();

    virtual void
    post_Relation ();

    // Parser construction API.
    //
    void
    Name_parser (::xml_schema::string_pskel&);

    void
    Master_parser (::xml_schema::string_pskel&);

    void
    Follower_parser (::xml_schema::string_pskel&);

    void
    Type_parser (::device::RelationTypesEnum_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Name */,
             ::xml_schema::string_pskel& /* Master */,
             ::xml_schema::string_pskel& /* Follower */,
             ::device::RelationTypesEnum_pskel& /* Type */);

    // Constructor.
    //
    Relation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Name_parser_;
    ::xml_schema::string_pskel* Master_parser_;
    ::xml_schema::string_pskel* Follower_parser_;
    ::device::RelationTypesEnum_pskel* Type_parser_;
  };

  class Revisions_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Revision ();

    virtual void
    post_Revisions ();

    // Parser construction API.
    //
    void
    Revision_parser (::device::Revision_pskel&);

    void
    parsers (::device::Revision_pskel& /* Revision */);

    // Constructor.
    //
    Revisions_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Revision_pskel* Revision_parser_;
  };

  class Revision_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Text (const ::std::string&);

    virtual void
    Date (const ::xml_schema::date_time&);

    virtual void
    UserID (long long);

    virtual void
    post_Revision ();

    // Parser construction API.
    //
    void
    Text_parser (::xml_schema::string_pskel&);

    void
    Date_parser (::xml_schema::date_time_pskel&);

    void
    UserID_parser (::xml_schema::integer_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Text */,
             ::xml_schema::date_time_pskel& /* Date */,
             ::xml_schema::integer_pskel& /* UserID */);

    // Constructor.
    //
    Revision_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Text_parser_;
    ::xml_schema::date_time_pskel* Date_parser_;
    ::xml_schema::integer_pskel* UserID_parser_;
  };

  class FTPresets_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FTPreset ();

    virtual void
    post_FTPresets ();

    // Parser construction API.
    //
    void
    FTPreset_parser (::device::FTPreset_pskel&);

    void
    parsers (::device::FTPreset_pskel& /* FTPreset */);

    // Constructor.
    //
    FTPresets_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::FTPreset_pskel* FTPreset_parser_;
  };

  class FTPreset_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_FTPreset ();
  };

  class FTMacros_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FTMacro ();

    virtual void
    post_FTMacros ();

    // Parser construction API.
    //
    void
    FTMacro_parser (::device::FTMacro_pskel&);

    void
    parsers (::device::FTMacro_pskel& /* FTMacro */);

    // Constructor.
    //
    FTMacros_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::FTMacro_pskel* FTMacro_parser_;
  };

  class FTMacro_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MacroDMX ();

    virtual void
    MacroVisual ();

    virtual void
    Name (const ::std::string&);

    virtual void
    post_FTMacro ();

    // Parser construction API.
    //
    void
    MacroDMX_parser (::device::MacroDMX_pskel&);

    void
    MacroVisual_parser (::device::MacroVisual_pskel&);

    void
    Name_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::MacroDMX_pskel& /* MacroDMX */,
             ::device::MacroVisual_pskel& /* MacroVisual */,
             ::xml_schema::string_pskel& /* Name */);

    // Constructor.
    //
    FTMacro_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::MacroDMX_pskel* MacroDMX_parser_;
    ::device::MacroVisual_pskel* MacroVisual_parser_;
    ::xml_schema::string_pskel* Name_parser_;
  };

  class MacroDMX_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXStep ();

    virtual void
    post_MacroDMX ();

    // Parser construction API.
    //
    void
    DMXStep_parser (::device::DMXStep_pskel&);

    void
    parsers (::device::DMXStep_pskel& /* DMXStep */);

    // Constructor.
    //
    MacroDMX_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::DMXStep_pskel* DMXStep_parser_;
  };

  class DMXStep_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXValue ();

    virtual void
    Duration (long long);

    virtual void
    post_DMXStep ();

    // Parser construction API.
    //
    void
    DMXValue_parser (::device::DMXValue_pskel&);

    void
    Duration_parser (::xml_schema::integer_pskel&);

    void
    parsers (::device::DMXValue_pskel& /* DMXValue */,
             ::xml_schema::integer_pskel& /* Duration */);

    // Constructor.
    //
    DMXStep_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::DMXValue_pskel* DMXValue_parser_;
    ::xml_schema::integer_pskel* Duration_parser_;
  };

  class DMXValue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Value ();

    virtual void
    DMXChannel (const ::std::string&);

    virtual void
    post_DMXValue ();

    // Parser construction API.
    //
    void
    Value_parser (::device::dmxtype_pskel&);

    void
    DMXChannel_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::dmxtype_pskel& /* Value */,
             ::xml_schema::string_pskel& /* DMXChannel */);

    // Constructor.
    //
    DMXValue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::dmxtype_pskel* Value_parser_;
    ::xml_schema::string_pskel* DMXChannel_parser_;
  };

  class MacroVisual_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    VisualStep ();

    virtual void
    post_MacroVisual ();

    // Parser construction API.
    //
    void
    VisualStep_parser (::device::VisualStep_pskel&);

    void
    parsers (::device::VisualStep_pskel& /* VisualStep */);

    // Constructor.
    //
    MacroVisual_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::VisualStep_pskel* VisualStep_parser_;
  };

  class VisualStep_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    VisualValue ();

    virtual void
    Duration (long long);

    virtual void
    Fade (const ::std::string&);

    virtual void
    Delay (const ::std::string&);

    virtual void
    post_VisualStep ();

    // Parser construction API.
    //
    void
    VisualValue_parser (::device::VisualValue_pskel&);

    void
    Duration_parser (::xml_schema::integer_pskel&);

    void
    Fade_parser (::xml_schema::string_pskel&);

    void
    Delay_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::VisualValue_pskel& /* VisualValue */,
             ::xml_schema::integer_pskel& /* Duration */,
             ::xml_schema::string_pskel& /* Fade */,
             ::xml_schema::string_pskel& /* Delay */);

    // Constructor.
    //
    VisualStep_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::VisualValue_pskel* VisualValue_parser_;
    ::xml_schema::integer_pskel* Duration_parser_;
    ::xml_schema::string_pskel* Fade_parser_;
    ::xml_schema::string_pskel* Delay_parser_;
  };

  class VisualValue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Value (const ::std::string&);

    virtual void
    ChannelFunction (const ::std::string&);

    virtual void
    post_VisualValue ();

    // Parser construction API.
    //
    void
    Value_parser (::xml_schema::string_pskel&);

    void
    ChannelFunction_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Value */,
             ::xml_schema::string_pskel& /* ChannelFunction */);

    // Constructor.
    //
    VisualValue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Value_parser_;
    ::xml_schema::string_pskel* ChannelFunction_parser_;
  };

  class PhysicalDescriptions_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Emitters ();

    virtual void
    Filters ();

    virtual void
    ColorSpace ();

    virtual void
    DMXProfiles ();

    virtual void
    CRIs ();

    virtual void
    post_PhysicalDescriptions ();

    // Parser construction API.
    //
    void
    Emitters_parser (::device::Emitters_pskel&);

    void
    Filters_parser (::device::Filters_pskel&);

    void
    ColorSpace_parser (::device::ColorSpace_pskel&);

    void
    DMXProfiles_parser (::device::DMXProfiles_pskel&);

    void
    CRIs_parser (::device::CRIs_pskel&);

    void
    parsers (::device::Emitters_pskel& /* Emitters */,
             ::device::Filters_pskel& /* Filters */,
             ::device::ColorSpace_pskel& /* ColorSpace */,
             ::device::DMXProfiles_pskel& /* DMXProfiles */,
             ::device::CRIs_pskel& /* CRIs */);

    // Constructor.
    //
    PhysicalDescriptions_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Emitters_pskel* Emitters_parser_;
    ::device::Filters_pskel* Filters_parser_;
    ::device::ColorSpace_pskel* ColorSpace_parser_;
    ::device::DMXProfiles_pskel* DMXProfiles_parser_;
    ::device::CRIs_pskel* CRIs_parser_;
  };

  class Emitters_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Emitter ();

    virtual void
    post_Emitters ();

    // Parser construction API.
    //
    void
    Emitter_parser (::device::Emitter_pskel&);

    void
    parsers (::device::Emitter_pskel& /* Emitter */);

    // Constructor.
    //
    Emitters_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Emitter_pskel* Emitter_parser_;
  };

  class Emitter_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Measurement ();

    virtual void
    Name ();

    virtual void
    Color ();

    virtual void
    DominantWaveLength (float);

    virtual void
    DiodePart (const ::std::string&);

    virtual void
    post_Emitter ();

    // Parser construction API.
    //
    void
    Measurement_parser (::device::Measurement_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Color_parser (::device::colorcietype_pskel&);

    void
    DominantWaveLength_parser (::xml_schema::float_pskel&);

    void
    DiodePart_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::Measurement_pskel& /* Measurement */,
             ::device::nametype_pskel& /* Name */,
             ::device::colorcietype_pskel& /* Color */,
             ::xml_schema::float_pskel& /* DominantWaveLength */,
             ::xml_schema::string_pskel& /* DiodePart */);

    // Constructor.
    //
    Emitter_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Measurement_pskel* Measurement_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::colorcietype_pskel* Color_parser_;
    ::xml_schema::float_pskel* DominantWaveLength_parser_;
    ::xml_schema::string_pskel* DiodePart_parser_;
  };

  class Filters_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Filter ();

    virtual void
    post_Filters ();

    // Parser construction API.
    //
    void
    Filter_parser (::device::Filter_pskel&);

    void
    parsers (::device::Filter_pskel& /* Filter */);

    // Constructor.
    //
    Filters_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Filter_pskel* Filter_parser_;
  };

  class Filter_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Measurement ();

    virtual void
    Name ();

    virtual void
    Color ();

    virtual void
    post_Filter ();

    // Parser construction API.
    //
    void
    Measurement_parser (::device::Measurement_pskel&);

    void
    Name_parser (::device::nametype_pskel&);

    void
    Color_parser (::device::colorcietype_pskel&);

    void
    parsers (::device::Measurement_pskel& /* Measurement */,
             ::device::nametype_pskel& /* Name */,
             ::device::colorcietype_pskel& /* Color */);

    // Constructor.
    //
    Filter_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Measurement_pskel* Measurement_parser_;
    ::device::nametype_pskel* Name_parser_;
    ::device::colorcietype_pskel* Color_parser_;
  };

  class Measurement_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    MeasurementPoint ();

    virtual void
    Physical (float);

    virtual void
    LuminousIntensity (float);

    virtual void
    Transmission (float);

    virtual void
    InterpolationTo ();

    virtual void
    post_Measurement ();

    // Parser construction API.
    //
    void
    MeasurementPoint_parser (::device::MeasurementPoint_pskel&);

    void
    Physical_parser (::xml_schema::float_pskel&);

    void
    LuminousIntensity_parser (::xml_schema::float_pskel&);

    void
    Transmission_parser (::xml_schema::float_pskel&);

    void
    InterpolationTo_parser (::device::InterpolationToEnum_pskel&);

    void
    parsers (::device::MeasurementPoint_pskel& /* MeasurementPoint */,
             ::xml_schema::float_pskel& /* Physical */,
             ::xml_schema::float_pskel& /* LuminousIntensity */,
             ::xml_schema::float_pskel& /* Transmission */,
             ::device::InterpolationToEnum_pskel& /* InterpolationTo */);

    // Constructor.
    //
    Measurement_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::MeasurementPoint_pskel* MeasurementPoint_parser_;
    ::xml_schema::float_pskel* Physical_parser_;
    ::xml_schema::float_pskel* LuminousIntensity_parser_;
    ::xml_schema::float_pskel* Transmission_parser_;
    ::device::InterpolationToEnum_pskel* InterpolationTo_parser_;
  };

  class MeasurementPoint_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    WaveLength (float);

    virtual void
    Energy (float);

    virtual void
    post_MeasurementPoint ();

    // Parser construction API.
    //
    void
    WaveLength_parser (::xml_schema::float_pskel&);

    void
    Energy_parser (::xml_schema::float_pskel&);

    void
    parsers (::xml_schema::float_pskel& /* WaveLength */,
             ::xml_schema::float_pskel& /* Energy */);

    // Constructor.
    //
    MeasurementPoint_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::float_pskel* WaveLength_parser_;
    ::xml_schema::float_pskel* Energy_parser_;
  };

  class ColorSpace_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ColorSpace ();

    virtual void
    Red ();

    virtual void
    Green ();

    virtual void
    Blue ();

    virtual void
    WhitePoint ();

    virtual void
    post_ColorSpace ();

    // Parser construction API.
    //
    void
    ColorSpace_parser (::device::ColorSpaceEnum_pskel&);

    void
    Red_parser (::device::colorcietype_pskel&);

    void
    Green_parser (::device::colorcietype_pskel&);

    void
    Blue_parser (::device::colorcietype_pskel&);

    void
    WhitePoint_parser (::device::colorcietype_pskel&);

    void
    parsers (::device::ColorSpaceEnum_pskel& /* ColorSpace */,
             ::device::colorcietype_pskel& /* Red */,
             ::device::colorcietype_pskel& /* Green */,
             ::device::colorcietype_pskel& /* Blue */,
             ::device::colorcietype_pskel& /* WhitePoint */);

    // Constructor.
    //
    ColorSpace_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::ColorSpaceEnum_pskel* ColorSpace_parser_;
    ::device::colorcietype_pskel* Red_parser_;
    ::device::colorcietype_pskel* Green_parser_;
    ::device::colorcietype_pskel* Blue_parser_;
    ::device::colorcietype_pskel* WhitePoint_parser_;
  };

  class DMXProfiles_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXProfile ();

    virtual void
    post_DMXProfiles ();

    // Parser construction API.
    //
    void
    DMXProfile_parser (::device::DMXProfile_pskel&);

    void
    parsers (::device::DMXProfile_pskel& /* DMXProfile */);

    // Constructor.
    //
    DMXProfiles_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::DMXProfile_pskel* DMXProfile_parser_;
  };

  class DMXProfile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_DMXProfile ();
  };

  class CRIs_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    CRI ();

    virtual void
    post_CRIs ();

    // Parser construction API.
    //
    void
    CRI_parser (::device::CRI_pskel&);

    void
    parsers (::device::CRI_pskel& /* CRI */);

    // Constructor.
    //
    CRIs_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::CRI_pskel* CRI_parser_;
  };

  class CRI_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    CES ();

    virtual void
    ColorRenderingIndex (long long);

    virtual void
    post_CRI ();

    // Parser construction API.
    //
    void
    CES_parser (::device::CESEnum_pskel&);

    void
    ColorRenderingIndex_parser (::xml_schema::integer_pskel&);

    void
    parsers (::device::CESEnum_pskel& /* CES */,
             ::xml_schema::integer_pskel& /* ColorRenderingIndex */);

    // Constructor.
    //
    CRI_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::CESEnum_pskel* CES_parser_;
    ::xml_schema::integer_pskel* ColorRenderingIndex_parser_;
  };

  class Protocols_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    RDM ();

    virtual void
    Art_Net ();

    virtual void
    sACN ();

    virtual void
    KiNET ();

    virtual void
    PosiStageNet ();

    virtual void
    OpenSoundControl ();

    virtual void
    CITP ();

    virtual void
    post_Protocols ();

    // Parser construction API.
    //
    void
    RDM_parser (::device::RDM_pskel&);

    void
    Art_Net_parser (::device::Art_Net_pskel&);

    void
    sACN_parser (::device::sACN_pskel&);

    void
    KiNET_parser (::device::KiNET_pskel&);

    void
    PosiStageNet_parser (::device::PosiStageNet_pskel&);

    void
    OpenSoundControl_parser (::device::OpenSoundControl_pskel&);

    void
    CITP_parser (::device::CITP_pskel&);

    void
    parsers (::device::RDM_pskel& /* RDM */,
             ::device::Art_Net_pskel& /* Art-Net */,
             ::device::sACN_pskel& /* sACN */,
             ::device::KiNET_pskel& /* KiNET */,
             ::device::PosiStageNet_pskel& /* PosiStageNet */,
             ::device::OpenSoundControl_pskel& /* OpenSoundControl */,
             ::device::CITP_pskel& /* CITP */);

    // Constructor.
    //
    Protocols_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::RDM_pskel* RDM_parser_;
    ::device::Art_Net_pskel* Art_Net_parser_;
    ::device::sACN_pskel* sACN_parser_;
    ::device::KiNET_pskel* KiNET_parser_;
    ::device::PosiStageNet_pskel* PosiStageNet_parser_;
    ::device::OpenSoundControl_pskel* OpenSoundControl_parser_;
    ::device::CITP_pskel* CITP_parser_;
  };

  class Art_Net_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_Art_Net ();
  };

  class sACN_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_sACN ();
  };

  class KiNET_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_KiNET ();
  };

  class PosiStageNet_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_PosiStageNet ();
  };

  class OpenSoundControl_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_OpenSoundControl ();
  };

  class CITP_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_CITP ();
  };

  class RDM_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    SoftwareVersionID ();

    virtual void
    ManufacturerID (const ::std::string&);

    virtual void
    DeviceModelID (const ::std::string&);

    virtual void
    post_RDM ();

    // Parser construction API.
    //
    void
    SoftwareVersionID_parser (::device::SoftwareVersionID_pskel&);

    void
    ManufacturerID_parser (::xml_schema::string_pskel&);

    void
    DeviceModelID_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::SoftwareVersionID_pskel& /* SoftwareVersionID */,
             ::xml_schema::string_pskel& /* ManufacturerID */,
             ::xml_schema::string_pskel& /* DeviceModelID */);

    // Constructor.
    //
    RDM_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::SoftwareVersionID_pskel* SoftwareVersionID_parser_;
    ::xml_schema::string_pskel* ManufacturerID_parser_;
    ::xml_schema::string_pskel* DeviceModelID_parser_;
  };

  class SoftwareVersionID_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    DMXPersonality ();

    virtual void
    Value (const ::std::string&);

    virtual void
    post_SoftwareVersionID ();

    // Parser construction API.
    //
    void
    DMXPersonality_parser (::device::DMXPersonality_pskel&);

    void
    Value_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::DMXPersonality_pskel& /* DMXPersonality */,
             ::xml_schema::string_pskel& /* Value */);

    // Constructor.
    //
    SoftwareVersionID_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::DMXPersonality_pskel* DMXPersonality_parser_;
    ::xml_schema::string_pskel* Value_parser_;
  };

  class DMXPersonality_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Value (const ::std::string&);

    virtual void
    DMXMode ();

    virtual void
    post_DMXPersonality ();

    // Parser construction API.
    //
    void
    Value_parser (::xml_schema::string_pskel&);

    void
    DMXMode_parser (::device::nametype_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Value */,
             ::device::nametype_pskel& /* DMXMode */);

    // Constructor.
    //
    DMXPersonality_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Value_parser_;
    ::device::nametype_pskel* DMXMode_parser_;
  };

  class AttributeDefinitions_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ActivationGroups ();

    virtual void
    FeatureGroups ();

    virtual void
    Attributes ();

    virtual void
    post_AttributeDefinitions ();

    // Parser construction API.
    //
    void
    ActivationGroups_parser (::device::ActivationGroups_pskel&);

    void
    FeatureGroups_parser (::device::FeatureGroups_pskel&);

    void
    Attributes_parser (::device::Attributes_pskel&);

    void
    parsers (::device::ActivationGroups_pskel& /* ActivationGroups */,
             ::device::FeatureGroups_pskel& /* FeatureGroups */,
             ::device::Attributes_pskel& /* Attributes */);

    // Constructor.
    //
    AttributeDefinitions_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::ActivationGroups_pskel* ActivationGroups_parser_;
    ::device::FeatureGroups_pskel* FeatureGroups_parser_;
    ::device::Attributes_pskel* Attributes_parser_;
  };

  class ActivationGroups_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ActivationGroup ();

    virtual void
    post_ActivationGroups ();

    // Parser construction API.
    //
    void
    ActivationGroup_parser (::device::ActivationGroup_pskel&);

    void
    parsers (::device::ActivationGroup_pskel& /* ActivationGroup */);

    // Constructor.
    //
    ActivationGroups_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::ActivationGroup_pskel* ActivationGroup_parser_;
  };

  class FeatureGroups_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FeatureGroup ();

    virtual void
    post_FeatureGroups ();

    // Parser construction API.
    //
    void
    FeatureGroup_parser (::device::FeatureGroup_pskel&);

    void
    parsers (::device::FeatureGroup_pskel& /* FeatureGroup */);

    // Constructor.
    //
    FeatureGroups_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::FeatureGroup_pskel* FeatureGroup_parser_;
  };

  class ActivationGroup_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    post_ActivationGroup ();

    // Parser construction API.
    //
    void
    Name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Name */);

    // Constructor.
    //
    ActivationGroup_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Name_parser_;
  };

  class FeatureGroup_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Feature ();

    virtual void
    Name (const ::std::string&);

    virtual void
    Pretty (const ::std::string&);

    virtual void
    post_FeatureGroup ();

    // Parser construction API.
    //
    void
    Feature_parser (::device::Feature_pskel&);

    void
    Name_parser (::xml_schema::string_pskel&);

    void
    Pretty_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::Feature_pskel& /* Feature */,
             ::xml_schema::string_pskel& /* Name */,
             ::xml_schema::string_pskel& /* Pretty */);

    // Constructor.
    //
    FeatureGroup_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::Feature_pskel* Feature_parser_;
    ::xml_schema::string_pskel* Name_parser_;
    ::xml_schema::string_pskel* Pretty_parser_;
  };

  class Feature_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    post_Feature ();

    // Parser construction API.
    //
    void
    Name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* Name */);

    // Constructor.
    //
    Feature_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* Name_parser_;
  };

  class Attributes_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Attribute ();

    virtual void
    post_Attributes ();

    // Parser construction API.
    //
    void
    Attribute_parser (::device::Attribute_pskel&);

    void
    parsers (::device::Attribute_pskel& /* Attribute */);

    // Constructor.
    //
    Attributes_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::device::Attribute_pskel* Attribute_parser_;
  };

  class Attribute_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name ();

    virtual void
    Pretty (const ::std::string&);

    virtual void
    ActivationGroup (const ::std::string&);

    virtual void
    PhysicalUnit ();

    virtual void
    Color ();

    virtual void
    Feature (const ::std::string&);

    virtual void
    MainAttribute (const ::std::string&);

    virtual void
    post_Attribute ();

    // Parser construction API.
    //
    void
    Name_parser (::device::AttributeEnum_pskel&);

    void
    Pretty_parser (::xml_schema::string_pskel&);

    void
    ActivationGroup_parser (::xml_schema::string_pskel&);

    void
    PhysicalUnit_parser (::device::PhysicalUnitEnum_pskel&);

    void
    Color_parser (::device::colorcietype_pskel&);

    void
    Feature_parser (::xml_schema::string_pskel&);

    void
    MainAttribute_parser (::xml_schema::string_pskel&);

    void
    parsers (::device::AttributeEnum_pskel& /* Name */,
             ::xml_schema::string_pskel& /* Pretty */,
             ::xml_schema::string_pskel& /* ActivationGroup */,
             ::device::PhysicalUnitEnum_pskel& /* PhysicalUnit */,
             ::device::colorcietype_pskel& /* Color */,
             ::xml_schema::string_pskel& /* Feature */,
             ::xml_schema::string_pskel& /* MainAttribute */);

    // Constructor.
    //
    Attribute_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::device::AttributeEnum_pskel* Name_parser_;
    ::xml_schema::string_pskel* Pretty_parser_;
    ::xml_schema::string_pskel* ActivationGroup_parser_;
    ::device::PhysicalUnitEnum_pskel* PhysicalUnit_parser_;
    ::device::colorcietype_pskel* Color_parser_;
    ::xml_schema::string_pskel* Feature_parser_;
    ::xml_schema::string_pskel* MainAttribute_parser_;
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GDTF_LIBRARIES_GDTF_PSKEL_H
