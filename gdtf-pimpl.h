// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef GDTF_LIBRARIES_GDTF_PIMPL_H
#define GDTF_LIBRARIES_GDTF_PIMPL_H

#include "gdtf-pskel.h"

namespace device
{
  class matrixtype_pimpl: public virtual matrixtype_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_matrixtype ();
  };

  class colorcietype_pimpl: public virtual colorcietype_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_colorcietype ();
  };

  class offsettype_pimpl: public virtual offsettype_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_offsettype ();
  };

  class dmxtype_pimpl: public virtual dmxtype_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_dmxtype ();
  };

  class dmxvalue_pimpl: public virtual dmxvalue_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_dmxvalue ();
  };

  class nametype_pimpl: public virtual nametype_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_nametype ();
  };

  class dataversion_pimpl: public virtual dataversion_pskel,
    public ::xml_schema::float_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_dataversion ();
  };

  class guidtype_pimpl: public virtual guidtype_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_guidtype ();
  };

  class PhysicalUnitEnum_pimpl: public virtual PhysicalUnitEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_PhysicalUnitEnum ();
  };

  class MasterEnum_pimpl: public virtual MasterEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_MasterEnum ();
  };

  class PrimitiveTypeEnum_pimpl: public virtual PrimitiveTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_PrimitiveTypeEnum ();
  };

  class LampTypeEnum_pimpl: public virtual LampTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_LampTypeEnum ();
  };

  class BeamTypeEnum_pimpl: public virtual BeamTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_BeamTypeEnum ();
  };

  class ColorSpaceEnum_pimpl: public virtual ColorSpaceEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_ColorSpaceEnum ();
  };

  class InterpolationToEnum_pimpl: public virtual InterpolationToEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_InterpolationToEnum ();
  };

  class SnapEnum_pimpl: public virtual SnapEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_SnapEnum ();
  };

  class YesNoEnum_pimpl: public virtual YesNoEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_YesNoEnum ();
  };

  class RelationTypesEnum_pimpl: public virtual RelationTypesEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RelationTypesEnum ();
  };

  class RDMParameterTypeEnum_pimpl: public virtual RDMParameterTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMParameterTypeEnum ();
  };

  class ThresholdOperatorEnum_pimpl: public virtual ThresholdOperatorEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_ThresholdOperatorEnum ();
  };

  class RDMParameterDataTypeEnum_pimpl: public virtual RDMParameterDataTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMParameterDataTypeEnum ();
  };

  class RDMParameterCommandEnum_pimpl: public virtual RDMParameterCommandEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMParameterCommandEnum ();
  };

  class RDMSensorTypeEnum_pimpl: public virtual RDMSensorTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMSensorTypeEnum ();
  };

  class RDMParameterSensorUnitEnum_pimpl: public virtual RDMParameterSensorUnitEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMParameterSensorUnitEnum ();
  };

  class RDMSlotInfoTypeEnum_pimpl: public virtual RDMSlotInfoTypeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMSlotInfoTypeEnum ();
  };

  class RDMSlotLabelIDEnum_pimpl: public virtual RDMSlotLabelIDEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMSlotLabelIDEnum ();
  };

  class RDMParameterSensorUnitPrefixEnum_pimpl: public virtual RDMParameterSensorUnitPrefixEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_RDMParameterSensorUnitPrefixEnum ();
  };

  class CESEnum_pimpl: public virtual CESEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_CESEnum ();
  };

  class AttributeEnum_pimpl: public virtual AttributeEnum_pskel,
    public ::xml_schema::string_pimpl
  {
    public:
    virtual void
    pre ();

    virtual void
    post_AttributeEnum ();
  };

  class GDTF_pimpl: public virtual GDTF_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    FixtureType ();

    virtual void
    DataVersion ();

    virtual void
    post_GDTF ();
  };

  class FixtureType_pimpl: public virtual FixtureType_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    AttributeDefinitions ();

    virtual void
    Wheels ();

    virtual void
    PhysicalDescriptions ();

    virtual void
    Models ();

    virtual void
    Geometries ();

    virtual void
    DMXModes ();

    virtual void
    Revisions ();

    virtual void
    FTPresets ();

    virtual void
    Protocols ();

    virtual void
    Name ();

    virtual void
    ShortName (const ::std::string&);

    virtual void
    LongName (const ::std::string&);

    virtual void
    Manufacturer (const ::std::string&);

    virtual void
    Description (const ::std::string&);

    virtual void
    FixtureTypeID ();

    virtual void
    Thumbnail (const ::std::string&);

    virtual void
    RefFT ();

    virtual void
    post_FixtureType ();
  };

  class Wheels_pimpl: public virtual Wheels_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Wheel ();

    virtual void
    post_Wheels ();
  };

  class Wheel_pimpl: public virtual Wheel_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Slot ();

    virtual void
    Name ();

    virtual void
    post_Wheel ();
  };

  class Slot_pimpl: public virtual Slot_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Facet ();

    virtual void
    Name ();

    virtual void
    Color ();

    virtual void
    Filter (const ::std::string&);

    virtual void
    MediaFileName (const ::std::string&);

    virtual void
    post_Slot ();
  };

  class Facet_pimpl: public virtual Facet_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Color ();

    virtual void
    Rotation (const ::std::string&);

    virtual void
    post_Facet ();
  };

  class Models_pimpl: public virtual Models_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Model ();

    virtual void
    post_Models ();
  };

  class Model_pimpl: public virtual Model_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Name ();

    virtual void
    Length (float);

    virtual void
    Width (float);

    virtual void
    Height (float);

    virtual void
    PrimitiveType ();

    virtual void
    File (const ::std::string&);

    virtual void
    post_Model ();
  };

  class Geometries_pimpl: public virtual Geometries_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    post_Geometries ();
  };

  class Geometry_pimpl: public virtual Geometry_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_Geometry ();
  };

  class Axis_pimpl: public virtual Axis_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_Axis ();
  };

  class FilterBeam_pimpl: public virtual FilterBeam_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterBeam ();
  };

  class FilterColor_pimpl: public virtual FilterColor_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterColor ();
  };

  class FilterGobo_pimpl: public virtual FilterGobo_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterGobo ();
  };

  class FilterShaper_pimpl: public virtual FilterShaper_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    post_FilterShaper ();
  };

  class Beam_pimpl: public virtual Beam_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Geometry ();

    virtual void
    Axis ();

    virtual void
    FilterBeam ();

    virtual void
    FilterColor ();

    virtual void
    FilterGobo ();

    virtual void
    FilterShaper ();

    virtual void
    Beam ();

    virtual void
    GeometryReference ();

    virtual void
    Name ();

    virtual void
    Model ();

    virtual void
    Position ();

    virtual void
    LampType ();

    virtual void
    PowerConsumption (float);

    virtual void
    LuminousFlux (float);

    virtual void
    ColorTemperature (float);

    virtual void
    BeamAngle (float);

    virtual void
    FieldAngle (float);

    virtual void
    BeamRadius (float);

    virtual void
    BeamType ();

    virtual void
    ColorRenderingIndex (long long);

    virtual void
    post_Beam ();
  };

  class GeometryReference_pimpl: public virtual GeometryReference_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Break ();

    virtual void
    Name ();

    virtual void
    Position ();

    virtual void
    Geometry ();

    virtual void
    Model ();

    virtual void
    post_GeometryReference ();
  };

  class Break_pimpl: public virtual Break_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXOffset (long long);

    virtual void
    DMXBreak (long long);

    virtual void
    post_Break ();
  };

  class DMXModes_pimpl: public virtual DMXModes_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXMode ();

    virtual void
    post_DMXModes ();
  };

  class DMXMode_pimpl: public virtual DMXMode_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXChannels ();

    virtual void
    Relations ();

    virtual void
    FTMacros ();

    virtual void
    Name ();

    virtual void
    Geometry ();

    virtual void
    post_DMXMode ();
  };

  class DMXChannels_pimpl: public virtual DMXChannels_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXChannel ();

    virtual void
    post_DMXChannels ();
  };

  class DMXChannel_pimpl: public virtual DMXChannel_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    LogicalChannel ();

    virtual void
    Name ();

    virtual void
    DMXBreak (long long);

    virtual void
    Offset ();

    virtual void
    Default ();

    virtual void
    Highlight ();

    virtual void
    Geometry (const ::std::string&);

    virtual void
    post_DMXChannel ();
  };

  class LogicalChannel_pimpl: public virtual LogicalChannel_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ChannelFunction ();

    virtual void
    Name ();

    virtual void
    Attribute ();

    virtual void
    Snap ();

    virtual void
    Master ();

    virtual void
    MibFade (float);

    virtual void
    DMXChangeTimeLimit (float);

    virtual void
    post_LogicalChannel ();
  };

  class ChannelFunction_pimpl: public virtual ChannelFunction_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ChannelSet ();

    virtual void
    Name (const ::std::string&);

    virtual void
    Attribute ();

    virtual void
    OriginalAttribute (const ::std::string&);

    virtual void
    DMXFrom ();

    virtual void
    PhysicalFrom (float);

    virtual void
    PhysicalTo (float);

    virtual void
    RealFade (float);

    virtual void
    Wheel (const ::std::string&);

    virtual void
    Emitter (const ::std::string&);

    virtual void
    Filter (const ::std::string&);

    virtual void
    ModeMaster (const ::std::string&);

    virtual void
    ModeFrom ();

    virtual void
    ModeTo ();

    virtual void
    post_ChannelFunction ();
  };

  class ChannelSet_pimpl: public virtual ChannelSet_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    DMXFrom ();

    virtual void
    DMXTo ();

    virtual void
    PhysicalFrom (float);

    virtual void
    PhysicalTo (float);

    virtual void
    WheelSlotIndex (long long);

    virtual void
    post_ChannelSet ();
  };

  class Relations_pimpl: public virtual Relations_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Relation ();

    virtual void
    post_Relations ();
  };

  class Relation_pimpl: public virtual Relation_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    Master (const ::std::string&);

    virtual void
    Follower (const ::std::string&);

    virtual void
    Type ();

    virtual void
    post_Relation ();
  };

  class Revisions_pimpl: public virtual Revisions_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Revision ();

    virtual void
    post_Revisions ();
  };

  class Revision_pimpl: public virtual Revision_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Text (const ::std::string&);

    virtual void
    Date (const ::xml_schema::date_time&);

    virtual void
    UserID (long long);

    virtual void
    post_Revision ();
  };

  class FTPresets_pimpl: public virtual FTPresets_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    FTPreset ();

    virtual void
    post_FTPresets ();
  };

  class FTPreset_pimpl: public virtual FTPreset_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_FTPreset ();
  };

  class FTMacros_pimpl: public virtual FTMacros_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    FTMacro ();

    virtual void
    post_FTMacros ();
  };

  class FTMacro_pimpl: public virtual FTMacro_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    MacroDMX ();

    virtual void
    MacroVisual ();

    virtual void
    Name (const ::std::string&);

    virtual void
    post_FTMacro ();
  };

  class MacroDMX_pimpl: public virtual MacroDMX_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXStep ();

    virtual void
    post_MacroDMX ();
  };

  class DMXStep_pimpl: public virtual DMXStep_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXValue ();

    virtual void
    Duration (long long);

    virtual void
    post_DMXStep ();
  };

  class DMXValue_pimpl: public virtual DMXValue_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Value ();

    virtual void
    DMXChannel (const ::std::string&);

    virtual void
    post_DMXValue ();
  };

  class MacroVisual_pimpl: public virtual MacroVisual_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    VisualStep ();

    virtual void
    post_MacroVisual ();
  };

  class VisualStep_pimpl: public virtual VisualStep_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    VisualValue ();

    virtual void
    Duration (long long);

    virtual void
    Fade (const ::std::string&);

    virtual void
    Delay (const ::std::string&);

    virtual void
    post_VisualStep ();
  };

  class VisualValue_pimpl: public virtual VisualValue_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Value (const ::std::string&);

    virtual void
    ChannelFunction (const ::std::string&);

    virtual void
    post_VisualValue ();
  };

  class PhysicalDescriptions_pimpl: public virtual PhysicalDescriptions_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Emitters ();

    virtual void
    Filters ();

    virtual void
    ColorSpace ();

    virtual void
    DMXProfiles ();

    virtual void
    CRIs ();

    virtual void
    post_PhysicalDescriptions ();
  };

  class Emitters_pimpl: public virtual Emitters_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Emitter ();

    virtual void
    post_Emitters ();
  };

  class Emitter_pimpl: public virtual Emitter_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Measurement ();

    virtual void
    Name ();

    virtual void
    Color ();

    virtual void
    DominantWaveLength (float);

    virtual void
    DiodePart (const ::std::string&);

    virtual void
    post_Emitter ();
  };

  class Filters_pimpl: public virtual Filters_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Filter ();

    virtual void
    post_Filters ();
  };

  class Filter_pimpl: public virtual Filter_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Measurement ();

    virtual void
    Name ();

    virtual void
    Color ();

    virtual void
    post_Filter ();
  };

  class Measurement_pimpl: public virtual Measurement_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    MeasurementPoint ();

    virtual void
    Physical (float);

    virtual void
    LuminousIntensity (float);

    virtual void
    Transmission (float);

    virtual void
    InterpolationTo ();

    virtual void
    post_Measurement ();
  };

  class MeasurementPoint_pimpl: public virtual MeasurementPoint_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    WaveLength (float);

    virtual void
    Energy (float);

    virtual void
    post_MeasurementPoint ();
  };

  class ColorSpace_pimpl: public virtual ColorSpace_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ColorSpace ();

    virtual void
    Red ();

    virtual void
    Green ();

    virtual void
    Blue ();

    virtual void
    WhitePoint ();

    virtual void
    post_ColorSpace ();
  };

  class DMXProfiles_pimpl: public virtual DMXProfiles_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXProfile ();

    virtual void
    post_DMXProfiles ();
  };

  class DMXProfile_pimpl: public virtual DMXProfile_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_DMXProfile ();
  };

  class CRIs_pimpl: public virtual CRIs_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    CRI ();

    virtual void
    post_CRIs ();
  };

  class CRI_pimpl: public virtual CRI_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    CES ();

    virtual void
    ColorRenderingIndex (long long);

    virtual void
    post_CRI ();
  };

  class Protocols_pimpl: public virtual Protocols_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    RDM ();

    virtual void
    Art_Net ();

    virtual void
    sACN ();

    virtual void
    KiNET ();

    virtual void
    PosiStageNet ();

    virtual void
    OpenSoundControl ();

    virtual void
    CITP ();

    virtual void
    post_Protocols ();
  };

  class Art_Net_pimpl: public virtual Art_Net_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_Art_Net ();
  };

  class sACN_pimpl: public virtual sACN_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_sACN ();
  };

  class KiNET_pimpl: public virtual KiNET_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_KiNET ();
  };

  class PosiStageNet_pimpl: public virtual PosiStageNet_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_PosiStageNet ();
  };

  class OpenSoundControl_pimpl: public virtual OpenSoundControl_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_OpenSoundControl ();
  };

  class CITP_pimpl: public virtual CITP_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    post_CITP ();
  };

  class RDM_pimpl: public virtual RDM_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    SoftwareVersionID ();

    virtual void
    ManufacturerID (const ::std::string&);

    virtual void
    DeviceModelID (const ::std::string&);

    virtual void
    post_RDM ();
  };

  class SoftwareVersionID_pimpl: public virtual SoftwareVersionID_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    DMXPersonality ();

    virtual void
    Value (const ::std::string&);

    virtual void
    post_SoftwareVersionID ();
  };

  class DMXPersonality_pimpl: public virtual DMXPersonality_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Value (const ::std::string&);

    virtual void
    DMXMode ();

    virtual void
    post_DMXPersonality ();
  };

  class AttributeDefinitions_pimpl: public virtual AttributeDefinitions_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ActivationGroups ();

    virtual void
    FeatureGroups ();

    virtual void
    Attributes ();

    virtual void
    post_AttributeDefinitions ();
  };

  class ActivationGroups_pimpl: public virtual ActivationGroups_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    ActivationGroup ();

    virtual void
    post_ActivationGroups ();
  };

  class FeatureGroups_pimpl: public virtual FeatureGroups_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    FeatureGroup ();

    virtual void
    post_FeatureGroups ();
  };

  class ActivationGroup_pimpl: public virtual ActivationGroup_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    post_ActivationGroup ();
  };

  class FeatureGroup_pimpl: public virtual FeatureGroup_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Feature ();

    virtual void
    Name (const ::std::string&);

    virtual void
    Pretty (const ::std::string&);

    virtual void
    post_FeatureGroup ();
  };

  class Feature_pimpl: public virtual Feature_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Name (const ::std::string&);

    virtual void
    post_Feature ();
  };

  class Attributes_pimpl: public virtual Attributes_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Attribute ();

    virtual void
    post_Attributes ();
  };

  class Attribute_pimpl: public virtual Attribute_pskel
  {
    public:
    virtual void
    pre ();

    virtual void
    Name ();

    virtual void
    Pretty (const ::std::string&);

    virtual void
    ActivationGroup (const ::std::string&);

    virtual void
    PhysicalUnit ();

    virtual void
    Color ();

    virtual void
    Feature (const ::std::string&);

    virtual void
    MainAttribute (const ::std::string&);

    virtual void
    post_Attribute ();
  };
}

#endif // GDTF_LIBRARIES_GDTF_PIMPL_H
