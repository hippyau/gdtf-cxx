// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "gdtf-pskel.h"

namespace device
{
  // GDTF_pskel
  //

  void GDTF_pskel::
  FixtureType_parser (::device::FixtureType_pskel& p)
  {
    this->FixtureType_parser_ = &p;
  }

  void GDTF_pskel::
  DataVersion_parser (::device::dataversion_pskel& p)
  {
    this->DataVersion_parser_ = &p;
  }

  void GDTF_pskel::
  parsers (::device::FixtureType_pskel& FixtureType,
           ::device::dataversion_pskel& DataVersion)
  {
    this->FixtureType_parser_ = &FixtureType;
    this->DataVersion_parser_ = &DataVersion;
  }

  GDTF_pskel::
  GDTF_pskel ()
  : FixtureType_parser_ (0),
    DataVersion_parser_ (0)
  {
  }

  // FixtureType_pskel
  //

  void FixtureType_pskel::
  AttributeDefinitions_parser (::device::AttributeDefinitions_pskel& p)
  {
    this->AttributeDefinitions_parser_ = &p;
  }

  void FixtureType_pskel::
  Wheels_parser (::device::Wheels_pskel& p)
  {
    this->Wheels_parser_ = &p;
  }

  void FixtureType_pskel::
  PhysicalDescriptions_parser (::device::PhysicalDescriptions_pskel& p)
  {
    this->PhysicalDescriptions_parser_ = &p;
  }

  void FixtureType_pskel::
  Models_parser (::device::Models_pskel& p)
  {
    this->Models_parser_ = &p;
  }

  void FixtureType_pskel::
  Geometries_parser (::device::Geometries_pskel& p)
  {
    this->Geometries_parser_ = &p;
  }

  void FixtureType_pskel::
  DMXModes_parser (::device::DMXModes_pskel& p)
  {
    this->DMXModes_parser_ = &p;
  }

  void FixtureType_pskel::
  Revisions_parser (::device::Revisions_pskel& p)
  {
    this->Revisions_parser_ = &p;
  }

  void FixtureType_pskel::
  FTPresets_parser (::device::FTPresets_pskel& p)
  {
    this->FTPresets_parser_ = &p;
  }

  void FixtureType_pskel::
  Protocols_parser (::device::Protocols_pskel& p)
  {
    this->Protocols_parser_ = &p;
  }

  void FixtureType_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FixtureType_pskel::
  ShortName_parser (::xml_schema::string_pskel& p)
  {
    this->ShortName_parser_ = &p;
  }

  void FixtureType_pskel::
  LongName_parser (::xml_schema::string_pskel& p)
  {
    this->LongName_parser_ = &p;
  }

  void FixtureType_pskel::
  Manufacturer_parser (::xml_schema::string_pskel& p)
  {
    this->Manufacturer_parser_ = &p;
  }

  void FixtureType_pskel::
  Description_parser (::xml_schema::string_pskel& p)
  {
    this->Description_parser_ = &p;
  }

  void FixtureType_pskel::
  FixtureTypeID_parser (::device::guidtype_pskel& p)
  {
    this->FixtureTypeID_parser_ = &p;
  }

  void FixtureType_pskel::
  Thumbnail_parser (::xml_schema::string_pskel& p)
  {
    this->Thumbnail_parser_ = &p;
  }

  void FixtureType_pskel::
  RefFT_parser (::device::guidtype_pskel& p)
  {
    this->RefFT_parser_ = &p;
  }

  void FixtureType_pskel::
  parsers (::device::AttributeDefinitions_pskel& AttributeDefinitions,
           ::device::Wheels_pskel& Wheels,
           ::device::PhysicalDescriptions_pskel& PhysicalDescriptions,
           ::device::Models_pskel& Models,
           ::device::Geometries_pskel& Geometries,
           ::device::DMXModes_pskel& DMXModes,
           ::device::Revisions_pskel& Revisions,
           ::device::FTPresets_pskel& FTPresets,
           ::device::Protocols_pskel& Protocols,
           ::device::nametype_pskel& Name,
           ::xml_schema::string_pskel& ShortName,
           ::xml_schema::string_pskel& LongName,
           ::xml_schema::string_pskel& Manufacturer,
           ::xml_schema::string_pskel& Description,
           ::device::guidtype_pskel& FixtureTypeID,
           ::xml_schema::string_pskel& Thumbnail,
           ::device::guidtype_pskel& RefFT)
  {
    this->AttributeDefinitions_parser_ = &AttributeDefinitions;
    this->Wheels_parser_ = &Wheels;
    this->PhysicalDescriptions_parser_ = &PhysicalDescriptions;
    this->Models_parser_ = &Models;
    this->Geometries_parser_ = &Geometries;
    this->DMXModes_parser_ = &DMXModes;
    this->Revisions_parser_ = &Revisions;
    this->FTPresets_parser_ = &FTPresets;
    this->Protocols_parser_ = &Protocols;
    this->Name_parser_ = &Name;
    this->ShortName_parser_ = &ShortName;
    this->LongName_parser_ = &LongName;
    this->Manufacturer_parser_ = &Manufacturer;
    this->Description_parser_ = &Description;
    this->FixtureTypeID_parser_ = &FixtureTypeID;
    this->Thumbnail_parser_ = &Thumbnail;
    this->RefFT_parser_ = &RefFT;
  }

  FixtureType_pskel::
  FixtureType_pskel ()
  : AttributeDefinitions_parser_ (0),
    Wheels_parser_ (0),
    PhysicalDescriptions_parser_ (0),
    Models_parser_ (0),
    Geometries_parser_ (0),
    DMXModes_parser_ (0),
    Revisions_parser_ (0),
    FTPresets_parser_ (0),
    Protocols_parser_ (0),
    Name_parser_ (0),
    ShortName_parser_ (0),
    LongName_parser_ (0),
    Manufacturer_parser_ (0),
    Description_parser_ (0),
    FixtureTypeID_parser_ (0),
    Thumbnail_parser_ (0),
    RefFT_parser_ (0)
  {
  }

  // Wheels_pskel
  //

  void Wheels_pskel::
  Wheel_parser (::device::Wheel_pskel& p)
  {
    this->Wheel_parser_ = &p;
  }

  void Wheels_pskel::
  parsers (::device::Wheel_pskel& Wheel)
  {
    this->Wheel_parser_ = &Wheel;
  }

  Wheels_pskel::
  Wheels_pskel ()
  : Wheel_parser_ (0)
  {
  }

  // Wheel_pskel
  //

  void Wheel_pskel::
  Slot_parser (::device::Slot_pskel& p)
  {
    this->Slot_parser_ = &p;
  }

  void Wheel_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Wheel_pskel::
  parsers (::device::Slot_pskel& Slot,
           ::device::nametype_pskel& Name)
  {
    this->Slot_parser_ = &Slot;
    this->Name_parser_ = &Name;
  }

  Wheel_pskel::
  Wheel_pskel ()
  : Slot_parser_ (0),
    Name_parser_ (0)
  {
  }

  // Slot_pskel
  //

  void Slot_pskel::
  Facet_parser (::device::Facet_pskel& p)
  {
    this->Facet_parser_ = &p;
  }

  void Slot_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Slot_pskel::
  Color_parser (::device::colorcietype_pskel& p)
  {
    this->Color_parser_ = &p;
  }

  void Slot_pskel::
  Filter_parser (::xml_schema::string_pskel& p)
  {
    this->Filter_parser_ = &p;
  }

  void Slot_pskel::
  MediaFileName_parser (::xml_schema::string_pskel& p)
  {
    this->MediaFileName_parser_ = &p;
  }

  void Slot_pskel::
  parsers (::device::Facet_pskel& Facet,
           ::device::nametype_pskel& Name,
           ::device::colorcietype_pskel& Color,
           ::xml_schema::string_pskel& Filter,
           ::xml_schema::string_pskel& MediaFileName)
  {
    this->Facet_parser_ = &Facet;
    this->Name_parser_ = &Name;
    this->Color_parser_ = &Color;
    this->Filter_parser_ = &Filter;
    this->MediaFileName_parser_ = &MediaFileName;
  }

  Slot_pskel::
  Slot_pskel ()
  : Facet_parser_ (0),
    Name_parser_ (0),
    Color_parser_ (0),
    Filter_parser_ (0),
    MediaFileName_parser_ (0)
  {
  }

  // Facet_pskel
  //

  void Facet_pskel::
  Color_parser (::device::colorcietype_pskel& p)
  {
    this->Color_parser_ = &p;
  }

  void Facet_pskel::
  Rotation_parser (::xml_schema::string_pskel& p)
  {
    this->Rotation_parser_ = &p;
  }

  void Facet_pskel::
  parsers (::device::colorcietype_pskel& Color,
           ::xml_schema::string_pskel& Rotation)
  {
    this->Color_parser_ = &Color;
    this->Rotation_parser_ = &Rotation;
  }

  Facet_pskel::
  Facet_pskel ()
  : Color_parser_ (0),
    Rotation_parser_ (0)
  {
  }

  // Models_pskel
  //

  void Models_pskel::
  Model_parser (::device::Model_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void Models_pskel::
  parsers (::device::Model_pskel& Model)
  {
    this->Model_parser_ = &Model;
  }

  Models_pskel::
  Models_pskel ()
  : Model_parser_ (0)
  {
  }

  // Model_pskel
  //

  void Model_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Model_pskel::
  Length_parser (::xml_schema::float_pskel& p)
  {
    this->Length_parser_ = &p;
  }

  void Model_pskel::
  Width_parser (::xml_schema::float_pskel& p)
  {
    this->Width_parser_ = &p;
  }

  void Model_pskel::
  Height_parser (::xml_schema::float_pskel& p)
  {
    this->Height_parser_ = &p;
  }

  void Model_pskel::
  PrimitiveType_parser (::device::PrimitiveTypeEnum_pskel& p)
  {
    this->PrimitiveType_parser_ = &p;
  }

  void Model_pskel::
  File_parser (::xml_schema::string_pskel& p)
  {
    this->File_parser_ = &p;
  }

  void Model_pskel::
  parsers (::device::nametype_pskel& Name,
           ::xml_schema::float_pskel& Length,
           ::xml_schema::float_pskel& Width,
           ::xml_schema::float_pskel& Height,
           ::device::PrimitiveTypeEnum_pskel& PrimitiveType,
           ::xml_schema::string_pskel& File)
  {
    this->Name_parser_ = &Name;
    this->Length_parser_ = &Length;
    this->Width_parser_ = &Width;
    this->Height_parser_ = &Height;
    this->PrimitiveType_parser_ = &PrimitiveType;
    this->File_parser_ = &File;
  }

  Model_pskel::
  Model_pskel ()
  : Name_parser_ (0),
    Length_parser_ (0),
    Width_parser_ (0),
    Height_parser_ (0),
    PrimitiveType_parser_ (0),
    File_parser_ (0)
  {
  }

  // Geometries_pskel
  //

  void Geometries_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void Geometries_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void Geometries_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void Geometries_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void Geometries_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void Geometries_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void Geometries_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void Geometries_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void Geometries_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
  }

  Geometries_pskel::
  Geometries_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0)
  {
  }

  // Geometry_pskel
  //

  void Geometry_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void Geometry_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void Geometry_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void Geometry_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void Geometry_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void Geometry_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void Geometry_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void Geometry_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void Geometry_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Geometry_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void Geometry_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void Geometry_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
  }

  Geometry_pskel::
  Geometry_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0)
  {
  }

  // Axis_pskel
  //

  void Axis_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void Axis_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void Axis_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void Axis_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void Axis_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void Axis_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void Axis_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void Axis_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void Axis_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Axis_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void Axis_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void Axis_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
  }

  Axis_pskel::
  Axis_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0)
  {
  }

  // FilterBeam_pskel
  //

  void FilterBeam_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void FilterBeam_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void FilterBeam_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void FilterBeam_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void FilterBeam_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void FilterBeam_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void FilterBeam_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void FilterBeam_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void FilterBeam_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FilterBeam_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void FilterBeam_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void FilterBeam_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
  }

  FilterBeam_pskel::
  FilterBeam_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0)
  {
  }

  // FilterColor_pskel
  //

  void FilterColor_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void FilterColor_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void FilterColor_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void FilterColor_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void FilterColor_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void FilterColor_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void FilterColor_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void FilterColor_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void FilterColor_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FilterColor_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void FilterColor_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void FilterColor_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
  }

  FilterColor_pskel::
  FilterColor_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0)
  {
  }

  // FilterGobo_pskel
  //

  void FilterGobo_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void FilterGobo_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void FilterGobo_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void FilterGobo_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void FilterGobo_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void FilterGobo_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void FilterGobo_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void FilterGobo_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void FilterGobo_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FilterGobo_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void FilterGobo_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void FilterGobo_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
  }

  FilterGobo_pskel::
  FilterGobo_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0)
  {
  }

  // FilterShaper_pskel
  //

  void FilterShaper_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void FilterShaper_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void FilterShaper_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void FilterShaper_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void FilterShaper_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void FilterShaper_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void FilterShaper_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void FilterShaper_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void FilterShaper_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FilterShaper_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void FilterShaper_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void FilterShaper_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
  }

  FilterShaper_pskel::
  FilterShaper_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0)
  {
  }

  // Beam_pskel
  //

  void Beam_pskel::
  Geometry_parser (::device::Geometry_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void Beam_pskel::
  Axis_parser (::device::Axis_pskel& p)
  {
    this->Axis_parser_ = &p;
  }

  void Beam_pskel::
  FilterBeam_parser (::device::FilterBeam_pskel& p)
  {
    this->FilterBeam_parser_ = &p;
  }

  void Beam_pskel::
  FilterColor_parser (::device::FilterColor_pskel& p)
  {
    this->FilterColor_parser_ = &p;
  }

  void Beam_pskel::
  FilterGobo_parser (::device::FilterGobo_pskel& p)
  {
    this->FilterGobo_parser_ = &p;
  }

  void Beam_pskel::
  FilterShaper_parser (::device::FilterShaper_pskel& p)
  {
    this->FilterShaper_parser_ = &p;
  }

  void Beam_pskel::
  Beam_parser (::device::Beam_pskel& p)
  {
    this->Beam_parser_ = &p;
  }

  void Beam_pskel::
  GeometryReference_parser (::device::GeometryReference_pskel& p)
  {
    this->GeometryReference_parser_ = &p;
  }

  void Beam_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Beam_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void Beam_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void Beam_pskel::
  LampType_parser (::device::LampTypeEnum_pskel& p)
  {
    this->LampType_parser_ = &p;
  }

  void Beam_pskel::
  PowerConsumption_parser (::xml_schema::float_pskel& p)
  {
    this->PowerConsumption_parser_ = &p;
  }

  void Beam_pskel::
  LuminousFlux_parser (::xml_schema::float_pskel& p)
  {
    this->LuminousFlux_parser_ = &p;
  }

  void Beam_pskel::
  ColorTemperature_parser (::xml_schema::float_pskel& p)
  {
    this->ColorTemperature_parser_ = &p;
  }

  void Beam_pskel::
  BeamAngle_parser (::xml_schema::float_pskel& p)
  {
    this->BeamAngle_parser_ = &p;
  }

  void Beam_pskel::
  FieldAngle_parser (::xml_schema::float_pskel& p)
  {
    this->FieldAngle_parser_ = &p;
  }

  void Beam_pskel::
  BeamRadius_parser (::xml_schema::float_pskel& p)
  {
    this->BeamRadius_parser_ = &p;
  }

  void Beam_pskel::
  BeamType_parser (::device::BeamTypeEnum_pskel& p)
  {
    this->BeamType_parser_ = &p;
  }

  void Beam_pskel::
  ColorRenderingIndex_parser (::xml_schema::integer_pskel& p)
  {
    this->ColorRenderingIndex_parser_ = &p;
  }

  void Beam_pskel::
  parsers (::device::Geometry_pskel& Geometry,
           ::device::Axis_pskel& Axis,
           ::device::FilterBeam_pskel& FilterBeam,
           ::device::FilterColor_pskel& FilterColor,
           ::device::FilterGobo_pskel& FilterGobo,
           ::device::FilterShaper_pskel& FilterShaper,
           ::device::Beam_pskel& Beam,
           ::device::GeometryReference_pskel& GeometryReference,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Model,
           ::device::matrixtype_pskel& Position,
           ::device::LampTypeEnum_pskel& LampType,
           ::xml_schema::float_pskel& PowerConsumption,
           ::xml_schema::float_pskel& LuminousFlux,
           ::xml_schema::float_pskel& ColorTemperature,
           ::xml_schema::float_pskel& BeamAngle,
           ::xml_schema::float_pskel& FieldAngle,
           ::xml_schema::float_pskel& BeamRadius,
           ::device::BeamTypeEnum_pskel& BeamType,
           ::xml_schema::integer_pskel& ColorRenderingIndex)
  {
    this->Geometry_parser_ = &Geometry;
    this->Axis_parser_ = &Axis;
    this->FilterBeam_parser_ = &FilterBeam;
    this->FilterColor_parser_ = &FilterColor;
    this->FilterGobo_parser_ = &FilterGobo;
    this->FilterShaper_parser_ = &FilterShaper;
    this->Beam_parser_ = &Beam;
    this->GeometryReference_parser_ = &GeometryReference;
    this->Name_parser_ = &Name;
    this->Model_parser_ = &Model;
    this->Position_parser_ = &Position;
    this->LampType_parser_ = &LampType;
    this->PowerConsumption_parser_ = &PowerConsumption;
    this->LuminousFlux_parser_ = &LuminousFlux;
    this->ColorTemperature_parser_ = &ColorTemperature;
    this->BeamAngle_parser_ = &BeamAngle;
    this->FieldAngle_parser_ = &FieldAngle;
    this->BeamRadius_parser_ = &BeamRadius;
    this->BeamType_parser_ = &BeamType;
    this->ColorRenderingIndex_parser_ = &ColorRenderingIndex;
  }

  Beam_pskel::
  Beam_pskel ()
  : Geometry_parser_ (0),
    Axis_parser_ (0),
    FilterBeam_parser_ (0),
    FilterColor_parser_ (0),
    FilterGobo_parser_ (0),
    FilterShaper_parser_ (0),
    Beam_parser_ (0),
    GeometryReference_parser_ (0),
    Name_parser_ (0),
    Model_parser_ (0),
    Position_parser_ (0),
    LampType_parser_ (0),
    PowerConsumption_parser_ (0),
    LuminousFlux_parser_ (0),
    ColorTemperature_parser_ (0),
    BeamAngle_parser_ (0),
    FieldAngle_parser_ (0),
    BeamRadius_parser_ (0),
    BeamType_parser_ (0),
    ColorRenderingIndex_parser_ (0)
  {
  }

  // GeometryReference_pskel
  //

  void GeometryReference_pskel::
  Break_parser (::device::Break_pskel& p)
  {
    this->Break_parser_ = &p;
  }

  void GeometryReference_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void GeometryReference_pskel::
  Position_parser (::device::matrixtype_pskel& p)
  {
    this->Position_parser_ = &p;
  }

  void GeometryReference_pskel::
  Geometry_parser (::device::nametype_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void GeometryReference_pskel::
  Model_parser (::device::nametype_pskel& p)
  {
    this->Model_parser_ = &p;
  }

  void GeometryReference_pskel::
  parsers (::device::Break_pskel& Break,
           ::device::nametype_pskel& Name,
           ::device::matrixtype_pskel& Position,
           ::device::nametype_pskel& Geometry,
           ::device::nametype_pskel& Model)
  {
    this->Break_parser_ = &Break;
    this->Name_parser_ = &Name;
    this->Position_parser_ = &Position;
    this->Geometry_parser_ = &Geometry;
    this->Model_parser_ = &Model;
  }

  GeometryReference_pskel::
  GeometryReference_pskel ()
  : Break_parser_ (0),
    Name_parser_ (0),
    Position_parser_ (0),
    Geometry_parser_ (0),
    Model_parser_ (0)
  {
  }

  // Break_pskel
  //

  void Break_pskel::
  DMXOffset_parser (::xml_schema::integer_pskel& p)
  {
    this->DMXOffset_parser_ = &p;
  }

  void Break_pskel::
  DMXBreak_parser (::xml_schema::integer_pskel& p)
  {
    this->DMXBreak_parser_ = &p;
  }

  void Break_pskel::
  parsers (::xml_schema::integer_pskel& DMXOffset,
           ::xml_schema::integer_pskel& DMXBreak)
  {
    this->DMXOffset_parser_ = &DMXOffset;
    this->DMXBreak_parser_ = &DMXBreak;
  }

  Break_pskel::
  Break_pskel ()
  : DMXOffset_parser_ (0),
    DMXBreak_parser_ (0)
  {
  }

  // DMXModes_pskel
  //

  void DMXModes_pskel::
  DMXMode_parser (::device::DMXMode_pskel& p)
  {
    this->DMXMode_parser_ = &p;
  }

  void DMXModes_pskel::
  parsers (::device::DMXMode_pskel& DMXMode)
  {
    this->DMXMode_parser_ = &DMXMode;
  }

  DMXModes_pskel::
  DMXModes_pskel ()
  : DMXMode_parser_ (0)
  {
  }

  // DMXMode_pskel
  //

  void DMXMode_pskel::
  DMXChannels_parser (::device::DMXChannels_pskel& p)
  {
    this->DMXChannels_parser_ = &p;
  }

  void DMXMode_pskel::
  Relations_parser (::device::Relations_pskel& p)
  {
    this->Relations_parser_ = &p;
  }

  void DMXMode_pskel::
  FTMacros_parser (::device::FTMacros_pskel& p)
  {
    this->FTMacros_parser_ = &p;
  }

  void DMXMode_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void DMXMode_pskel::
  Geometry_parser (::device::nametype_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void DMXMode_pskel::
  parsers (::device::DMXChannels_pskel& DMXChannels,
           ::device::Relations_pskel& Relations,
           ::device::FTMacros_pskel& FTMacros,
           ::device::nametype_pskel& Name,
           ::device::nametype_pskel& Geometry)
  {
    this->DMXChannels_parser_ = &DMXChannels;
    this->Relations_parser_ = &Relations;
    this->FTMacros_parser_ = &FTMacros;
    this->Name_parser_ = &Name;
    this->Geometry_parser_ = &Geometry;
  }

  DMXMode_pskel::
  DMXMode_pskel ()
  : DMXChannels_parser_ (0),
    Relations_parser_ (0),
    FTMacros_parser_ (0),
    Name_parser_ (0),
    Geometry_parser_ (0)
  {
  }

  // DMXChannels_pskel
  //

  void DMXChannels_pskel::
  DMXChannel_parser (::device::DMXChannel_pskel& p)
  {
    this->DMXChannel_parser_ = &p;
  }

  void DMXChannels_pskel::
  parsers (::device::DMXChannel_pskel& DMXChannel)
  {
    this->DMXChannel_parser_ = &DMXChannel;
  }

  DMXChannels_pskel::
  DMXChannels_pskel ()
  : DMXChannel_parser_ (0)
  {
  }

  // DMXChannel_pskel
  //

  void DMXChannel_pskel::
  LogicalChannel_parser (::device::LogicalChannel_pskel& p)
  {
    this->LogicalChannel_parser_ = &p;
  }

  void DMXChannel_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void DMXChannel_pskel::
  DMXBreak_parser (::xml_schema::integer_pskel& p)
  {
    this->DMXBreak_parser_ = &p;
  }

  void DMXChannel_pskel::
  Offset_parser (::device::offsettype_pskel& p)
  {
    this->Offset_parser_ = &p;
  }

  void DMXChannel_pskel::
  Default_parser (::device::dmxtype_pskel& p)
  {
    this->Default_parser_ = &p;
  }

  void DMXChannel_pskel::
  Highlight_parser (::device::dmxtype_pskel& p)
  {
    this->Highlight_parser_ = &p;
  }

  void DMXChannel_pskel::
  Geometry_parser (::xml_schema::string_pskel& p)
  {
    this->Geometry_parser_ = &p;
  }

  void DMXChannel_pskel::
  parsers (::device::LogicalChannel_pskel& LogicalChannel,
           ::device::nametype_pskel& Name,
           ::xml_schema::integer_pskel& DMXBreak,
           ::device::offsettype_pskel& Offset,
           ::device::dmxtype_pskel& Default,
           ::device::dmxtype_pskel& Highlight,
           ::xml_schema::string_pskel& Geometry)
  {
    this->LogicalChannel_parser_ = &LogicalChannel;
    this->Name_parser_ = &Name;
    this->DMXBreak_parser_ = &DMXBreak;
    this->Offset_parser_ = &Offset;
    this->Default_parser_ = &Default;
    this->Highlight_parser_ = &Highlight;
    this->Geometry_parser_ = &Geometry;
  }

  DMXChannel_pskel::
  DMXChannel_pskel ()
  : LogicalChannel_parser_ (0),
    Name_parser_ (0),
    DMXBreak_parser_ (0),
    Offset_parser_ (0),
    Default_parser_ (0),
    Highlight_parser_ (0),
    Geometry_parser_ (0)
  {
  }

  // LogicalChannel_pskel
  //

  void LogicalChannel_pskel::
  ChannelFunction_parser (::device::ChannelFunction_pskel& p)
  {
    this->ChannelFunction_parser_ = &p;
  }

  void LogicalChannel_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void LogicalChannel_pskel::
  Attribute_parser (::device::AttributeEnum_pskel& p)
  {
    this->Attribute_parser_ = &p;
  }

  void LogicalChannel_pskel::
  Snap_parser (::device::SnapEnum_pskel& p)
  {
    this->Snap_parser_ = &p;
  }

  void LogicalChannel_pskel::
  Master_parser (::device::MasterEnum_pskel& p)
  {
    this->Master_parser_ = &p;
  }

  void LogicalChannel_pskel::
  MibFade_parser (::xml_schema::float_pskel& p)
  {
    this->MibFade_parser_ = &p;
  }

  void LogicalChannel_pskel::
  DMXChangeTimeLimit_parser (::xml_schema::float_pskel& p)
  {
    this->DMXChangeTimeLimit_parser_ = &p;
  }

  void LogicalChannel_pskel::
  parsers (::device::ChannelFunction_pskel& ChannelFunction,
           ::device::nametype_pskel& Name,
           ::device::AttributeEnum_pskel& Attribute,
           ::device::SnapEnum_pskel& Snap,
           ::device::MasterEnum_pskel& Master,
           ::xml_schema::float_pskel& MibFade,
           ::xml_schema::float_pskel& DMXChangeTimeLimit)
  {
    this->ChannelFunction_parser_ = &ChannelFunction;
    this->Name_parser_ = &Name;
    this->Attribute_parser_ = &Attribute;
    this->Snap_parser_ = &Snap;
    this->Master_parser_ = &Master;
    this->MibFade_parser_ = &MibFade;
    this->DMXChangeTimeLimit_parser_ = &DMXChangeTimeLimit;
  }

  LogicalChannel_pskel::
  LogicalChannel_pskel ()
  : ChannelFunction_parser_ (0),
    Name_parser_ (0),
    Attribute_parser_ (0),
    Snap_parser_ (0),
    Master_parser_ (0),
    MibFade_parser_ (0),
    DMXChangeTimeLimit_parser_ (0)
  {
  }

  // ChannelFunction_pskel
  //

  void ChannelFunction_pskel::
  ChannelSet_parser (::device::ChannelSet_pskel& p)
  {
    this->ChannelSet_parser_ = &p;
  }

  void ChannelFunction_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void ChannelFunction_pskel::
  Attribute_parser (::device::AttributeEnum_pskel& p)
  {
    this->Attribute_parser_ = &p;
  }

  void ChannelFunction_pskel::
  OriginalAttribute_parser (::xml_schema::string_pskel& p)
  {
    this->OriginalAttribute_parser_ = &p;
  }

  void ChannelFunction_pskel::
  DMXFrom_parser (::device::dmxtype_pskel& p)
  {
    this->DMXFrom_parser_ = &p;
  }

  void ChannelFunction_pskel::
  PhysicalFrom_parser (::xml_schema::float_pskel& p)
  {
    this->PhysicalFrom_parser_ = &p;
  }

  void ChannelFunction_pskel::
  PhysicalTo_parser (::xml_schema::float_pskel& p)
  {
    this->PhysicalTo_parser_ = &p;
  }

  void ChannelFunction_pskel::
  RealFade_parser (::xml_schema::float_pskel& p)
  {
    this->RealFade_parser_ = &p;
  }

  void ChannelFunction_pskel::
  Wheel_parser (::xml_schema::string_pskel& p)
  {
    this->Wheel_parser_ = &p;
  }

  void ChannelFunction_pskel::
  Emitter_parser (::xml_schema::string_pskel& p)
  {
    this->Emitter_parser_ = &p;
  }

  void ChannelFunction_pskel::
  Filter_parser (::xml_schema::string_pskel& p)
  {
    this->Filter_parser_ = &p;
  }

  void ChannelFunction_pskel::
  ModeMaster_parser (::xml_schema::string_pskel& p)
  {
    this->ModeMaster_parser_ = &p;
  }

  void ChannelFunction_pskel::
  ModeFrom_parser (::device::dmxtype_pskel& p)
  {
    this->ModeFrom_parser_ = &p;
  }

  void ChannelFunction_pskel::
  ModeTo_parser (::device::dmxtype_pskel& p)
  {
    this->ModeTo_parser_ = &p;
  }

  void ChannelFunction_pskel::
  parsers (::device::ChannelSet_pskel& ChannelSet,
           ::xml_schema::string_pskel& Name,
           ::device::AttributeEnum_pskel& Attribute,
           ::xml_schema::string_pskel& OriginalAttribute,
           ::device::dmxtype_pskel& DMXFrom,
           ::xml_schema::float_pskel& PhysicalFrom,
           ::xml_schema::float_pskel& PhysicalTo,
           ::xml_schema::float_pskel& RealFade,
           ::xml_schema::string_pskel& Wheel,
           ::xml_schema::string_pskel& Emitter,
           ::xml_schema::string_pskel& Filter,
           ::xml_schema::string_pskel& ModeMaster,
           ::device::dmxtype_pskel& ModeFrom,
           ::device::dmxtype_pskel& ModeTo)
  {
    this->ChannelSet_parser_ = &ChannelSet;
    this->Name_parser_ = &Name;
    this->Attribute_parser_ = &Attribute;
    this->OriginalAttribute_parser_ = &OriginalAttribute;
    this->DMXFrom_parser_ = &DMXFrom;
    this->PhysicalFrom_parser_ = &PhysicalFrom;
    this->PhysicalTo_parser_ = &PhysicalTo;
    this->RealFade_parser_ = &RealFade;
    this->Wheel_parser_ = &Wheel;
    this->Emitter_parser_ = &Emitter;
    this->Filter_parser_ = &Filter;
    this->ModeMaster_parser_ = &ModeMaster;
    this->ModeFrom_parser_ = &ModeFrom;
    this->ModeTo_parser_ = &ModeTo;
  }

  ChannelFunction_pskel::
  ChannelFunction_pskel ()
  : ChannelSet_parser_ (0),
    Name_parser_ (0),
    Attribute_parser_ (0),
    OriginalAttribute_parser_ (0),
    DMXFrom_parser_ (0),
    PhysicalFrom_parser_ (0),
    PhysicalTo_parser_ (0),
    RealFade_parser_ (0),
    Wheel_parser_ (0),
    Emitter_parser_ (0),
    Filter_parser_ (0),
    ModeMaster_parser_ (0),
    ModeFrom_parser_ (0),
    ModeTo_parser_ (0)
  {
  }

  // ChannelSet_pskel
  //

  void ChannelSet_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void ChannelSet_pskel::
  DMXFrom_parser (::device::dmxtype_pskel& p)
  {
    this->DMXFrom_parser_ = &p;
  }

  void ChannelSet_pskel::
  DMXTo_parser (::device::dmxtype_pskel& p)
  {
    this->DMXTo_parser_ = &p;
  }

  void ChannelSet_pskel::
  PhysicalFrom_parser (::xml_schema::float_pskel& p)
  {
    this->PhysicalFrom_parser_ = &p;
  }

  void ChannelSet_pskel::
  PhysicalTo_parser (::xml_schema::float_pskel& p)
  {
    this->PhysicalTo_parser_ = &p;
  }

  void ChannelSet_pskel::
  WheelSlotIndex_parser (::xml_schema::integer_pskel& p)
  {
    this->WheelSlotIndex_parser_ = &p;
  }

  void ChannelSet_pskel::
  parsers (::xml_schema::string_pskel& Name,
           ::device::dmxtype_pskel& DMXFrom,
           ::device::dmxtype_pskel& DMXTo,
           ::xml_schema::float_pskel& PhysicalFrom,
           ::xml_schema::float_pskel& PhysicalTo,
           ::xml_schema::integer_pskel& WheelSlotIndex)
  {
    this->Name_parser_ = &Name;
    this->DMXFrom_parser_ = &DMXFrom;
    this->DMXTo_parser_ = &DMXTo;
    this->PhysicalFrom_parser_ = &PhysicalFrom;
    this->PhysicalTo_parser_ = &PhysicalTo;
    this->WheelSlotIndex_parser_ = &WheelSlotIndex;
  }

  ChannelSet_pskel::
  ChannelSet_pskel ()
  : Name_parser_ (0),
    DMXFrom_parser_ (0),
    DMXTo_parser_ (0),
    PhysicalFrom_parser_ (0),
    PhysicalTo_parser_ (0),
    WheelSlotIndex_parser_ (0)
  {
  }

  // Relations_pskel
  //

  void Relations_pskel::
  Relation_parser (::device::Relation_pskel& p)
  {
    this->Relation_parser_ = &p;
  }

  void Relations_pskel::
  parsers (::device::Relation_pskel& Relation)
  {
    this->Relation_parser_ = &Relation;
  }

  Relations_pskel::
  Relations_pskel ()
  : Relation_parser_ (0)
  {
  }

  // Relation_pskel
  //

  void Relation_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Relation_pskel::
  Master_parser (::xml_schema::string_pskel& p)
  {
    this->Master_parser_ = &p;
  }

  void Relation_pskel::
  Follower_parser (::xml_schema::string_pskel& p)
  {
    this->Follower_parser_ = &p;
  }

  void Relation_pskel::
  Type_parser (::device::RelationTypesEnum_pskel& p)
  {
    this->Type_parser_ = &p;
  }

  void Relation_pskel::
  parsers (::xml_schema::string_pskel& Name,
           ::xml_schema::string_pskel& Master,
           ::xml_schema::string_pskel& Follower,
           ::device::RelationTypesEnum_pskel& Type)
  {
    this->Name_parser_ = &Name;
    this->Master_parser_ = &Master;
    this->Follower_parser_ = &Follower;
    this->Type_parser_ = &Type;
  }

  Relation_pskel::
  Relation_pskel ()
  : Name_parser_ (0),
    Master_parser_ (0),
    Follower_parser_ (0),
    Type_parser_ (0)
  {
  }

  // Revisions_pskel
  //

  void Revisions_pskel::
  Revision_parser (::device::Revision_pskel& p)
  {
    this->Revision_parser_ = &p;
  }

  void Revisions_pskel::
  parsers (::device::Revision_pskel& Revision)
  {
    this->Revision_parser_ = &Revision;
  }

  Revisions_pskel::
  Revisions_pskel ()
  : Revision_parser_ (0)
  {
  }

  // Revision_pskel
  //

  void Revision_pskel::
  Text_parser (::xml_schema::string_pskel& p)
  {
    this->Text_parser_ = &p;
  }

  void Revision_pskel::
  Date_parser (::xml_schema::date_time_pskel& p)
  {
    this->Date_parser_ = &p;
  }

  void Revision_pskel::
  UserID_parser (::xml_schema::integer_pskel& p)
  {
    this->UserID_parser_ = &p;
  }

  void Revision_pskel::
  parsers (::xml_schema::string_pskel& Text,
           ::xml_schema::date_time_pskel& Date,
           ::xml_schema::integer_pskel& UserID)
  {
    this->Text_parser_ = &Text;
    this->Date_parser_ = &Date;
    this->UserID_parser_ = &UserID;
  }

  Revision_pskel::
  Revision_pskel ()
  : Text_parser_ (0),
    Date_parser_ (0),
    UserID_parser_ (0)
  {
  }

  // FTPresets_pskel
  //

  void FTPresets_pskel::
  FTPreset_parser (::device::FTPreset_pskel& p)
  {
    this->FTPreset_parser_ = &p;
  }

  void FTPresets_pskel::
  parsers (::device::FTPreset_pskel& FTPreset)
  {
    this->FTPreset_parser_ = &FTPreset;
  }

  FTPresets_pskel::
  FTPresets_pskel ()
  : FTPreset_parser_ (0)
  {
  }

  // FTMacros_pskel
  //

  void FTMacros_pskel::
  FTMacro_parser (::device::FTMacro_pskel& p)
  {
    this->FTMacro_parser_ = &p;
  }

  void FTMacros_pskel::
  parsers (::device::FTMacro_pskel& FTMacro)
  {
    this->FTMacro_parser_ = &FTMacro;
  }

  FTMacros_pskel::
  FTMacros_pskel ()
  : FTMacro_parser_ (0)
  {
  }

  // FTMacro_pskel
  //

  void FTMacro_pskel::
  MacroDMX_parser (::device::MacroDMX_pskel& p)
  {
    this->MacroDMX_parser_ = &p;
  }

  void FTMacro_pskel::
  MacroVisual_parser (::device::MacroVisual_pskel& p)
  {
    this->MacroVisual_parser_ = &p;
  }

  void FTMacro_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FTMacro_pskel::
  parsers (::device::MacroDMX_pskel& MacroDMX,
           ::device::MacroVisual_pskel& MacroVisual,
           ::xml_schema::string_pskel& Name)
  {
    this->MacroDMX_parser_ = &MacroDMX;
    this->MacroVisual_parser_ = &MacroVisual;
    this->Name_parser_ = &Name;
  }

  FTMacro_pskel::
  FTMacro_pskel ()
  : MacroDMX_parser_ (0),
    MacroVisual_parser_ (0),
    Name_parser_ (0)
  {
  }

  // MacroDMX_pskel
  //

  void MacroDMX_pskel::
  DMXStep_parser (::device::DMXStep_pskel& p)
  {
    this->DMXStep_parser_ = &p;
  }

  void MacroDMX_pskel::
  parsers (::device::DMXStep_pskel& DMXStep)
  {
    this->DMXStep_parser_ = &DMXStep;
  }

  MacroDMX_pskel::
  MacroDMX_pskel ()
  : DMXStep_parser_ (0)
  {
  }

  // DMXStep_pskel
  //

  void DMXStep_pskel::
  DMXValue_parser (::device::DMXValue_pskel& p)
  {
    this->DMXValue_parser_ = &p;
  }

  void DMXStep_pskel::
  Duration_parser (::xml_schema::integer_pskel& p)
  {
    this->Duration_parser_ = &p;
  }

  void DMXStep_pskel::
  parsers (::device::DMXValue_pskel& DMXValue,
           ::xml_schema::integer_pskel& Duration)
  {
    this->DMXValue_parser_ = &DMXValue;
    this->Duration_parser_ = &Duration;
  }

  DMXStep_pskel::
  DMXStep_pskel ()
  : DMXValue_parser_ (0),
    Duration_parser_ (0)
  {
  }

  // DMXValue_pskel
  //

  void DMXValue_pskel::
  Value_parser (::device::dmxtype_pskel& p)
  {
    this->Value_parser_ = &p;
  }

  void DMXValue_pskel::
  DMXChannel_parser (::xml_schema::string_pskel& p)
  {
    this->DMXChannel_parser_ = &p;
  }

  void DMXValue_pskel::
  parsers (::device::dmxtype_pskel& Value,
           ::xml_schema::string_pskel& DMXChannel)
  {
    this->Value_parser_ = &Value;
    this->DMXChannel_parser_ = &DMXChannel;
  }

  DMXValue_pskel::
  DMXValue_pskel ()
  : Value_parser_ (0),
    DMXChannel_parser_ (0)
  {
  }

  // MacroVisual_pskel
  //

  void MacroVisual_pskel::
  VisualStep_parser (::device::VisualStep_pskel& p)
  {
    this->VisualStep_parser_ = &p;
  }

  void MacroVisual_pskel::
  parsers (::device::VisualStep_pskel& VisualStep)
  {
    this->VisualStep_parser_ = &VisualStep;
  }

  MacroVisual_pskel::
  MacroVisual_pskel ()
  : VisualStep_parser_ (0)
  {
  }

  // VisualStep_pskel
  //

  void VisualStep_pskel::
  VisualValue_parser (::device::VisualValue_pskel& p)
  {
    this->VisualValue_parser_ = &p;
  }

  void VisualStep_pskel::
  Duration_parser (::xml_schema::integer_pskel& p)
  {
    this->Duration_parser_ = &p;
  }

  void VisualStep_pskel::
  Fade_parser (::xml_schema::string_pskel& p)
  {
    this->Fade_parser_ = &p;
  }

  void VisualStep_pskel::
  Delay_parser (::xml_schema::string_pskel& p)
  {
    this->Delay_parser_ = &p;
  }

  void VisualStep_pskel::
  parsers (::device::VisualValue_pskel& VisualValue,
           ::xml_schema::integer_pskel& Duration,
           ::xml_schema::string_pskel& Fade,
           ::xml_schema::string_pskel& Delay)
  {
    this->VisualValue_parser_ = &VisualValue;
    this->Duration_parser_ = &Duration;
    this->Fade_parser_ = &Fade;
    this->Delay_parser_ = &Delay;
  }

  VisualStep_pskel::
  VisualStep_pskel ()
  : VisualValue_parser_ (0),
    Duration_parser_ (0),
    Fade_parser_ (0),
    Delay_parser_ (0)
  {
  }

  // VisualValue_pskel
  //

  void VisualValue_pskel::
  Value_parser (::xml_schema::string_pskel& p)
  {
    this->Value_parser_ = &p;
  }

  void VisualValue_pskel::
  ChannelFunction_parser (::xml_schema::string_pskel& p)
  {
    this->ChannelFunction_parser_ = &p;
  }

  void VisualValue_pskel::
  parsers (::xml_schema::string_pskel& Value,
           ::xml_schema::string_pskel& ChannelFunction)
  {
    this->Value_parser_ = &Value;
    this->ChannelFunction_parser_ = &ChannelFunction;
  }

  VisualValue_pskel::
  VisualValue_pskel ()
  : Value_parser_ (0),
    ChannelFunction_parser_ (0)
  {
  }

  // PhysicalDescriptions_pskel
  //

  void PhysicalDescriptions_pskel::
  Emitters_parser (::device::Emitters_pskel& p)
  {
    this->Emitters_parser_ = &p;
  }

  void PhysicalDescriptions_pskel::
  Filters_parser (::device::Filters_pskel& p)
  {
    this->Filters_parser_ = &p;
  }

  void PhysicalDescriptions_pskel::
  ColorSpace_parser (::device::ColorSpace_pskel& p)
  {
    this->ColorSpace_parser_ = &p;
  }

  void PhysicalDescriptions_pskel::
  DMXProfiles_parser (::device::DMXProfiles_pskel& p)
  {
    this->DMXProfiles_parser_ = &p;
  }

  void PhysicalDescriptions_pskel::
  CRIs_parser (::device::CRIs_pskel& p)
  {
    this->CRIs_parser_ = &p;
  }

  void PhysicalDescriptions_pskel::
  parsers (::device::Emitters_pskel& Emitters,
           ::device::Filters_pskel& Filters,
           ::device::ColorSpace_pskel& ColorSpace,
           ::device::DMXProfiles_pskel& DMXProfiles,
           ::device::CRIs_pskel& CRIs)
  {
    this->Emitters_parser_ = &Emitters;
    this->Filters_parser_ = &Filters;
    this->ColorSpace_parser_ = &ColorSpace;
    this->DMXProfiles_parser_ = &DMXProfiles;
    this->CRIs_parser_ = &CRIs;
  }

  PhysicalDescriptions_pskel::
  PhysicalDescriptions_pskel ()
  : Emitters_parser_ (0),
    Filters_parser_ (0),
    ColorSpace_parser_ (0),
    DMXProfiles_parser_ (0),
    CRIs_parser_ (0)
  {
  }

  // Emitters_pskel
  //

  void Emitters_pskel::
  Emitter_parser (::device::Emitter_pskel& p)
  {
    this->Emitter_parser_ = &p;
  }

  void Emitters_pskel::
  parsers (::device::Emitter_pskel& Emitter)
  {
    this->Emitter_parser_ = &Emitter;
  }

  Emitters_pskel::
  Emitters_pskel ()
  : Emitter_parser_ (0)
  {
  }

  // Emitter_pskel
  //

  void Emitter_pskel::
  Measurement_parser (::device::Measurement_pskel& p)
  {
    this->Measurement_parser_ = &p;
  }

  void Emitter_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Emitter_pskel::
  Color_parser (::device::colorcietype_pskel& p)
  {
    this->Color_parser_ = &p;
  }

  void Emitter_pskel::
  DominantWaveLength_parser (::xml_schema::float_pskel& p)
  {
    this->DominantWaveLength_parser_ = &p;
  }

  void Emitter_pskel::
  DiodePart_parser (::xml_schema::string_pskel& p)
  {
    this->DiodePart_parser_ = &p;
  }

  void Emitter_pskel::
  parsers (::device::Measurement_pskel& Measurement,
           ::device::nametype_pskel& Name,
           ::device::colorcietype_pskel& Color,
           ::xml_schema::float_pskel& DominantWaveLength,
           ::xml_schema::string_pskel& DiodePart)
  {
    this->Measurement_parser_ = &Measurement;
    this->Name_parser_ = &Name;
    this->Color_parser_ = &Color;
    this->DominantWaveLength_parser_ = &DominantWaveLength;
    this->DiodePart_parser_ = &DiodePart;
  }

  Emitter_pskel::
  Emitter_pskel ()
  : Measurement_parser_ (0),
    Name_parser_ (0),
    Color_parser_ (0),
    DominantWaveLength_parser_ (0),
    DiodePart_parser_ (0)
  {
  }

  // Filters_pskel
  //

  void Filters_pskel::
  Filter_parser (::device::Filter_pskel& p)
  {
    this->Filter_parser_ = &p;
  }

  void Filters_pskel::
  parsers (::device::Filter_pskel& Filter)
  {
    this->Filter_parser_ = &Filter;
  }

  Filters_pskel::
  Filters_pskel ()
  : Filter_parser_ (0)
  {
  }

  // Filter_pskel
  //

  void Filter_pskel::
  Measurement_parser (::device::Measurement_pskel& p)
  {
    this->Measurement_parser_ = &p;
  }

  void Filter_pskel::
  Name_parser (::device::nametype_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Filter_pskel::
  Color_parser (::device::colorcietype_pskel& p)
  {
    this->Color_parser_ = &p;
  }

  void Filter_pskel::
  parsers (::device::Measurement_pskel& Measurement,
           ::device::nametype_pskel& Name,
           ::device::colorcietype_pskel& Color)
  {
    this->Measurement_parser_ = &Measurement;
    this->Name_parser_ = &Name;
    this->Color_parser_ = &Color;
  }

  Filter_pskel::
  Filter_pskel ()
  : Measurement_parser_ (0),
    Name_parser_ (0),
    Color_parser_ (0)
  {
  }

  // Measurement_pskel
  //

  void Measurement_pskel::
  MeasurementPoint_parser (::device::MeasurementPoint_pskel& p)
  {
    this->MeasurementPoint_parser_ = &p;
  }

  void Measurement_pskel::
  Physical_parser (::xml_schema::float_pskel& p)
  {
    this->Physical_parser_ = &p;
  }

  void Measurement_pskel::
  LuminousIntensity_parser (::xml_schema::float_pskel& p)
  {
    this->LuminousIntensity_parser_ = &p;
  }

  void Measurement_pskel::
  Transmission_parser (::xml_schema::float_pskel& p)
  {
    this->Transmission_parser_ = &p;
  }

  void Measurement_pskel::
  InterpolationTo_parser (::device::InterpolationToEnum_pskel& p)
  {
    this->InterpolationTo_parser_ = &p;
  }

  void Measurement_pskel::
  parsers (::device::MeasurementPoint_pskel& MeasurementPoint,
           ::xml_schema::float_pskel& Physical,
           ::xml_schema::float_pskel& LuminousIntensity,
           ::xml_schema::float_pskel& Transmission,
           ::device::InterpolationToEnum_pskel& InterpolationTo)
  {
    this->MeasurementPoint_parser_ = &MeasurementPoint;
    this->Physical_parser_ = &Physical;
    this->LuminousIntensity_parser_ = &LuminousIntensity;
    this->Transmission_parser_ = &Transmission;
    this->InterpolationTo_parser_ = &InterpolationTo;
  }

  Measurement_pskel::
  Measurement_pskel ()
  : MeasurementPoint_parser_ (0),
    Physical_parser_ (0),
    LuminousIntensity_parser_ (0),
    Transmission_parser_ (0),
    InterpolationTo_parser_ (0)
  {
  }

  // MeasurementPoint_pskel
  //

  void MeasurementPoint_pskel::
  WaveLength_parser (::xml_schema::float_pskel& p)
  {
    this->WaveLength_parser_ = &p;
  }

  void MeasurementPoint_pskel::
  Energy_parser (::xml_schema::float_pskel& p)
  {
    this->Energy_parser_ = &p;
  }

  void MeasurementPoint_pskel::
  parsers (::xml_schema::float_pskel& WaveLength,
           ::xml_schema::float_pskel& Energy)
  {
    this->WaveLength_parser_ = &WaveLength;
    this->Energy_parser_ = &Energy;
  }

  MeasurementPoint_pskel::
  MeasurementPoint_pskel ()
  : WaveLength_parser_ (0),
    Energy_parser_ (0)
  {
  }

  // ColorSpace_pskel
  //

  void ColorSpace_pskel::
  ColorSpace_parser (::device::ColorSpaceEnum_pskel& p)
  {
    this->ColorSpace_parser_ = &p;
  }

  void ColorSpace_pskel::
  Red_parser (::device::colorcietype_pskel& p)
  {
    this->Red_parser_ = &p;
  }

  void ColorSpace_pskel::
  Green_parser (::device::colorcietype_pskel& p)
  {
    this->Green_parser_ = &p;
  }

  void ColorSpace_pskel::
  Blue_parser (::device::colorcietype_pskel& p)
  {
    this->Blue_parser_ = &p;
  }

  void ColorSpace_pskel::
  WhitePoint_parser (::device::colorcietype_pskel& p)
  {
    this->WhitePoint_parser_ = &p;
  }

  void ColorSpace_pskel::
  parsers (::device::ColorSpaceEnum_pskel& ColorSpace,
           ::device::colorcietype_pskel& Red,
           ::device::colorcietype_pskel& Green,
           ::device::colorcietype_pskel& Blue,
           ::device::colorcietype_pskel& WhitePoint)
  {
    this->ColorSpace_parser_ = &ColorSpace;
    this->Red_parser_ = &Red;
    this->Green_parser_ = &Green;
    this->Blue_parser_ = &Blue;
    this->WhitePoint_parser_ = &WhitePoint;
  }

  ColorSpace_pskel::
  ColorSpace_pskel ()
  : ColorSpace_parser_ (0),
    Red_parser_ (0),
    Green_parser_ (0),
    Blue_parser_ (0),
    WhitePoint_parser_ (0)
  {
  }

  // DMXProfiles_pskel
  //

  void DMXProfiles_pskel::
  DMXProfile_parser (::device::DMXProfile_pskel& p)
  {
    this->DMXProfile_parser_ = &p;
  }

  void DMXProfiles_pskel::
  parsers (::device::DMXProfile_pskel& DMXProfile)
  {
    this->DMXProfile_parser_ = &DMXProfile;
  }

  DMXProfiles_pskel::
  DMXProfiles_pskel ()
  : DMXProfile_parser_ (0)
  {
  }

  // CRIs_pskel
  //

  void CRIs_pskel::
  CRI_parser (::device::CRI_pskel& p)
  {
    this->CRI_parser_ = &p;
  }

  void CRIs_pskel::
  parsers (::device::CRI_pskel& CRI)
  {
    this->CRI_parser_ = &CRI;
  }

  CRIs_pskel::
  CRIs_pskel ()
  : CRI_parser_ (0)
  {
  }

  // CRI_pskel
  //

  void CRI_pskel::
  CES_parser (::device::CESEnum_pskel& p)
  {
    this->CES_parser_ = &p;
  }

  void CRI_pskel::
  ColorRenderingIndex_parser (::xml_schema::integer_pskel& p)
  {
    this->ColorRenderingIndex_parser_ = &p;
  }

  void CRI_pskel::
  parsers (::device::CESEnum_pskel& CES,
           ::xml_schema::integer_pskel& ColorRenderingIndex)
  {
    this->CES_parser_ = &CES;
    this->ColorRenderingIndex_parser_ = &ColorRenderingIndex;
  }

  CRI_pskel::
  CRI_pskel ()
  : CES_parser_ (0),
    ColorRenderingIndex_parser_ (0)
  {
  }

  // Protocols_pskel
  //

  void Protocols_pskel::
  RDM_parser (::device::RDM_pskel& p)
  {
    this->RDM_parser_ = &p;
  }

  void Protocols_pskel::
  Art_Net_parser (::device::Art_Net_pskel& p)
  {
    this->Art_Net_parser_ = &p;
  }

  void Protocols_pskel::
  sACN_parser (::device::sACN_pskel& p)
  {
    this->sACN_parser_ = &p;
  }

  void Protocols_pskel::
  KiNET_parser (::device::KiNET_pskel& p)
  {
    this->KiNET_parser_ = &p;
  }

  void Protocols_pskel::
  PosiStageNet_parser (::device::PosiStageNet_pskel& p)
  {
    this->PosiStageNet_parser_ = &p;
  }

  void Protocols_pskel::
  OpenSoundControl_parser (::device::OpenSoundControl_pskel& p)
  {
    this->OpenSoundControl_parser_ = &p;
  }

  void Protocols_pskel::
  CITP_parser (::device::CITP_pskel& p)
  {
    this->CITP_parser_ = &p;
  }

  void Protocols_pskel::
  parsers (::device::RDM_pskel& RDM,
           ::device::Art_Net_pskel& Art_Net,
           ::device::sACN_pskel& sACN,
           ::device::KiNET_pskel& KiNET,
           ::device::PosiStageNet_pskel& PosiStageNet,
           ::device::OpenSoundControl_pskel& OpenSoundControl,
           ::device::CITP_pskel& CITP)
  {
    this->RDM_parser_ = &RDM;
    this->Art_Net_parser_ = &Art_Net;
    this->sACN_parser_ = &sACN;
    this->KiNET_parser_ = &KiNET;
    this->PosiStageNet_parser_ = &PosiStageNet;
    this->OpenSoundControl_parser_ = &OpenSoundControl;
    this->CITP_parser_ = &CITP;
  }

  Protocols_pskel::
  Protocols_pskel ()
  : RDM_parser_ (0),
    Art_Net_parser_ (0),
    sACN_parser_ (0),
    KiNET_parser_ (0),
    PosiStageNet_parser_ (0),
    OpenSoundControl_parser_ (0),
    CITP_parser_ (0)
  {
  }

  // RDM_pskel
  //

  void RDM_pskel::
  SoftwareVersionID_parser (::device::SoftwareVersionID_pskel& p)
  {
    this->SoftwareVersionID_parser_ = &p;
  }

  void RDM_pskel::
  ManufacturerID_parser (::xml_schema::string_pskel& p)
  {
    this->ManufacturerID_parser_ = &p;
  }

  void RDM_pskel::
  DeviceModelID_parser (::xml_schema::string_pskel& p)
  {
    this->DeviceModelID_parser_ = &p;
  }

  void RDM_pskel::
  parsers (::device::SoftwareVersionID_pskel& SoftwareVersionID,
           ::xml_schema::string_pskel& ManufacturerID,
           ::xml_schema::string_pskel& DeviceModelID)
  {
    this->SoftwareVersionID_parser_ = &SoftwareVersionID;
    this->ManufacturerID_parser_ = &ManufacturerID;
    this->DeviceModelID_parser_ = &DeviceModelID;
  }

  RDM_pskel::
  RDM_pskel ()
  : SoftwareVersionID_parser_ (0),
    ManufacturerID_parser_ (0),
    DeviceModelID_parser_ (0)
  {
  }

  // SoftwareVersionID_pskel
  //

  void SoftwareVersionID_pskel::
  DMXPersonality_parser (::device::DMXPersonality_pskel& p)
  {
    this->DMXPersonality_parser_ = &p;
  }

  void SoftwareVersionID_pskel::
  Value_parser (::xml_schema::string_pskel& p)
  {
    this->Value_parser_ = &p;
  }

  void SoftwareVersionID_pskel::
  parsers (::device::DMXPersonality_pskel& DMXPersonality,
           ::xml_schema::string_pskel& Value)
  {
    this->DMXPersonality_parser_ = &DMXPersonality;
    this->Value_parser_ = &Value;
  }

  SoftwareVersionID_pskel::
  SoftwareVersionID_pskel ()
  : DMXPersonality_parser_ (0),
    Value_parser_ (0)
  {
  }

  // DMXPersonality_pskel
  //

  void DMXPersonality_pskel::
  Value_parser (::xml_schema::string_pskel& p)
  {
    this->Value_parser_ = &p;
  }

  void DMXPersonality_pskel::
  DMXMode_parser (::device::nametype_pskel& p)
  {
    this->DMXMode_parser_ = &p;
  }

  void DMXPersonality_pskel::
  parsers (::xml_schema::string_pskel& Value,
           ::device::nametype_pskel& DMXMode)
  {
    this->Value_parser_ = &Value;
    this->DMXMode_parser_ = &DMXMode;
  }

  DMXPersonality_pskel::
  DMXPersonality_pskel ()
  : Value_parser_ (0),
    DMXMode_parser_ (0)
  {
  }

  // AttributeDefinitions_pskel
  //

  void AttributeDefinitions_pskel::
  ActivationGroups_parser (::device::ActivationGroups_pskel& p)
  {
    this->ActivationGroups_parser_ = &p;
  }

  void AttributeDefinitions_pskel::
  FeatureGroups_parser (::device::FeatureGroups_pskel& p)
  {
    this->FeatureGroups_parser_ = &p;
  }

  void AttributeDefinitions_pskel::
  Attributes_parser (::device::Attributes_pskel& p)
  {
    this->Attributes_parser_ = &p;
  }

  void AttributeDefinitions_pskel::
  parsers (::device::ActivationGroups_pskel& ActivationGroups,
           ::device::FeatureGroups_pskel& FeatureGroups,
           ::device::Attributes_pskel& Attributes)
  {
    this->ActivationGroups_parser_ = &ActivationGroups;
    this->FeatureGroups_parser_ = &FeatureGroups;
    this->Attributes_parser_ = &Attributes;
  }

  AttributeDefinitions_pskel::
  AttributeDefinitions_pskel ()
  : ActivationGroups_parser_ (0),
    FeatureGroups_parser_ (0),
    Attributes_parser_ (0)
  {
  }

  // ActivationGroups_pskel
  //

  void ActivationGroups_pskel::
  ActivationGroup_parser (::device::ActivationGroup_pskel& p)
  {
    this->ActivationGroup_parser_ = &p;
  }

  void ActivationGroups_pskel::
  parsers (::device::ActivationGroup_pskel& ActivationGroup)
  {
    this->ActivationGroup_parser_ = &ActivationGroup;
  }

  ActivationGroups_pskel::
  ActivationGroups_pskel ()
  : ActivationGroup_parser_ (0)
  {
  }

  // FeatureGroups_pskel
  //

  void FeatureGroups_pskel::
  FeatureGroup_parser (::device::FeatureGroup_pskel& p)
  {
    this->FeatureGroup_parser_ = &p;
  }

  void FeatureGroups_pskel::
  parsers (::device::FeatureGroup_pskel& FeatureGroup)
  {
    this->FeatureGroup_parser_ = &FeatureGroup;
  }

  FeatureGroups_pskel::
  FeatureGroups_pskel ()
  : FeatureGroup_parser_ (0)
  {
  }

  // ActivationGroup_pskel
  //

  void ActivationGroup_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void ActivationGroup_pskel::
  parsers (::xml_schema::string_pskel& Name)
  {
    this->Name_parser_ = &Name;
  }

  ActivationGroup_pskel::
  ActivationGroup_pskel ()
  : Name_parser_ (0)
  {
  }

  // FeatureGroup_pskel
  //

  void FeatureGroup_pskel::
  Feature_parser (::device::Feature_pskel& p)
  {
    this->Feature_parser_ = &p;
  }

  void FeatureGroup_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void FeatureGroup_pskel::
  Pretty_parser (::xml_schema::string_pskel& p)
  {
    this->Pretty_parser_ = &p;
  }

  void FeatureGroup_pskel::
  parsers (::device::Feature_pskel& Feature,
           ::xml_schema::string_pskel& Name,
           ::xml_schema::string_pskel& Pretty)
  {
    this->Feature_parser_ = &Feature;
    this->Name_parser_ = &Name;
    this->Pretty_parser_ = &Pretty;
  }

  FeatureGroup_pskel::
  FeatureGroup_pskel ()
  : Feature_parser_ (0),
    Name_parser_ (0),
    Pretty_parser_ (0)
  {
  }

  // Feature_pskel
  //

  void Feature_pskel::
  Name_parser (::xml_schema::string_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Feature_pskel::
  parsers (::xml_schema::string_pskel& Name)
  {
    this->Name_parser_ = &Name;
  }

  Feature_pskel::
  Feature_pskel ()
  : Name_parser_ (0)
  {
  }

  // Attributes_pskel
  //

  void Attributes_pskel::
  Attribute_parser (::device::Attribute_pskel& p)
  {
    this->Attribute_parser_ = &p;
  }

  void Attributes_pskel::
  parsers (::device::Attribute_pskel& Attribute)
  {
    this->Attribute_parser_ = &Attribute;
  }

  Attributes_pskel::
  Attributes_pskel ()
  : Attribute_parser_ (0)
  {
  }

  // Attribute_pskel
  //

  void Attribute_pskel::
  Name_parser (::device::AttributeEnum_pskel& p)
  {
    this->Name_parser_ = &p;
  }

  void Attribute_pskel::
  Pretty_parser (::xml_schema::string_pskel& p)
  {
    this->Pretty_parser_ = &p;
  }

  void Attribute_pskel::
  ActivationGroup_parser (::xml_schema::string_pskel& p)
  {
    this->ActivationGroup_parser_ = &p;
  }

  void Attribute_pskel::
  PhysicalUnit_parser (::device::PhysicalUnitEnum_pskel& p)
  {
    this->PhysicalUnit_parser_ = &p;
  }

  void Attribute_pskel::
  Color_parser (::device::colorcietype_pskel& p)
  {
    this->Color_parser_ = &p;
  }

  void Attribute_pskel::
  Feature_parser (::xml_schema::string_pskel& p)
  {
    this->Feature_parser_ = &p;
  }

  void Attribute_pskel::
  MainAttribute_parser (::xml_schema::string_pskel& p)
  {
    this->MainAttribute_parser_ = &p;
  }

  void Attribute_pskel::
  parsers (::device::AttributeEnum_pskel& Name,
           ::xml_schema::string_pskel& Pretty,
           ::xml_schema::string_pskel& ActivationGroup,
           ::device::PhysicalUnitEnum_pskel& PhysicalUnit,
           ::device::colorcietype_pskel& Color,
           ::xml_schema::string_pskel& Feature,
           ::xml_schema::string_pskel& MainAttribute)
  {
    this->Name_parser_ = &Name;
    this->Pretty_parser_ = &Pretty;
    this->ActivationGroup_parser_ = &ActivationGroup;
    this->PhysicalUnit_parser_ = &PhysicalUnit;
    this->Color_parser_ = &Color;
    this->Feature_parser_ = &Feature;
    this->MainAttribute_parser_ = &MainAttribute;
  }

  Attribute_pskel::
  Attribute_pskel ()
  : Name_parser_ (0),
    Pretty_parser_ (0),
    ActivationGroup_parser_ (0),
    PhysicalUnit_parser_ (0),
    Color_parser_ (0),
    Feature_parser_ (0),
    MainAttribute_parser_ (0)
  {
  }
}

namespace device
{
  // matrixtype_pskel
  //

  void matrixtype_pskel::
  post_matrixtype ()
  {
  }

  // colorcietype_pskel
  //

  void colorcietype_pskel::
  post_colorcietype ()
  {
  }

  // offsettype_pskel
  //

  void offsettype_pskel::
  post_offsettype ()
  {
  }

  // dmxtype_pskel
  //

  void dmxtype_pskel::
  post_dmxtype ()
  {
  }

  // dmxvalue_pskel
  //

  void dmxvalue_pskel::
  post_dmxvalue ()
  {
  }

  // nametype_pskel
  //

  void nametype_pskel::
  post_nametype ()
  {
  }

  // dataversion_pskel
  //

  void dataversion_pskel::
  post_dataversion ()
  {
  }

  // guidtype_pskel
  //

  void guidtype_pskel::
  post_guidtype ()
  {
  }

  // PhysicalUnitEnum_pskel
  //

  void PhysicalUnitEnum_pskel::
  post_PhysicalUnitEnum ()
  {
  }

  // MasterEnum_pskel
  //

  void MasterEnum_pskel::
  post_MasterEnum ()
  {
  }

  // PrimitiveTypeEnum_pskel
  //

  void PrimitiveTypeEnum_pskel::
  post_PrimitiveTypeEnum ()
  {
  }

  // LampTypeEnum_pskel
  //

  void LampTypeEnum_pskel::
  post_LampTypeEnum ()
  {
  }

  // BeamTypeEnum_pskel
  //

  void BeamTypeEnum_pskel::
  post_BeamTypeEnum ()
  {
  }

  // ColorSpaceEnum_pskel
  //

  void ColorSpaceEnum_pskel::
  post_ColorSpaceEnum ()
  {
  }

  // InterpolationToEnum_pskel
  //

  void InterpolationToEnum_pskel::
  post_InterpolationToEnum ()
  {
  }

  // SnapEnum_pskel
  //

  void SnapEnum_pskel::
  post_SnapEnum ()
  {
  }

  // YesNoEnum_pskel
  //

  void YesNoEnum_pskel::
  post_YesNoEnum ()
  {
  }

  // RelationTypesEnum_pskel
  //

  void RelationTypesEnum_pskel::
  post_RelationTypesEnum ()
  {
  }

  // RDMParameterTypeEnum_pskel
  //

  void RDMParameterTypeEnum_pskel::
  post_RDMParameterTypeEnum ()
  {
  }

  // ThresholdOperatorEnum_pskel
  //

  void ThresholdOperatorEnum_pskel::
  post_ThresholdOperatorEnum ()
  {
  }

  // RDMParameterDataTypeEnum_pskel
  //

  void RDMParameterDataTypeEnum_pskel::
  post_RDMParameterDataTypeEnum ()
  {
  }

  // RDMParameterCommandEnum_pskel
  //

  void RDMParameterCommandEnum_pskel::
  post_RDMParameterCommandEnum ()
  {
  }

  // RDMSensorTypeEnum_pskel
  //

  void RDMSensorTypeEnum_pskel::
  post_RDMSensorTypeEnum ()
  {
  }

  // RDMParameterSensorUnitEnum_pskel
  //

  void RDMParameterSensorUnitEnum_pskel::
  post_RDMParameterSensorUnitEnum ()
  {
  }

  // RDMSlotInfoTypeEnum_pskel
  //

  void RDMSlotInfoTypeEnum_pskel::
  post_RDMSlotInfoTypeEnum ()
  {
  }

  // RDMSlotLabelIDEnum_pskel
  //

  void RDMSlotLabelIDEnum_pskel::
  post_RDMSlotLabelIDEnum ()
  {
  }

  // RDMParameterSensorUnitPrefixEnum_pskel
  //

  void RDMParameterSensorUnitPrefixEnum_pskel::
  post_RDMParameterSensorUnitPrefixEnum ()
  {
  }

  // CESEnum_pskel
  //

  void CESEnum_pskel::
  post_CESEnum ()
  {
  }

  // AttributeEnum_pskel
  //

  void AttributeEnum_pskel::
  post_AttributeEnum ()
  {
  }

  // GDTF_pskel
  //

  void GDTF_pskel::
  FixtureType ()
  {
  }

  void GDTF_pskel::
  DataVersion ()
  {
  }

  void GDTF_pskel::
  post_GDTF ()
  {
  }

  bool GDTF_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FixtureType" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FixtureType_parser_;

      if (this->FixtureType_parser_)
        this->FixtureType_parser_->pre ();

      return true;
    }

    return false;
  }

  bool GDTF_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FixtureType" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FixtureType_parser_)
      {
        this->FixtureType_parser_->post_FixtureType ();
        this->FixtureType ();
      }

      return true;
    }

    return false;
  }

  bool GDTF_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "DataVersion" && ns.empty ())
    {
      if (this->DataVersion_parser_)
      {
        this->DataVersion_parser_->pre ();
        this->DataVersion_parser_->_pre_impl ();
        this->DataVersion_parser_->_characters (v);
        this->DataVersion_parser_->_post_impl ();
        this->DataVersion_parser_->post_dataversion ();
        this->DataVersion ();
      }

      return true;
    }

    return false;
  }

  // FixtureType_pskel
  //

  void FixtureType_pskel::
  AttributeDefinitions ()
  {
  }

  void FixtureType_pskel::
  Wheels ()
  {
  }

  void FixtureType_pskel::
  PhysicalDescriptions ()
  {
  }

  void FixtureType_pskel::
  Models ()
  {
  }

  void FixtureType_pskel::
  Geometries ()
  {
  }

  void FixtureType_pskel::
  DMXModes ()
  {
  }

  void FixtureType_pskel::
  Revisions ()
  {
  }

  void FixtureType_pskel::
  FTPresets ()
  {
  }

  void FixtureType_pskel::
  Protocols ()
  {
  }

  void FixtureType_pskel::
  Name ()
  {
  }

  void FixtureType_pskel::
  ShortName (const ::std::string&)
  {
  }

  void FixtureType_pskel::
  LongName (const ::std::string&)
  {
  }

  void FixtureType_pskel::
  Manufacturer (const ::std::string&)
  {
  }

  void FixtureType_pskel::
  Description (const ::std::string&)
  {
  }

  void FixtureType_pskel::
  FixtureTypeID ()
  {
  }

  void FixtureType_pskel::
  Thumbnail (const ::std::string&)
  {
  }

  void FixtureType_pskel::
  RefFT ()
  {
  }

  void FixtureType_pskel::
  post_FixtureType ()
  {
  }

  bool FixtureType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "AttributeDefinitions" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->AttributeDefinitions_parser_;

      if (this->AttributeDefinitions_parser_)
        this->AttributeDefinitions_parser_->pre ();

      return true;
    }

    if (n == "Wheels" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Wheels_parser_;

      if (this->Wheels_parser_)
        this->Wheels_parser_->pre ();

      return true;
    }

    if (n == "PhysicalDescriptions" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PhysicalDescriptions_parser_;

      if (this->PhysicalDescriptions_parser_)
        this->PhysicalDescriptions_parser_->pre ();

      return true;
    }

    if (n == "Models" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Models_parser_;

      if (this->Models_parser_)
        this->Models_parser_->pre ();

      return true;
    }

    if (n == "Geometries" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometries_parser_;

      if (this->Geometries_parser_)
        this->Geometries_parser_->pre ();

      return true;
    }

    if (n == "DMXModes" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXModes_parser_;

      if (this->DMXModes_parser_)
        this->DMXModes_parser_->pre ();

      return true;
    }

    if (n == "Revisions" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Revisions_parser_;

      if (this->Revisions_parser_)
        this->Revisions_parser_->pre ();

      return true;
    }

    if (n == "FTPresets" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FTPresets_parser_;

      if (this->FTPresets_parser_)
        this->FTPresets_parser_->pre ();

      return true;
    }

    if (n == "Protocols" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Protocols_parser_;

      if (this->Protocols_parser_)
        this->Protocols_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FixtureType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "AttributeDefinitions" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->AttributeDefinitions_parser_)
      {
        this->AttributeDefinitions_parser_->post_AttributeDefinitions ();
        this->AttributeDefinitions ();
      }

      return true;
    }

    if (n == "Wheels" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Wheels_parser_)
      {
        this->Wheels_parser_->post_Wheels ();
        this->Wheels ();
      }

      return true;
    }

    if (n == "PhysicalDescriptions" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->PhysicalDescriptions_parser_)
      {
        this->PhysicalDescriptions_parser_->post_PhysicalDescriptions ();
        this->PhysicalDescriptions ();
      }

      return true;
    }

    if (n == "Models" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Models_parser_)
      {
        this->Models_parser_->post_Models ();
        this->Models ();
      }

      return true;
    }

    if (n == "Geometries" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometries_parser_)
      {
        this->Geometries_parser_->post_Geometries ();
        this->Geometries ();
      }

      return true;
    }

    if (n == "DMXModes" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXModes_parser_)
      {
        this->DMXModes_parser_->post_DMXModes ();
        this->DMXModes ();
      }

      return true;
    }

    if (n == "Revisions" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Revisions_parser_)
      {
        this->Revisions_parser_->post_Revisions ();
        this->Revisions ();
      }

      return true;
    }

    if (n == "FTPresets" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FTPresets_parser_)
      {
        this->FTPresets_parser_->post_FTPresets ();
        this->FTPresets ();
      }

      return true;
    }

    if (n == "Protocols" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Protocols_parser_)
      {
        this->Protocols_parser_->post_Protocols ();
        this->Protocols ();
      }

      return true;
    }

    return false;
  }

  bool FixtureType_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "ShortName" && ns.empty ())
    {
      if (this->ShortName_parser_)
      {
        this->ShortName_parser_->pre ();
        this->ShortName_parser_->_pre_impl ();
        this->ShortName_parser_->_characters (v);
        this->ShortName_parser_->_post_impl ();
        this->ShortName (this->ShortName_parser_->post_string ());
      }

      return true;
    }

    if (n == "LongName" && ns.empty ())
    {
      if (this->LongName_parser_)
      {
        this->LongName_parser_->pre ();
        this->LongName_parser_->_pre_impl ();
        this->LongName_parser_->_characters (v);
        this->LongName_parser_->_post_impl ();
        this->LongName (this->LongName_parser_->post_string ());
      }

      return true;
    }

    if (n == "Manufacturer" && ns.empty ())
    {
      if (this->Manufacturer_parser_)
      {
        this->Manufacturer_parser_->pre ();
        this->Manufacturer_parser_->_pre_impl ();
        this->Manufacturer_parser_->_characters (v);
        this->Manufacturer_parser_->_post_impl ();
        this->Manufacturer (this->Manufacturer_parser_->post_string ());
      }

      return true;
    }

    if (n == "Description" && ns.empty ())
    {
      if (this->Description_parser_)
      {
        this->Description_parser_->pre ();
        this->Description_parser_->_pre_impl ();
        this->Description_parser_->_characters (v);
        this->Description_parser_->_post_impl ();
        this->Description (this->Description_parser_->post_string ());
      }

      return true;
    }

    if (n == "FixtureTypeID" && ns.empty ())
    {
      if (this->FixtureTypeID_parser_)
      {
        this->FixtureTypeID_parser_->pre ();
        this->FixtureTypeID_parser_->_pre_impl ();
        this->FixtureTypeID_parser_->_characters (v);
        this->FixtureTypeID_parser_->_post_impl ();
        this->FixtureTypeID_parser_->post_guidtype ();
        this->FixtureTypeID ();
      }

      return true;
    }

    if (n == "Thumbnail" && ns.empty ())
    {
      if (this->Thumbnail_parser_)
      {
        this->Thumbnail_parser_->pre ();
        this->Thumbnail_parser_->_pre_impl ();
        this->Thumbnail_parser_->_characters (v);
        this->Thumbnail_parser_->_post_impl ();
        this->Thumbnail (this->Thumbnail_parser_->post_string ());
      }

      return true;
    }

    if (n == "RefFT" && ns.empty ())
    {
      if (this->RefFT_parser_)
      {
        this->RefFT_parser_->pre ();
        this->RefFT_parser_->_pre_impl ();
        this->RefFT_parser_->_characters (v);
        this->RefFT_parser_->_post_impl ();
        this->RefFT_parser_->post_guidtype ();
        this->RefFT ();
      }

      return true;
    }

    return false;
  }

  // Wheels_pskel
  //

  void Wheels_pskel::
  Wheel ()
  {
  }

  void Wheels_pskel::
  post_Wheels ()
  {
  }

  bool Wheels_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Wheel" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Wheel_parser_;

      if (this->Wheel_parser_)
        this->Wheel_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Wheels_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Wheel" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Wheel_parser_)
      {
        this->Wheel_parser_->post_Wheel ();
        this->Wheel ();
      }

      return true;
    }

    return false;
  }

  // Wheel_pskel
  //

  void Wheel_pskel::
  Slot ()
  {
  }

  void Wheel_pskel::
  Name ()
  {
  }

  void Wheel_pskel::
  post_Wheel ()
  {
  }

  bool Wheel_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Slot" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Slot_parser_;

      if (this->Slot_parser_)
        this->Slot_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Wheel_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Slot" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Slot_parser_)
      {
        this->Slot_parser_->post_Slot ();
        this->Slot ();
      }

      return true;
    }

    return false;
  }

  bool Wheel_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    return false;
  }

  // Slot_pskel
  //

  void Slot_pskel::
  Facet ()
  {
  }

  void Slot_pskel::
  Name ()
  {
  }

  void Slot_pskel::
  Color ()
  {
  }

  void Slot_pskel::
  Filter (const ::std::string&)
  {
  }

  void Slot_pskel::
  MediaFileName (const ::std::string&)
  {
  }

  void Slot_pskel::
  post_Slot ()
  {
  }

  bool Slot_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Facet" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Facet_parser_;

      if (this->Facet_parser_)
        this->Facet_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Slot_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Facet" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Facet_parser_)
      {
        this->Facet_parser_->post_Facet ();
        this->Facet ();
      }

      return true;
    }

    return false;
  }

  bool Slot_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Color" && ns.empty ())
    {
      if (this->Color_parser_)
      {
        this->Color_parser_->pre ();
        this->Color_parser_->_pre_impl ();
        this->Color_parser_->_characters (v);
        this->Color_parser_->_post_impl ();
        this->Color_parser_->post_colorcietype ();
        this->Color ();
      }

      return true;
    }

    if (n == "Filter" && ns.empty ())
    {
      if (this->Filter_parser_)
      {
        this->Filter_parser_->pre ();
        this->Filter_parser_->_pre_impl ();
        this->Filter_parser_->_characters (v);
        this->Filter_parser_->_post_impl ();
        this->Filter (this->Filter_parser_->post_string ());
      }

      return true;
    }

    if (n == "MediaFileName" && ns.empty ())
    {
      if (this->MediaFileName_parser_)
      {
        this->MediaFileName_parser_->pre ();
        this->MediaFileName_parser_->_pre_impl ();
        this->MediaFileName_parser_->_characters (v);
        this->MediaFileName_parser_->_post_impl ();
        this->MediaFileName (this->MediaFileName_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // Facet_pskel
  //

  void Facet_pskel::
  Color ()
  {
  }

  void Facet_pskel::
  Rotation (const ::std::string&)
  {
  }

  void Facet_pskel::
  post_Facet ()
  {
  }

  bool Facet_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Color" && ns.empty ())
    {
      if (this->Color_parser_)
      {
        this->Color_parser_->pre ();
        this->Color_parser_->_pre_impl ();
        this->Color_parser_->_characters (v);
        this->Color_parser_->_post_impl ();
        this->Color_parser_->post_colorcietype ();
        this->Color ();
      }

      return true;
    }

    if (n == "Rotation" && ns.empty ())
    {
      if (this->Rotation_parser_)
      {
        this->Rotation_parser_->pre ();
        this->Rotation_parser_->_pre_impl ();
        this->Rotation_parser_->_characters (v);
        this->Rotation_parser_->_post_impl ();
        this->Rotation (this->Rotation_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // Models_pskel
  //

  void Models_pskel::
  Model ()
  {
  }

  void Models_pskel::
  post_Models ()
  {
  }

  bool Models_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Model" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Model_parser_;

      if (this->Model_parser_)
        this->Model_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Models_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Model" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->post_Model ();
        this->Model ();
      }

      return true;
    }

    return false;
  }

  // Model_pskel
  //

  void Model_pskel::
  Name ()
  {
  }

  void Model_pskel::
  Length (float)
  {
  }

  void Model_pskel::
  Width (float)
  {
  }

  void Model_pskel::
  Height (float)
  {
  }

  void Model_pskel::
  PrimitiveType ()
  {
  }

  void Model_pskel::
  File (const ::std::string&)
  {
  }

  void Model_pskel::
  post_Model ()
  {
  }

  bool Model_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Length" && ns.empty ())
    {
      if (this->Length_parser_)
      {
        this->Length_parser_->pre ();
        this->Length_parser_->_pre_impl ();
        this->Length_parser_->_characters (v);
        this->Length_parser_->_post_impl ();
        this->Length (this->Length_parser_->post_float ());
      }

      return true;
    }

    if (n == "Width" && ns.empty ())
    {
      if (this->Width_parser_)
      {
        this->Width_parser_->pre ();
        this->Width_parser_->_pre_impl ();
        this->Width_parser_->_characters (v);
        this->Width_parser_->_post_impl ();
        this->Width (this->Width_parser_->post_float ());
      }

      return true;
    }

    if (n == "Height" && ns.empty ())
    {
      if (this->Height_parser_)
      {
        this->Height_parser_->pre ();
        this->Height_parser_->_pre_impl ();
        this->Height_parser_->_characters (v);
        this->Height_parser_->_post_impl ();
        this->Height (this->Height_parser_->post_float ());
      }

      return true;
    }

    if (n == "PrimitiveType" && ns.empty ())
    {
      if (this->PrimitiveType_parser_)
      {
        this->PrimitiveType_parser_->pre ();
        this->PrimitiveType_parser_->_pre_impl ();
        this->PrimitiveType_parser_->_characters (v);
        this->PrimitiveType_parser_->_post_impl ();
        this->PrimitiveType_parser_->post_PrimitiveTypeEnum ();
        this->PrimitiveType ();
      }

      return true;
    }

    if (n == "File" && ns.empty ())
    {
      if (this->File_parser_)
      {
        this->File_parser_->pre ();
        this->File_parser_->_pre_impl ();
        this->File_parser_->_characters (v);
        this->File_parser_->_post_impl ();
        this->File (this->File_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // Geometries_pskel
  //

  void Geometries_pskel::
  Geometry ()
  {
  }

  void Geometries_pskel::
  Axis ()
  {
  }

  void Geometries_pskel::
  FilterBeam ()
  {
  }

  void Geometries_pskel::
  FilterColor ()
  {
  }

  void Geometries_pskel::
  FilterGobo ()
  {
  }

  void Geometries_pskel::
  FilterShaper ()
  {
  }

  void Geometries_pskel::
  Beam ()
  {
  }

  void Geometries_pskel::
  GeometryReference ()
  {
  }

  void Geometries_pskel::
  post_Geometries ()
  {
  }

  bool Geometries_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Geometries_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  // Geometry_pskel
  //

  void Geometry_pskel::
  Geometry ()
  {
  }

  void Geometry_pskel::
  Axis ()
  {
  }

  void Geometry_pskel::
  FilterBeam ()
  {
  }

  void Geometry_pskel::
  FilterColor ()
  {
  }

  void Geometry_pskel::
  FilterGobo ()
  {
  }

  void Geometry_pskel::
  FilterShaper ()
  {
  }

  void Geometry_pskel::
  Beam ()
  {
  }

  void Geometry_pskel::
  GeometryReference ()
  {
  }

  void Geometry_pskel::
  Name ()
  {
  }

  void Geometry_pskel::
  Model ()
  {
  }

  void Geometry_pskel::
  Position ()
  {
  }

  void Geometry_pskel::
  post_Geometry ()
  {
  }

  bool Geometry_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Geometry_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool Geometry_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    return false;
  }

  // Axis_pskel
  //

  void Axis_pskel::
  Geometry ()
  {
  }

  void Axis_pskel::
  Axis ()
  {
  }

  void Axis_pskel::
  FilterBeam ()
  {
  }

  void Axis_pskel::
  FilterColor ()
  {
  }

  void Axis_pskel::
  FilterGobo ()
  {
  }

  void Axis_pskel::
  FilterShaper ()
  {
  }

  void Axis_pskel::
  Beam ()
  {
  }

  void Axis_pskel::
  GeometryReference ()
  {
  }

  void Axis_pskel::
  Name ()
  {
  }

  void Axis_pskel::
  Model ()
  {
  }

  void Axis_pskel::
  Position ()
  {
  }

  void Axis_pskel::
  post_Axis ()
  {
  }

  bool Axis_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Axis_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool Axis_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    return false;
  }

  // FilterBeam_pskel
  //

  void FilterBeam_pskel::
  Geometry ()
  {
  }

  void FilterBeam_pskel::
  Axis ()
  {
  }

  void FilterBeam_pskel::
  FilterBeam ()
  {
  }

  void FilterBeam_pskel::
  FilterColor ()
  {
  }

  void FilterBeam_pskel::
  FilterGobo ()
  {
  }

  void FilterBeam_pskel::
  FilterShaper ()
  {
  }

  void FilterBeam_pskel::
  Beam ()
  {
  }

  void FilterBeam_pskel::
  GeometryReference ()
  {
  }

  void FilterBeam_pskel::
  Name ()
  {
  }

  void FilterBeam_pskel::
  Model ()
  {
  }

  void FilterBeam_pskel::
  Position ()
  {
  }

  void FilterBeam_pskel::
  post_FilterBeam ()
  {
  }

  bool FilterBeam_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FilterBeam_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool FilterBeam_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    return false;
  }

  // FilterColor_pskel
  //

  void FilterColor_pskel::
  Geometry ()
  {
  }

  void FilterColor_pskel::
  Axis ()
  {
  }

  void FilterColor_pskel::
  FilterBeam ()
  {
  }

  void FilterColor_pskel::
  FilterColor ()
  {
  }

  void FilterColor_pskel::
  FilterGobo ()
  {
  }

  void FilterColor_pskel::
  FilterShaper ()
  {
  }

  void FilterColor_pskel::
  Beam ()
  {
  }

  void FilterColor_pskel::
  GeometryReference ()
  {
  }

  void FilterColor_pskel::
  Name ()
  {
  }

  void FilterColor_pskel::
  Model ()
  {
  }

  void FilterColor_pskel::
  Position ()
  {
  }

  void FilterColor_pskel::
  post_FilterColor ()
  {
  }

  bool FilterColor_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FilterColor_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool FilterColor_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    return false;
  }

  // FilterGobo_pskel
  //

  void FilterGobo_pskel::
  Geometry ()
  {
  }

  void FilterGobo_pskel::
  Axis ()
  {
  }

  void FilterGobo_pskel::
  FilterBeam ()
  {
  }

  void FilterGobo_pskel::
  FilterColor ()
  {
  }

  void FilterGobo_pskel::
  FilterGobo ()
  {
  }

  void FilterGobo_pskel::
  FilterShaper ()
  {
  }

  void FilterGobo_pskel::
  Beam ()
  {
  }

  void FilterGobo_pskel::
  GeometryReference ()
  {
  }

  void FilterGobo_pskel::
  Name ()
  {
  }

  void FilterGobo_pskel::
  Model ()
  {
  }

  void FilterGobo_pskel::
  Position ()
  {
  }

  void FilterGobo_pskel::
  post_FilterGobo ()
  {
  }

  bool FilterGobo_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FilterGobo_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool FilterGobo_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    return false;
  }

  // FilterShaper_pskel
  //

  void FilterShaper_pskel::
  Geometry ()
  {
  }

  void FilterShaper_pskel::
  Axis ()
  {
  }

  void FilterShaper_pskel::
  FilterBeam ()
  {
  }

  void FilterShaper_pskel::
  FilterColor ()
  {
  }

  void FilterShaper_pskel::
  FilterGobo ()
  {
  }

  void FilterShaper_pskel::
  FilterShaper ()
  {
  }

  void FilterShaper_pskel::
  Beam ()
  {
  }

  void FilterShaper_pskel::
  GeometryReference ()
  {
  }

  void FilterShaper_pskel::
  Name ()
  {
  }

  void FilterShaper_pskel::
  Model ()
  {
  }

  void FilterShaper_pskel::
  Position ()
  {
  }

  void FilterShaper_pskel::
  post_FilterShaper ()
  {
  }

  bool FilterShaper_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FilterShaper_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool FilterShaper_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    return false;
  }

  // Beam_pskel
  //

  void Beam_pskel::
  Geometry ()
  {
  }

  void Beam_pskel::
  Axis ()
  {
  }

  void Beam_pskel::
  FilterBeam ()
  {
  }

  void Beam_pskel::
  FilterColor ()
  {
  }

  void Beam_pskel::
  FilterGobo ()
  {
  }

  void Beam_pskel::
  FilterShaper ()
  {
  }

  void Beam_pskel::
  Beam ()
  {
  }

  void Beam_pskel::
  GeometryReference ()
  {
  }

  void Beam_pskel::
  Name ()
  {
  }

  void Beam_pskel::
  Model ()
  {
  }

  void Beam_pskel::
  Position ()
  {
  }

  void Beam_pskel::
  LampType ()
  {
  }

  void Beam_pskel::
  PowerConsumption (float)
  {
  }

  void Beam_pskel::
  LuminousFlux (float)
  {
  }

  void Beam_pskel::
  ColorTemperature (float)
  {
  }

  void Beam_pskel::
  BeamAngle (float)
  {
  }

  void Beam_pskel::
  FieldAngle (float)
  {
  }

  void Beam_pskel::
  BeamRadius (float)
  {
  }

  void Beam_pskel::
  BeamType ()
  {
  }

  void Beam_pskel::
  ColorRenderingIndex (long long)
  {
  }

  void Beam_pskel::
  post_Beam ()
  {
  }

  bool Beam_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Geometry_parser_;

      if (this->Geometry_parser_)
        this->Geometry_parser_->pre ();

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Axis_parser_;

      if (this->Axis_parser_)
        this->Axis_parser_->pre ();

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterBeam_parser_;

      if (this->FilterBeam_parser_)
        this->FilterBeam_parser_->pre ();

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterColor_parser_;

      if (this->FilterColor_parser_)
        this->FilterColor_parser_->pre ();

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterGobo_parser_;

      if (this->FilterGobo_parser_)
        this->FilterGobo_parser_->pre ();

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FilterShaper_parser_;

      if (this->FilterShaper_parser_)
        this->FilterShaper_parser_->pre ();

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Beam_parser_;

      if (this->Beam_parser_)
        this->Beam_parser_->pre ();

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->GeometryReference_parser_;

      if (this->GeometryReference_parser_)
        this->GeometryReference_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Beam_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Geometry" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->post_Geometry ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Axis" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Axis_parser_)
      {
        this->Axis_parser_->post_Axis ();
        this->Axis ();
      }

      return true;
    }

    if (n == "FilterBeam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterBeam_parser_)
      {
        this->FilterBeam_parser_->post_FilterBeam ();
        this->FilterBeam ();
      }

      return true;
    }

    if (n == "FilterColor" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterColor_parser_)
      {
        this->FilterColor_parser_->post_FilterColor ();
        this->FilterColor ();
      }

      return true;
    }

    if (n == "FilterGobo" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterGobo_parser_)
      {
        this->FilterGobo_parser_->post_FilterGobo ();
        this->FilterGobo ();
      }

      return true;
    }

    if (n == "FilterShaper" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FilterShaper_parser_)
      {
        this->FilterShaper_parser_->post_FilterShaper ();
        this->FilterShaper ();
      }

      return true;
    }

    if (n == "Beam" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Beam_parser_)
      {
        this->Beam_parser_->post_Beam ();
        this->Beam ();
      }

      return true;
    }

    if (n == "GeometryReference" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->GeometryReference_parser_)
      {
        this->GeometryReference_parser_->post_GeometryReference ();
        this->GeometryReference ();
      }

      return true;
    }

    return false;
  }

  bool Beam_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    if (n == "LampType" && ns.empty ())
    {
      if (this->LampType_parser_)
      {
        this->LampType_parser_->pre ();
        this->LampType_parser_->_pre_impl ();
        this->LampType_parser_->_characters (v);
        this->LampType_parser_->_post_impl ();
        this->LampType_parser_->post_LampTypeEnum ();
        this->LampType ();
      }

      return true;
    }

    if (n == "PowerConsumption" && ns.empty ())
    {
      if (this->PowerConsumption_parser_)
      {
        this->PowerConsumption_parser_->pre ();
        this->PowerConsumption_parser_->_pre_impl ();
        this->PowerConsumption_parser_->_characters (v);
        this->PowerConsumption_parser_->_post_impl ();
        this->PowerConsumption (this->PowerConsumption_parser_->post_float ());
      }

      return true;
    }

    if (n == "LuminousFlux" && ns.empty ())
    {
      if (this->LuminousFlux_parser_)
      {
        this->LuminousFlux_parser_->pre ();
        this->LuminousFlux_parser_->_pre_impl ();
        this->LuminousFlux_parser_->_characters (v);
        this->LuminousFlux_parser_->_post_impl ();
        this->LuminousFlux (this->LuminousFlux_parser_->post_float ());
      }

      return true;
    }

    if (n == "ColorTemperature" && ns.empty ())
    {
      if (this->ColorTemperature_parser_)
      {
        this->ColorTemperature_parser_->pre ();
        this->ColorTemperature_parser_->_pre_impl ();
        this->ColorTemperature_parser_->_characters (v);
        this->ColorTemperature_parser_->_post_impl ();
        this->ColorTemperature (this->ColorTemperature_parser_->post_float ());
      }

      return true;
    }

    if (n == "BeamAngle" && ns.empty ())
    {
      if (this->BeamAngle_parser_)
      {
        this->BeamAngle_parser_->pre ();
        this->BeamAngle_parser_->_pre_impl ();
        this->BeamAngle_parser_->_characters (v);
        this->BeamAngle_parser_->_post_impl ();
        this->BeamAngle (this->BeamAngle_parser_->post_float ());
      }

      return true;
    }

    if (n == "FieldAngle" && ns.empty ())
    {
      if (this->FieldAngle_parser_)
      {
        this->FieldAngle_parser_->pre ();
        this->FieldAngle_parser_->_pre_impl ();
        this->FieldAngle_parser_->_characters (v);
        this->FieldAngle_parser_->_post_impl ();
        this->FieldAngle (this->FieldAngle_parser_->post_float ());
      }

      return true;
    }

    if (n == "BeamRadius" && ns.empty ())
    {
      if (this->BeamRadius_parser_)
      {
        this->BeamRadius_parser_->pre ();
        this->BeamRadius_parser_->_pre_impl ();
        this->BeamRadius_parser_->_characters (v);
        this->BeamRadius_parser_->_post_impl ();
        this->BeamRadius (this->BeamRadius_parser_->post_float ());
      }

      return true;
    }

    if (n == "BeamType" && ns.empty ())
    {
      if (this->BeamType_parser_)
      {
        this->BeamType_parser_->pre ();
        this->BeamType_parser_->_pre_impl ();
        this->BeamType_parser_->_characters (v);
        this->BeamType_parser_->_post_impl ();
        this->BeamType_parser_->post_BeamTypeEnum ();
        this->BeamType ();
      }

      return true;
    }

    if (n == "ColorRenderingIndex" && ns.empty ())
    {
      if (this->ColorRenderingIndex_parser_)
      {
        this->ColorRenderingIndex_parser_->pre ();
        this->ColorRenderingIndex_parser_->_pre_impl ();
        this->ColorRenderingIndex_parser_->_characters (v);
        this->ColorRenderingIndex_parser_->_post_impl ();
        this->ColorRenderingIndex (this->ColorRenderingIndex_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // GeometryReference_pskel
  //

  void GeometryReference_pskel::
  Break ()
  {
  }

  void GeometryReference_pskel::
  Name ()
  {
  }

  void GeometryReference_pskel::
  Position ()
  {
  }

  void GeometryReference_pskel::
  Geometry ()
  {
  }

  void GeometryReference_pskel::
  Model ()
  {
  }

  void GeometryReference_pskel::
  post_GeometryReference ()
  {
  }

  bool GeometryReference_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Break" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Break_parser_;

      if (this->Break_parser_)
        this->Break_parser_->pre ();

      return true;
    }

    return false;
  }

  bool GeometryReference_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Break" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Break_parser_)
      {
        this->Break_parser_->post_Break ();
        this->Break ();
      }

      return true;
    }

    return false;
  }

  bool GeometryReference_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Position" && ns.empty ())
    {
      if (this->Position_parser_)
      {
        this->Position_parser_->pre ();
        this->Position_parser_->_pre_impl ();
        this->Position_parser_->_characters (v);
        this->Position_parser_->_post_impl ();
        this->Position_parser_->post_matrixtype ();
        this->Position ();
      }

      return true;
    }

    if (n == "Geometry" && ns.empty ())
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->pre ();
        this->Geometry_parser_->_pre_impl ();
        this->Geometry_parser_->_characters (v);
        this->Geometry_parser_->_post_impl ();
        this->Geometry_parser_->post_nametype ();
        this->Geometry ();
      }

      return true;
    }

    if (n == "Model" && ns.empty ())
    {
      if (this->Model_parser_)
      {
        this->Model_parser_->pre ();
        this->Model_parser_->_pre_impl ();
        this->Model_parser_->_characters (v);
        this->Model_parser_->_post_impl ();
        this->Model_parser_->post_nametype ();
        this->Model ();
      }

      return true;
    }

    return false;
  }

  // Break_pskel
  //

  void Break_pskel::
  DMXOffset (long long)
  {
  }

  void Break_pskel::
  DMXBreak (long long)
  {
  }

  void Break_pskel::
  post_Break ()
  {
  }

  bool Break_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "DMXOffset" && ns.empty ())
    {
      if (this->DMXOffset_parser_)
      {
        this->DMXOffset_parser_->pre ();
        this->DMXOffset_parser_->_pre_impl ();
        this->DMXOffset_parser_->_characters (v);
        this->DMXOffset_parser_->_post_impl ();
        this->DMXOffset (this->DMXOffset_parser_->post_integer ());
      }

      return true;
    }

    if (n == "DMXBreak" && ns.empty ())
    {
      if (this->DMXBreak_parser_)
      {
        this->DMXBreak_parser_->pre ();
        this->DMXBreak_parser_->_pre_impl ();
        this->DMXBreak_parser_->_characters (v);
        this->DMXBreak_parser_->_post_impl ();
        this->DMXBreak (this->DMXBreak_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // DMXModes_pskel
  //

  void DMXModes_pskel::
  DMXMode ()
  {
  }

  void DMXModes_pskel::
  post_DMXModes ()
  {
  }

  bool DMXModes_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXMode" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXMode_parser_;

      if (this->DMXMode_parser_)
        this->DMXMode_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DMXModes_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXMode" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXMode_parser_)
      {
        this->DMXMode_parser_->post_DMXMode ();
        this->DMXMode ();
      }

      return true;
    }

    return false;
  }

  // DMXMode_pskel
  //

  void DMXMode_pskel::
  DMXChannels ()
  {
  }

  void DMXMode_pskel::
  Relations ()
  {
  }

  void DMXMode_pskel::
  FTMacros ()
  {
  }

  void DMXMode_pskel::
  Name ()
  {
  }

  void DMXMode_pskel::
  Geometry ()
  {
  }

  void DMXMode_pskel::
  post_DMXMode ()
  {
  }

  bool DMXMode_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXChannels" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXChannels_parser_;

      if (this->DMXChannels_parser_)
        this->DMXChannels_parser_->pre ();

      return true;
    }

    if (n == "Relations" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Relations_parser_;

      if (this->Relations_parser_)
        this->Relations_parser_->pre ();

      return true;
    }

    if (n == "FTMacros" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FTMacros_parser_;

      if (this->FTMacros_parser_)
        this->FTMacros_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DMXMode_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXChannels" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXChannels_parser_)
      {
        this->DMXChannels_parser_->post_DMXChannels ();
        this->DMXChannels ();
      }

      return true;
    }

    if (n == "Relations" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Relations_parser_)
      {
        this->Relations_parser_->post_Relations ();
        this->Relations ();
      }

      return true;
    }

    if (n == "FTMacros" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FTMacros_parser_)
      {
        this->FTMacros_parser_->post_FTMacros ();
        this->FTMacros ();
      }

      return true;
    }

    return false;
  }

  bool DMXMode_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Geometry" && ns.empty ())
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->pre ();
        this->Geometry_parser_->_pre_impl ();
        this->Geometry_parser_->_characters (v);
        this->Geometry_parser_->_post_impl ();
        this->Geometry_parser_->post_nametype ();
        this->Geometry ();
      }

      return true;
    }

    return false;
  }

  // DMXChannels_pskel
  //

  void DMXChannels_pskel::
  DMXChannel ()
  {
  }

  void DMXChannels_pskel::
  post_DMXChannels ()
  {
  }

  bool DMXChannels_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXChannel" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXChannel_parser_;

      if (this->DMXChannel_parser_)
        this->DMXChannel_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DMXChannels_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXChannel" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXChannel_parser_)
      {
        this->DMXChannel_parser_->post_DMXChannel ();
        this->DMXChannel ();
      }

      return true;
    }

    return false;
  }

  // DMXChannel_pskel
  //

  void DMXChannel_pskel::
  LogicalChannel ()
  {
  }

  void DMXChannel_pskel::
  Name ()
  {
  }

  void DMXChannel_pskel::
  DMXBreak (long long)
  {
  }

  void DMXChannel_pskel::
  Offset ()
  {
  }

  void DMXChannel_pskel::
  Default ()
  {
  }

  void DMXChannel_pskel::
  Highlight ()
  {
  }

  void DMXChannel_pskel::
  Geometry (const ::std::string&)
  {
  }

  void DMXChannel_pskel::
  post_DMXChannel ()
  {
  }

  bool DMXChannel_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "LogicalChannel" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->LogicalChannel_parser_;

      if (this->LogicalChannel_parser_)
        this->LogicalChannel_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DMXChannel_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "LogicalChannel" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->LogicalChannel_parser_)
      {
        this->LogicalChannel_parser_->post_LogicalChannel ();
        this->LogicalChannel ();
      }

      return true;
    }

    return false;
  }

  bool DMXChannel_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "DMXBreak" && ns.empty ())
    {
      if (this->DMXBreak_parser_)
      {
        this->DMXBreak_parser_->pre ();
        this->DMXBreak_parser_->_pre_impl ();
        this->DMXBreak_parser_->_characters (v);
        this->DMXBreak_parser_->_post_impl ();
        this->DMXBreak (this->DMXBreak_parser_->post_integer ());
      }

      return true;
    }

    if (n == "Offset" && ns.empty ())
    {
      if (this->Offset_parser_)
      {
        this->Offset_parser_->pre ();
        this->Offset_parser_->_pre_impl ();
        this->Offset_parser_->_characters (v);
        this->Offset_parser_->_post_impl ();
        this->Offset_parser_->post_offsettype ();
        this->Offset ();
      }

      return true;
    }

    if (n == "Default" && ns.empty ())
    {
      if (this->Default_parser_)
      {
        this->Default_parser_->pre ();
        this->Default_parser_->_pre_impl ();
        this->Default_parser_->_characters (v);
        this->Default_parser_->_post_impl ();
        this->Default_parser_->post_dmxtype ();
        this->Default ();
      }

      return true;
    }

    if (n == "Highlight" && ns.empty ())
    {
      if (this->Highlight_parser_)
      {
        this->Highlight_parser_->pre ();
        this->Highlight_parser_->_pre_impl ();
        this->Highlight_parser_->_characters (v);
        this->Highlight_parser_->_post_impl ();
        this->Highlight_parser_->post_dmxtype ();
        this->Highlight ();
      }

      return true;
    }

    if (n == "Geometry" && ns.empty ())
    {
      if (this->Geometry_parser_)
      {
        this->Geometry_parser_->pre ();
        this->Geometry_parser_->_pre_impl ();
        this->Geometry_parser_->_characters (v);
        this->Geometry_parser_->_post_impl ();
        this->Geometry (this->Geometry_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // LogicalChannel_pskel
  //

  void LogicalChannel_pskel::
  ChannelFunction ()
  {
  }

  void LogicalChannel_pskel::
  Name ()
  {
  }

  void LogicalChannel_pskel::
  Attribute ()
  {
  }

  void LogicalChannel_pskel::
  Snap ()
  {
  }

  void LogicalChannel_pskel::
  Master ()
  {
  }

  void LogicalChannel_pskel::
  MibFade (float)
  {
  }

  void LogicalChannel_pskel::
  DMXChangeTimeLimit (float)
  {
  }

  void LogicalChannel_pskel::
  post_LogicalChannel ()
  {
  }

  bool LogicalChannel_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "ChannelFunction" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChannelFunction_parser_;

      if (this->ChannelFunction_parser_)
        this->ChannelFunction_parser_->pre ();

      return true;
    }

    return false;
  }

  bool LogicalChannel_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "ChannelFunction" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->ChannelFunction_parser_)
      {
        this->ChannelFunction_parser_->post_ChannelFunction ();
        this->ChannelFunction ();
      }

      return true;
    }

    return false;
  }

  bool LogicalChannel_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Attribute" && ns.empty ())
    {
      if (this->Attribute_parser_)
      {
        this->Attribute_parser_->pre ();
        this->Attribute_parser_->_pre_impl ();
        this->Attribute_parser_->_characters (v);
        this->Attribute_parser_->_post_impl ();
        this->Attribute_parser_->post_AttributeEnum ();
        this->Attribute ();
      }

      return true;
    }

    if (n == "Snap" && ns.empty ())
    {
      if (this->Snap_parser_)
      {
        this->Snap_parser_->pre ();
        this->Snap_parser_->_pre_impl ();
        this->Snap_parser_->_characters (v);
        this->Snap_parser_->_post_impl ();
        this->Snap_parser_->post_SnapEnum ();
        this->Snap ();
      }

      return true;
    }

    if (n == "Master" && ns.empty ())
    {
      if (this->Master_parser_)
      {
        this->Master_parser_->pre ();
        this->Master_parser_->_pre_impl ();
        this->Master_parser_->_characters (v);
        this->Master_parser_->_post_impl ();
        this->Master_parser_->post_MasterEnum ();
        this->Master ();
      }

      return true;
    }

    if (n == "MibFade" && ns.empty ())
    {
      if (this->MibFade_parser_)
      {
        this->MibFade_parser_->pre ();
        this->MibFade_parser_->_pre_impl ();
        this->MibFade_parser_->_characters (v);
        this->MibFade_parser_->_post_impl ();
        this->MibFade (this->MibFade_parser_->post_float ());
      }

      return true;
    }

    if (n == "DMXChangeTimeLimit" && ns.empty ())
    {
      if (this->DMXChangeTimeLimit_parser_)
      {
        this->DMXChangeTimeLimit_parser_->pre ();
        this->DMXChangeTimeLimit_parser_->_pre_impl ();
        this->DMXChangeTimeLimit_parser_->_characters (v);
        this->DMXChangeTimeLimit_parser_->_post_impl ();
        this->DMXChangeTimeLimit (this->DMXChangeTimeLimit_parser_->post_float ());
      }

      return true;
    }

    return false;
  }

  // ChannelFunction_pskel
  //

  void ChannelFunction_pskel::
  ChannelSet ()
  {
  }

  void ChannelFunction_pskel::
  Name (const ::std::string&)
  {
  }

  void ChannelFunction_pskel::
  Attribute ()
  {
  }

  void ChannelFunction_pskel::
  OriginalAttribute (const ::std::string&)
  {
  }

  void ChannelFunction_pskel::
  DMXFrom ()
  {
  }

  void ChannelFunction_pskel::
  PhysicalFrom (float)
  {
  }

  void ChannelFunction_pskel::
  PhysicalTo (float)
  {
  }

  void ChannelFunction_pskel::
  RealFade (float)
  {
  }

  void ChannelFunction_pskel::
  Wheel (const ::std::string&)
  {
  }

  void ChannelFunction_pskel::
  Emitter (const ::std::string&)
  {
  }

  void ChannelFunction_pskel::
  Filter (const ::std::string&)
  {
  }

  void ChannelFunction_pskel::
  ModeMaster (const ::std::string&)
  {
  }

  void ChannelFunction_pskel::
  ModeFrom ()
  {
  }

  void ChannelFunction_pskel::
  ModeTo ()
  {
  }

  void ChannelFunction_pskel::
  post_ChannelFunction ()
  {
  }

  bool ChannelFunction_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "ChannelSet" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ChannelSet_parser_;

      if (this->ChannelSet_parser_)
        this->ChannelSet_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ChannelFunction_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "ChannelSet" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->ChannelSet_parser_)
      {
        this->ChannelSet_parser_->post_ChannelSet ();
        this->ChannelSet ();
      }

      return true;
    }

    return false;
  }

  bool ChannelFunction_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    if (n == "Attribute" && ns.empty ())
    {
      if (this->Attribute_parser_)
      {
        this->Attribute_parser_->pre ();
        this->Attribute_parser_->_pre_impl ();
        this->Attribute_parser_->_characters (v);
        this->Attribute_parser_->_post_impl ();
        this->Attribute_parser_->post_AttributeEnum ();
        this->Attribute ();
      }

      return true;
    }

    if (n == "OriginalAttribute" && ns.empty ())
    {
      if (this->OriginalAttribute_parser_)
      {
        this->OriginalAttribute_parser_->pre ();
        this->OriginalAttribute_parser_->_pre_impl ();
        this->OriginalAttribute_parser_->_characters (v);
        this->OriginalAttribute_parser_->_post_impl ();
        this->OriginalAttribute (this->OriginalAttribute_parser_->post_string ());
      }

      return true;
    }

    if (n == "DMXFrom" && ns.empty ())
    {
      if (this->DMXFrom_parser_)
      {
        this->DMXFrom_parser_->pre ();
        this->DMXFrom_parser_->_pre_impl ();
        this->DMXFrom_parser_->_characters (v);
        this->DMXFrom_parser_->_post_impl ();
        this->DMXFrom_parser_->post_dmxtype ();
        this->DMXFrom ();
      }

      return true;
    }

    if (n == "PhysicalFrom" && ns.empty ())
    {
      if (this->PhysicalFrom_parser_)
      {
        this->PhysicalFrom_parser_->pre ();
        this->PhysicalFrom_parser_->_pre_impl ();
        this->PhysicalFrom_parser_->_characters (v);
        this->PhysicalFrom_parser_->_post_impl ();
        this->PhysicalFrom (this->PhysicalFrom_parser_->post_float ());
      }

      return true;
    }

    if (n == "PhysicalTo" && ns.empty ())
    {
      if (this->PhysicalTo_parser_)
      {
        this->PhysicalTo_parser_->pre ();
        this->PhysicalTo_parser_->_pre_impl ();
        this->PhysicalTo_parser_->_characters (v);
        this->PhysicalTo_parser_->_post_impl ();
        this->PhysicalTo (this->PhysicalTo_parser_->post_float ());
      }

      return true;
    }

    if (n == "RealFade" && ns.empty ())
    {
      if (this->RealFade_parser_)
      {
        this->RealFade_parser_->pre ();
        this->RealFade_parser_->_pre_impl ();
        this->RealFade_parser_->_characters (v);
        this->RealFade_parser_->_post_impl ();
        this->RealFade (this->RealFade_parser_->post_float ());
      }

      return true;
    }

    if (n == "Wheel" && ns.empty ())
    {
      if (this->Wheel_parser_)
      {
        this->Wheel_parser_->pre ();
        this->Wheel_parser_->_pre_impl ();
        this->Wheel_parser_->_characters (v);
        this->Wheel_parser_->_post_impl ();
        this->Wheel (this->Wheel_parser_->post_string ());
      }

      return true;
    }

    if (n == "Emitter" && ns.empty ())
    {
      if (this->Emitter_parser_)
      {
        this->Emitter_parser_->pre ();
        this->Emitter_parser_->_pre_impl ();
        this->Emitter_parser_->_characters (v);
        this->Emitter_parser_->_post_impl ();
        this->Emitter (this->Emitter_parser_->post_string ());
      }

      return true;
    }

    if (n == "Filter" && ns.empty ())
    {
      if (this->Filter_parser_)
      {
        this->Filter_parser_->pre ();
        this->Filter_parser_->_pre_impl ();
        this->Filter_parser_->_characters (v);
        this->Filter_parser_->_post_impl ();
        this->Filter (this->Filter_parser_->post_string ());
      }

      return true;
    }

    if (n == "ModeMaster" && ns.empty ())
    {
      if (this->ModeMaster_parser_)
      {
        this->ModeMaster_parser_->pre ();
        this->ModeMaster_parser_->_pre_impl ();
        this->ModeMaster_parser_->_characters (v);
        this->ModeMaster_parser_->_post_impl ();
        this->ModeMaster (this->ModeMaster_parser_->post_string ());
      }

      return true;
    }

    if (n == "ModeFrom" && ns.empty ())
    {
      if (this->ModeFrom_parser_)
      {
        this->ModeFrom_parser_->pre ();
        this->ModeFrom_parser_->_pre_impl ();
        this->ModeFrom_parser_->_characters (v);
        this->ModeFrom_parser_->_post_impl ();
        this->ModeFrom_parser_->post_dmxtype ();
        this->ModeFrom ();
      }

      return true;
    }

    if (n == "ModeTo" && ns.empty ())
    {
      if (this->ModeTo_parser_)
      {
        this->ModeTo_parser_->pre ();
        this->ModeTo_parser_->_pre_impl ();
        this->ModeTo_parser_->_characters (v);
        this->ModeTo_parser_->_post_impl ();
        this->ModeTo_parser_->post_dmxtype ();
        this->ModeTo ();
      }

      return true;
    }

    return false;
  }

  // ChannelSet_pskel
  //

  void ChannelSet_pskel::
  Name (const ::std::string&)
  {
  }

  void ChannelSet_pskel::
  DMXFrom ()
  {
  }

  void ChannelSet_pskel::
  DMXTo ()
  {
  }

  void ChannelSet_pskel::
  PhysicalFrom (float)
  {
  }

  void ChannelSet_pskel::
  PhysicalTo (float)
  {
  }

  void ChannelSet_pskel::
  WheelSlotIndex (long long)
  {
  }

  void ChannelSet_pskel::
  post_ChannelSet ()
  {
  }

  bool ChannelSet_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    if (n == "DMXFrom" && ns.empty ())
    {
      if (this->DMXFrom_parser_)
      {
        this->DMXFrom_parser_->pre ();
        this->DMXFrom_parser_->_pre_impl ();
        this->DMXFrom_parser_->_characters (v);
        this->DMXFrom_parser_->_post_impl ();
        this->DMXFrom_parser_->post_dmxtype ();
        this->DMXFrom ();
      }

      return true;
    }

    if (n == "DMXTo" && ns.empty ())
    {
      if (this->DMXTo_parser_)
      {
        this->DMXTo_parser_->pre ();
        this->DMXTo_parser_->_pre_impl ();
        this->DMXTo_parser_->_characters (v);
        this->DMXTo_parser_->_post_impl ();
        this->DMXTo_parser_->post_dmxtype ();
        this->DMXTo ();
      }

      return true;
    }

    if (n == "PhysicalFrom" && ns.empty ())
    {
      if (this->PhysicalFrom_parser_)
      {
        this->PhysicalFrom_parser_->pre ();
        this->PhysicalFrom_parser_->_pre_impl ();
        this->PhysicalFrom_parser_->_characters (v);
        this->PhysicalFrom_parser_->_post_impl ();
        this->PhysicalFrom (this->PhysicalFrom_parser_->post_float ());
      }

      return true;
    }

    if (n == "PhysicalTo" && ns.empty ())
    {
      if (this->PhysicalTo_parser_)
      {
        this->PhysicalTo_parser_->pre ();
        this->PhysicalTo_parser_->_pre_impl ();
        this->PhysicalTo_parser_->_characters (v);
        this->PhysicalTo_parser_->_post_impl ();
        this->PhysicalTo (this->PhysicalTo_parser_->post_float ());
      }

      return true;
    }

    if (n == "WheelSlotIndex" && ns.empty ())
    {
      if (this->WheelSlotIndex_parser_)
      {
        this->WheelSlotIndex_parser_->pre ();
        this->WheelSlotIndex_parser_->_pre_impl ();
        this->WheelSlotIndex_parser_->_characters (v);
        this->WheelSlotIndex_parser_->_post_impl ();
        this->WheelSlotIndex (this->WheelSlotIndex_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // Relations_pskel
  //

  void Relations_pskel::
  Relation ()
  {
  }

  void Relations_pskel::
  post_Relations ()
  {
  }

  bool Relations_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Relation" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Relation_parser_;

      if (this->Relation_parser_)
        this->Relation_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Relations_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Relation" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Relation_parser_)
      {
        this->Relation_parser_->post_Relation ();
        this->Relation ();
      }

      return true;
    }

    return false;
  }

  // Relation_pskel
  //

  void Relation_pskel::
  Name (const ::std::string&)
  {
  }

  void Relation_pskel::
  Master (const ::std::string&)
  {
  }

  void Relation_pskel::
  Follower (const ::std::string&)
  {
  }

  void Relation_pskel::
  Type ()
  {
  }

  void Relation_pskel::
  post_Relation ()
  {
  }

  bool Relation_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    if (n == "Master" && ns.empty ())
    {
      if (this->Master_parser_)
      {
        this->Master_parser_->pre ();
        this->Master_parser_->_pre_impl ();
        this->Master_parser_->_characters (v);
        this->Master_parser_->_post_impl ();
        this->Master (this->Master_parser_->post_string ());
      }

      return true;
    }

    if (n == "Follower" && ns.empty ())
    {
      if (this->Follower_parser_)
      {
        this->Follower_parser_->pre ();
        this->Follower_parser_->_pre_impl ();
        this->Follower_parser_->_characters (v);
        this->Follower_parser_->_post_impl ();
        this->Follower (this->Follower_parser_->post_string ());
      }

      return true;
    }

    if (n == "Type" && ns.empty ())
    {
      if (this->Type_parser_)
      {
        this->Type_parser_->pre ();
        this->Type_parser_->_pre_impl ();
        this->Type_parser_->_characters (v);
        this->Type_parser_->_post_impl ();
        this->Type_parser_->post_RelationTypesEnum ();
        this->Type ();
      }

      return true;
    }

    return false;
  }

  // Revisions_pskel
  //

  void Revisions_pskel::
  Revision ()
  {
  }

  void Revisions_pskel::
  post_Revisions ()
  {
  }

  bool Revisions_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Revision" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Revision_parser_;

      if (this->Revision_parser_)
        this->Revision_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Revisions_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Revision" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Revision_parser_)
      {
        this->Revision_parser_->post_Revision ();
        this->Revision ();
      }

      return true;
    }

    return false;
  }

  // Revision_pskel
  //

  void Revision_pskel::
  Text (const ::std::string&)
  {
  }

  void Revision_pskel::
  Date (const ::xml_schema::date_time&)
  {
  }

  void Revision_pskel::
  UserID (long long)
  {
  }

  void Revision_pskel::
  post_Revision ()
  {
  }

  bool Revision_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Text" && ns.empty ())
    {
      if (this->Text_parser_)
      {
        this->Text_parser_->pre ();
        this->Text_parser_->_pre_impl ();
        this->Text_parser_->_characters (v);
        this->Text_parser_->_post_impl ();
        this->Text (this->Text_parser_->post_string ());
      }

      return true;
    }

    if (n == "Date" && ns.empty ())
    {
      if (this->Date_parser_)
      {
        this->Date_parser_->pre ();
        this->Date_parser_->_pre_impl ();
        this->Date_parser_->_characters (v);
        this->Date_parser_->_post_impl ();
        this->Date (this->Date_parser_->post_date_time ());
      }

      return true;
    }

    if (n == "UserID" && ns.empty ())
    {
      if (this->UserID_parser_)
      {
        this->UserID_parser_->pre ();
        this->UserID_parser_->_pre_impl ();
        this->UserID_parser_->_characters (v);
        this->UserID_parser_->_post_impl ();
        this->UserID (this->UserID_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // FTPresets_pskel
  //

  void FTPresets_pskel::
  FTPreset ()
  {
  }

  void FTPresets_pskel::
  post_FTPresets ()
  {
  }

  bool FTPresets_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FTPreset" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FTPreset_parser_;

      if (this->FTPreset_parser_)
        this->FTPreset_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FTPresets_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FTPreset" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FTPreset_parser_)
      {
        this->FTPreset_parser_->post_FTPreset ();
        this->FTPreset ();
      }

      return true;
    }

    return false;
  }

  // FTPreset_pskel
  //

  void FTPreset_pskel::
  post_FTPreset ()
  {
  }

  // FTMacros_pskel
  //

  void FTMacros_pskel::
  FTMacro ()
  {
  }

  void FTMacros_pskel::
  post_FTMacros ()
  {
  }

  bool FTMacros_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FTMacro" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FTMacro_parser_;

      if (this->FTMacro_parser_)
        this->FTMacro_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FTMacros_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FTMacro" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FTMacro_parser_)
      {
        this->FTMacro_parser_->post_FTMacro ();
        this->FTMacro ();
      }

      return true;
    }

    return false;
  }

  // FTMacro_pskel
  //

  void FTMacro_pskel::
  MacroDMX ()
  {
  }

  void FTMacro_pskel::
  MacroVisual ()
  {
  }

  void FTMacro_pskel::
  Name (const ::std::string&)
  {
  }

  void FTMacro_pskel::
  post_FTMacro ()
  {
  }

  bool FTMacro_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "MacroDMX" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MacroDMX_parser_;

      if (this->MacroDMX_parser_)
        this->MacroDMX_parser_->pre ();

      return true;
    }

    if (n == "MacroVisual" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MacroVisual_parser_;

      if (this->MacroVisual_parser_)
        this->MacroVisual_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FTMacro_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "MacroDMX" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->MacroDMX_parser_)
      {
        this->MacroDMX_parser_->post_MacroDMX ();
        this->MacroDMX ();
      }

      return true;
    }

    if (n == "MacroVisual" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->MacroVisual_parser_)
      {
        this->MacroVisual_parser_->post_MacroVisual ();
        this->MacroVisual ();
      }

      return true;
    }

    return false;
  }

  bool FTMacro_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // MacroDMX_pskel
  //

  void MacroDMX_pskel::
  DMXStep ()
  {
  }

  void MacroDMX_pskel::
  post_MacroDMX ()
  {
  }

  bool MacroDMX_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXStep" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXStep_parser_;

      if (this->DMXStep_parser_)
        this->DMXStep_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MacroDMX_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXStep" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXStep_parser_)
      {
        this->DMXStep_parser_->post_DMXStep ();
        this->DMXStep ();
      }

      return true;
    }

    return false;
  }

  // DMXStep_pskel
  //

  void DMXStep_pskel::
  DMXValue ()
  {
  }

  void DMXStep_pskel::
  Duration (long long)
  {
  }

  void DMXStep_pskel::
  post_DMXStep ()
  {
  }

  bool DMXStep_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXValue" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXValue_parser_;

      if (this->DMXValue_parser_)
        this->DMXValue_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DMXStep_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXValue" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXValue_parser_)
      {
        this->DMXValue_parser_->post_DMXValue ();
        this->DMXValue ();
      }

      return true;
    }

    return false;
  }

  bool DMXStep_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Duration" && ns.empty ())
    {
      if (this->Duration_parser_)
      {
        this->Duration_parser_->pre ();
        this->Duration_parser_->_pre_impl ();
        this->Duration_parser_->_characters (v);
        this->Duration_parser_->_post_impl ();
        this->Duration (this->Duration_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // DMXValue_pskel
  //

  void DMXValue_pskel::
  Value ()
  {
  }

  void DMXValue_pskel::
  DMXChannel (const ::std::string&)
  {
  }

  void DMXValue_pskel::
  post_DMXValue ()
  {
  }

  bool DMXValue_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Value" && ns.empty ())
    {
      if (this->Value_parser_)
      {
        this->Value_parser_->pre ();
        this->Value_parser_->_pre_impl ();
        this->Value_parser_->_characters (v);
        this->Value_parser_->_post_impl ();
        this->Value_parser_->post_dmxtype ();
        this->Value ();
      }

      return true;
    }

    if (n == "DMXChannel" && ns.empty ())
    {
      if (this->DMXChannel_parser_)
      {
        this->DMXChannel_parser_->pre ();
        this->DMXChannel_parser_->_pre_impl ();
        this->DMXChannel_parser_->_characters (v);
        this->DMXChannel_parser_->_post_impl ();
        this->DMXChannel (this->DMXChannel_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // MacroVisual_pskel
  //

  void MacroVisual_pskel::
  VisualStep ()
  {
  }

  void MacroVisual_pskel::
  post_MacroVisual ()
  {
  }

  bool MacroVisual_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "VisualStep" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->VisualStep_parser_;

      if (this->VisualStep_parser_)
        this->VisualStep_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MacroVisual_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "VisualStep" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->VisualStep_parser_)
      {
        this->VisualStep_parser_->post_VisualStep ();
        this->VisualStep ();
      }

      return true;
    }

    return false;
  }

  // VisualStep_pskel
  //

  void VisualStep_pskel::
  VisualValue ()
  {
  }

  void VisualStep_pskel::
  Duration (long long)
  {
  }

  void VisualStep_pskel::
  Fade (const ::std::string&)
  {
  }

  void VisualStep_pskel::
  Delay (const ::std::string&)
  {
  }

  void VisualStep_pskel::
  post_VisualStep ()
  {
  }

  bool VisualStep_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "VisualValue" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->VisualValue_parser_;

      if (this->VisualValue_parser_)
        this->VisualValue_parser_->pre ();

      return true;
    }

    return false;
  }

  bool VisualStep_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "VisualValue" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->VisualValue_parser_)
      {
        this->VisualValue_parser_->post_VisualValue ();
        this->VisualValue ();
      }

      return true;
    }

    return false;
  }

  bool VisualStep_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Duration" && ns.empty ())
    {
      if (this->Duration_parser_)
      {
        this->Duration_parser_->pre ();
        this->Duration_parser_->_pre_impl ();
        this->Duration_parser_->_characters (v);
        this->Duration_parser_->_post_impl ();
        this->Duration (this->Duration_parser_->post_integer ());
      }

      return true;
    }

    if (n == "Fade" && ns.empty ())
    {
      if (this->Fade_parser_)
      {
        this->Fade_parser_->pre ();
        this->Fade_parser_->_pre_impl ();
        this->Fade_parser_->_characters (v);
        this->Fade_parser_->_post_impl ();
        this->Fade (this->Fade_parser_->post_string ());
      }

      return true;
    }

    if (n == "Delay" && ns.empty ())
    {
      if (this->Delay_parser_)
      {
        this->Delay_parser_->pre ();
        this->Delay_parser_->_pre_impl ();
        this->Delay_parser_->_characters (v);
        this->Delay_parser_->_post_impl ();
        this->Delay (this->Delay_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // VisualValue_pskel
  //

  void VisualValue_pskel::
  Value (const ::std::string&)
  {
  }

  void VisualValue_pskel::
  ChannelFunction (const ::std::string&)
  {
  }

  void VisualValue_pskel::
  post_VisualValue ()
  {
  }

  bool VisualValue_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Value" && ns.empty ())
    {
      if (this->Value_parser_)
      {
        this->Value_parser_->pre ();
        this->Value_parser_->_pre_impl ();
        this->Value_parser_->_characters (v);
        this->Value_parser_->_post_impl ();
        this->Value (this->Value_parser_->post_string ());
      }

      return true;
    }

    if (n == "ChannelFunction" && ns.empty ())
    {
      if (this->ChannelFunction_parser_)
      {
        this->ChannelFunction_parser_->pre ();
        this->ChannelFunction_parser_->_pre_impl ();
        this->ChannelFunction_parser_->_characters (v);
        this->ChannelFunction_parser_->_post_impl ();
        this->ChannelFunction (this->ChannelFunction_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // PhysicalDescriptions_pskel
  //

  void PhysicalDescriptions_pskel::
  Emitters ()
  {
  }

  void PhysicalDescriptions_pskel::
  Filters ()
  {
  }

  void PhysicalDescriptions_pskel::
  ColorSpace ()
  {
  }

  void PhysicalDescriptions_pskel::
  DMXProfiles ()
  {
  }

  void PhysicalDescriptions_pskel::
  CRIs ()
  {
  }

  void PhysicalDescriptions_pskel::
  post_PhysicalDescriptions ()
  {
  }

  bool PhysicalDescriptions_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Emitters" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Emitters_parser_;

      if (this->Emitters_parser_)
        this->Emitters_parser_->pre ();

      return true;
    }

    if (n == "Filters" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Filters_parser_;

      if (this->Filters_parser_)
        this->Filters_parser_->pre ();

      return true;
    }

    if (n == "ColorSpace" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ColorSpace_parser_;

      if (this->ColorSpace_parser_)
        this->ColorSpace_parser_->pre ();

      return true;
    }

    if (n == "DMXProfiles" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXProfiles_parser_;

      if (this->DMXProfiles_parser_)
        this->DMXProfiles_parser_->pre ();

      return true;
    }

    if (n == "CRIs" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->CRIs_parser_;

      if (this->CRIs_parser_)
        this->CRIs_parser_->pre ();

      return true;
    }

    return false;
  }

  bool PhysicalDescriptions_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Emitters" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Emitters_parser_)
      {
        this->Emitters_parser_->post_Emitters ();
        this->Emitters ();
      }

      return true;
    }

    if (n == "Filters" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Filters_parser_)
      {
        this->Filters_parser_->post_Filters ();
        this->Filters ();
      }

      return true;
    }

    if (n == "ColorSpace" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->ColorSpace_parser_)
      {
        this->ColorSpace_parser_->post_ColorSpace ();
        this->ColorSpace ();
      }

      return true;
    }

    if (n == "DMXProfiles" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXProfiles_parser_)
      {
        this->DMXProfiles_parser_->post_DMXProfiles ();
        this->DMXProfiles ();
      }

      return true;
    }

    if (n == "CRIs" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->CRIs_parser_)
      {
        this->CRIs_parser_->post_CRIs ();
        this->CRIs ();
      }

      return true;
    }

    return false;
  }

  // Emitters_pskel
  //

  void Emitters_pskel::
  Emitter ()
  {
  }

  void Emitters_pskel::
  post_Emitters ()
  {
  }

  bool Emitters_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Emitter" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Emitter_parser_;

      if (this->Emitter_parser_)
        this->Emitter_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Emitters_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Emitter" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Emitter_parser_)
      {
        this->Emitter_parser_->post_Emitter ();
        this->Emitter ();
      }

      return true;
    }

    return false;
  }

  // Emitter_pskel
  //

  void Emitter_pskel::
  Measurement ()
  {
  }

  void Emitter_pskel::
  Name ()
  {
  }

  void Emitter_pskel::
  Color ()
  {
  }

  void Emitter_pskel::
  DominantWaveLength (float)
  {
  }

  void Emitter_pskel::
  DiodePart (const ::std::string&)
  {
  }

  void Emitter_pskel::
  post_Emitter ()
  {
  }

  bool Emitter_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Measurement" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Measurement_parser_;

      if (this->Measurement_parser_)
        this->Measurement_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Emitter_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Measurement" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Measurement_parser_)
      {
        this->Measurement_parser_->post_Measurement ();
        this->Measurement ();
      }

      return true;
    }

    return false;
  }

  bool Emitter_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Color" && ns.empty ())
    {
      if (this->Color_parser_)
      {
        this->Color_parser_->pre ();
        this->Color_parser_->_pre_impl ();
        this->Color_parser_->_characters (v);
        this->Color_parser_->_post_impl ();
        this->Color_parser_->post_colorcietype ();
        this->Color ();
      }

      return true;
    }

    if (n == "DominantWaveLength" && ns.empty ())
    {
      if (this->DominantWaveLength_parser_)
      {
        this->DominantWaveLength_parser_->pre ();
        this->DominantWaveLength_parser_->_pre_impl ();
        this->DominantWaveLength_parser_->_characters (v);
        this->DominantWaveLength_parser_->_post_impl ();
        this->DominantWaveLength (this->DominantWaveLength_parser_->post_float ());
      }

      return true;
    }

    if (n == "DiodePart" && ns.empty ())
    {
      if (this->DiodePart_parser_)
      {
        this->DiodePart_parser_->pre ();
        this->DiodePart_parser_->_pre_impl ();
        this->DiodePart_parser_->_characters (v);
        this->DiodePart_parser_->_post_impl ();
        this->DiodePart (this->DiodePart_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // Filters_pskel
  //

  void Filters_pskel::
  Filter ()
  {
  }

  void Filters_pskel::
  post_Filters ()
  {
  }

  bool Filters_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Filter" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Filter_parser_;

      if (this->Filter_parser_)
        this->Filter_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Filters_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Filter" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Filter_parser_)
      {
        this->Filter_parser_->post_Filter ();
        this->Filter ();
      }

      return true;
    }

    return false;
  }

  // Filter_pskel
  //

  void Filter_pskel::
  Measurement ()
  {
  }

  void Filter_pskel::
  Name ()
  {
  }

  void Filter_pskel::
  Color ()
  {
  }

  void Filter_pskel::
  post_Filter ()
  {
  }

  bool Filter_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Measurement" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Measurement_parser_;

      if (this->Measurement_parser_)
        this->Measurement_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Filter_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Measurement" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Measurement_parser_)
      {
        this->Measurement_parser_->post_Measurement ();
        this->Measurement ();
      }

      return true;
    }

    return false;
  }

  bool Filter_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_nametype ();
        this->Name ();
      }

      return true;
    }

    if (n == "Color" && ns.empty ())
    {
      if (this->Color_parser_)
      {
        this->Color_parser_->pre ();
        this->Color_parser_->_pre_impl ();
        this->Color_parser_->_characters (v);
        this->Color_parser_->_post_impl ();
        this->Color_parser_->post_colorcietype ();
        this->Color ();
      }

      return true;
    }

    return false;
  }

  // Measurement_pskel
  //

  void Measurement_pskel::
  MeasurementPoint ()
  {
  }

  void Measurement_pskel::
  Physical (float)
  {
  }

  void Measurement_pskel::
  LuminousIntensity (float)
  {
  }

  void Measurement_pskel::
  Transmission (float)
  {
  }

  void Measurement_pskel::
  InterpolationTo ()
  {
  }

  void Measurement_pskel::
  post_Measurement ()
  {
  }

  bool Measurement_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "MeasurementPoint" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MeasurementPoint_parser_;

      if (this->MeasurementPoint_parser_)
        this->MeasurementPoint_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Measurement_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "MeasurementPoint" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->MeasurementPoint_parser_)
      {
        this->MeasurementPoint_parser_->post_MeasurementPoint ();
        this->MeasurementPoint ();
      }

      return true;
    }

    return false;
  }

  bool Measurement_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Physical" && ns.empty ())
    {
      if (this->Physical_parser_)
      {
        this->Physical_parser_->pre ();
        this->Physical_parser_->_pre_impl ();
        this->Physical_parser_->_characters (v);
        this->Physical_parser_->_post_impl ();
        this->Physical (this->Physical_parser_->post_float ());
      }

      return true;
    }

    if (n == "LuminousIntensity" && ns.empty ())
    {
      if (this->LuminousIntensity_parser_)
      {
        this->LuminousIntensity_parser_->pre ();
        this->LuminousIntensity_parser_->_pre_impl ();
        this->LuminousIntensity_parser_->_characters (v);
        this->LuminousIntensity_parser_->_post_impl ();
        this->LuminousIntensity (this->LuminousIntensity_parser_->post_float ());
      }

      return true;
    }

    if (n == "Transmission" && ns.empty ())
    {
      if (this->Transmission_parser_)
      {
        this->Transmission_parser_->pre ();
        this->Transmission_parser_->_pre_impl ();
        this->Transmission_parser_->_characters (v);
        this->Transmission_parser_->_post_impl ();
        this->Transmission (this->Transmission_parser_->post_float ());
      }

      return true;
    }

    if (n == "InterpolationTo" && ns.empty ())
    {
      if (this->InterpolationTo_parser_)
      {
        this->InterpolationTo_parser_->pre ();
        this->InterpolationTo_parser_->_pre_impl ();
        this->InterpolationTo_parser_->_characters (v);
        this->InterpolationTo_parser_->_post_impl ();
        this->InterpolationTo_parser_->post_InterpolationToEnum ();
        this->InterpolationTo ();
      }

      return true;
    }

    return false;
  }

  // MeasurementPoint_pskel
  //

  void MeasurementPoint_pskel::
  WaveLength (float)
  {
  }

  void MeasurementPoint_pskel::
  Energy (float)
  {
  }

  void MeasurementPoint_pskel::
  post_MeasurementPoint ()
  {
  }

  bool MeasurementPoint_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "WaveLength" && ns.empty ())
    {
      if (this->WaveLength_parser_)
      {
        this->WaveLength_parser_->pre ();
        this->WaveLength_parser_->_pre_impl ();
        this->WaveLength_parser_->_characters (v);
        this->WaveLength_parser_->_post_impl ();
        this->WaveLength (this->WaveLength_parser_->post_float ());
      }

      return true;
    }

    if (n == "Energy" && ns.empty ())
    {
      if (this->Energy_parser_)
      {
        this->Energy_parser_->pre ();
        this->Energy_parser_->_pre_impl ();
        this->Energy_parser_->_characters (v);
        this->Energy_parser_->_post_impl ();
        this->Energy (this->Energy_parser_->post_float ());
      }

      return true;
    }

    return false;
  }

  // ColorSpace_pskel
  //

  void ColorSpace_pskel::
  ColorSpace ()
  {
  }

  void ColorSpace_pskel::
  Red ()
  {
  }

  void ColorSpace_pskel::
  Green ()
  {
  }

  void ColorSpace_pskel::
  Blue ()
  {
  }

  void ColorSpace_pskel::
  WhitePoint ()
  {
  }

  void ColorSpace_pskel::
  post_ColorSpace ()
  {
  }

  bool ColorSpace_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "ColorSpace" && ns.empty ())
    {
      if (this->ColorSpace_parser_)
      {
        this->ColorSpace_parser_->pre ();
        this->ColorSpace_parser_->_pre_impl ();
        this->ColorSpace_parser_->_characters (v);
        this->ColorSpace_parser_->_post_impl ();
        this->ColorSpace_parser_->post_ColorSpaceEnum ();
        this->ColorSpace ();
      }

      return true;
    }

    if (n == "Red" && ns.empty ())
    {
      if (this->Red_parser_)
      {
        this->Red_parser_->pre ();
        this->Red_parser_->_pre_impl ();
        this->Red_parser_->_characters (v);
        this->Red_parser_->_post_impl ();
        this->Red_parser_->post_colorcietype ();
        this->Red ();
      }

      return true;
    }

    if (n == "Green" && ns.empty ())
    {
      if (this->Green_parser_)
      {
        this->Green_parser_->pre ();
        this->Green_parser_->_pre_impl ();
        this->Green_parser_->_characters (v);
        this->Green_parser_->_post_impl ();
        this->Green_parser_->post_colorcietype ();
        this->Green ();
      }

      return true;
    }

    if (n == "Blue" && ns.empty ())
    {
      if (this->Blue_parser_)
      {
        this->Blue_parser_->pre ();
        this->Blue_parser_->_pre_impl ();
        this->Blue_parser_->_characters (v);
        this->Blue_parser_->_post_impl ();
        this->Blue_parser_->post_colorcietype ();
        this->Blue ();
      }

      return true;
    }

    if (n == "WhitePoint" && ns.empty ())
    {
      if (this->WhitePoint_parser_)
      {
        this->WhitePoint_parser_->pre ();
        this->WhitePoint_parser_->_pre_impl ();
        this->WhitePoint_parser_->_characters (v);
        this->WhitePoint_parser_->_post_impl ();
        this->WhitePoint_parser_->post_colorcietype ();
        this->WhitePoint ();
      }

      return true;
    }

    return false;
  }

  // DMXProfiles_pskel
  //

  void DMXProfiles_pskel::
  DMXProfile ()
  {
  }

  void DMXProfiles_pskel::
  post_DMXProfiles ()
  {
  }

  bool DMXProfiles_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXProfile" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXProfile_parser_;

      if (this->DMXProfile_parser_)
        this->DMXProfile_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DMXProfiles_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXProfile" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXProfile_parser_)
      {
        this->DMXProfile_parser_->post_DMXProfile ();
        this->DMXProfile ();
      }

      return true;
    }

    return false;
  }

  // DMXProfile_pskel
  //

  void DMXProfile_pskel::
  post_DMXProfile ()
  {
  }

  // CRIs_pskel
  //

  void CRIs_pskel::
  CRI ()
  {
  }

  void CRIs_pskel::
  post_CRIs ()
  {
  }

  bool CRIs_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "CRI" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->CRI_parser_;

      if (this->CRI_parser_)
        this->CRI_parser_->pre ();

      return true;
    }

    return false;
  }

  bool CRIs_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "CRI" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->CRI_parser_)
      {
        this->CRI_parser_->post_CRI ();
        this->CRI ();
      }

      return true;
    }

    return false;
  }

  // CRI_pskel
  //

  void CRI_pskel::
  CES ()
  {
  }

  void CRI_pskel::
  ColorRenderingIndex (long long)
  {
  }

  void CRI_pskel::
  post_CRI ()
  {
  }

  bool CRI_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "CES" && ns.empty ())
    {
      if (this->CES_parser_)
      {
        this->CES_parser_->pre ();
        this->CES_parser_->_pre_impl ();
        this->CES_parser_->_characters (v);
        this->CES_parser_->_post_impl ();
        this->CES_parser_->post_CESEnum ();
        this->CES ();
      }

      return true;
    }

    if (n == "ColorRenderingIndex" && ns.empty ())
    {
      if (this->ColorRenderingIndex_parser_)
      {
        this->ColorRenderingIndex_parser_->pre ();
        this->ColorRenderingIndex_parser_->_pre_impl ();
        this->ColorRenderingIndex_parser_->_characters (v);
        this->ColorRenderingIndex_parser_->_post_impl ();
        this->ColorRenderingIndex (this->ColorRenderingIndex_parser_->post_integer ());
      }

      return true;
    }

    return false;
  }

  // Protocols_pskel
  //

  void Protocols_pskel::
  RDM ()
  {
  }

  void Protocols_pskel::
  Art_Net ()
  {
  }

  void Protocols_pskel::
  sACN ()
  {
  }

  void Protocols_pskel::
  KiNET ()
  {
  }

  void Protocols_pskel::
  PosiStageNet ()
  {
  }

  void Protocols_pskel::
  OpenSoundControl ()
  {
  }

  void Protocols_pskel::
  CITP ()
  {
  }

  void Protocols_pskel::
  post_Protocols ()
  {
  }

  bool Protocols_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "RDM" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->RDM_parser_;

      if (this->RDM_parser_)
        this->RDM_parser_->pre ();

      return true;
    }

    if (n == "Art-Net" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Art_Net_parser_;

      if (this->Art_Net_parser_)
        this->Art_Net_parser_->pre ();

      return true;
    }

    if (n == "sACN" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->sACN_parser_;

      if (this->sACN_parser_)
        this->sACN_parser_->pre ();

      return true;
    }

    if (n == "KiNET" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->KiNET_parser_;

      if (this->KiNET_parser_)
        this->KiNET_parser_->pre ();

      return true;
    }

    if (n == "PosiStageNet" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PosiStageNet_parser_;

      if (this->PosiStageNet_parser_)
        this->PosiStageNet_parser_->pre ();

      return true;
    }

    if (n == "OpenSoundControl" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->OpenSoundControl_parser_;

      if (this->OpenSoundControl_parser_)
        this->OpenSoundControl_parser_->pre ();

      return true;
    }

    if (n == "CITP" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->CITP_parser_;

      if (this->CITP_parser_)
        this->CITP_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Protocols_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "RDM" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->RDM_parser_)
      {
        this->RDM_parser_->post_RDM ();
        this->RDM ();
      }

      return true;
    }

    if (n == "Art-Net" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Art_Net_parser_)
      {
        this->Art_Net_parser_->post_Art_Net ();
        this->Art_Net ();
      }

      return true;
    }

    if (n == "sACN" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->sACN_parser_)
      {
        this->sACN_parser_->post_sACN ();
        this->sACN ();
      }

      return true;
    }

    if (n == "KiNET" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->KiNET_parser_)
      {
        this->KiNET_parser_->post_KiNET ();
        this->KiNET ();
      }

      return true;
    }

    if (n == "PosiStageNet" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->PosiStageNet_parser_)
      {
        this->PosiStageNet_parser_->post_PosiStageNet ();
        this->PosiStageNet ();
      }

      return true;
    }

    if (n == "OpenSoundControl" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->OpenSoundControl_parser_)
      {
        this->OpenSoundControl_parser_->post_OpenSoundControl ();
        this->OpenSoundControl ();
      }

      return true;
    }

    if (n == "CITP" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->CITP_parser_)
      {
        this->CITP_parser_->post_CITP ();
        this->CITP ();
      }

      return true;
    }

    return false;
  }

  // Art_Net_pskel
  //

  void Art_Net_pskel::
  post_Art_Net ()
  {
  }

  // sACN_pskel
  //

  void sACN_pskel::
  post_sACN ()
  {
  }

  // KiNET_pskel
  //

  void KiNET_pskel::
  post_KiNET ()
  {
  }

  // PosiStageNet_pskel
  //

  void PosiStageNet_pskel::
  post_PosiStageNet ()
  {
  }

  // OpenSoundControl_pskel
  //

  void OpenSoundControl_pskel::
  post_OpenSoundControl ()
  {
  }

  // CITP_pskel
  //

  void CITP_pskel::
  post_CITP ()
  {
  }

  // RDM_pskel
  //

  void RDM_pskel::
  SoftwareVersionID ()
  {
  }

  void RDM_pskel::
  ManufacturerID (const ::std::string&)
  {
  }

  void RDM_pskel::
  DeviceModelID (const ::std::string&)
  {
  }

  void RDM_pskel::
  post_RDM ()
  {
  }

  bool RDM_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "SoftwareVersionID" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SoftwareVersionID_parser_;

      if (this->SoftwareVersionID_parser_)
        this->SoftwareVersionID_parser_->pre ();

      return true;
    }

    return false;
  }

  bool RDM_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "SoftwareVersionID" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->SoftwareVersionID_parser_)
      {
        this->SoftwareVersionID_parser_->post_SoftwareVersionID ();
        this->SoftwareVersionID ();
      }

      return true;
    }

    return false;
  }

  bool RDM_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "ManufacturerID" && ns.empty ())
    {
      if (this->ManufacturerID_parser_)
      {
        this->ManufacturerID_parser_->pre ();
        this->ManufacturerID_parser_->_pre_impl ();
        this->ManufacturerID_parser_->_characters (v);
        this->ManufacturerID_parser_->_post_impl ();
        this->ManufacturerID (this->ManufacturerID_parser_->post_string ());
      }

      return true;
    }

    if (n == "DeviceModelID" && ns.empty ())
    {
      if (this->DeviceModelID_parser_)
      {
        this->DeviceModelID_parser_->pre ();
        this->DeviceModelID_parser_->_pre_impl ();
        this->DeviceModelID_parser_->_characters (v);
        this->DeviceModelID_parser_->_post_impl ();
        this->DeviceModelID (this->DeviceModelID_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // SoftwareVersionID_pskel
  //

  void SoftwareVersionID_pskel::
  DMXPersonality ()
  {
  }

  void SoftwareVersionID_pskel::
  Value (const ::std::string&)
  {
  }

  void SoftwareVersionID_pskel::
  post_SoftwareVersionID ()
  {
  }

  bool SoftwareVersionID_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "DMXPersonality" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DMXPersonality_parser_;

      if (this->DMXPersonality_parser_)
        this->DMXPersonality_parser_->pre ();

      return true;
    }

    return false;
  }

  bool SoftwareVersionID_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "DMXPersonality" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->DMXPersonality_parser_)
      {
        this->DMXPersonality_parser_->post_DMXPersonality ();
        this->DMXPersonality ();
      }

      return true;
    }

    return false;
  }

  bool SoftwareVersionID_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Value" && ns.empty ())
    {
      if (this->Value_parser_)
      {
        this->Value_parser_->pre ();
        this->Value_parser_->_pre_impl ();
        this->Value_parser_->_characters (v);
        this->Value_parser_->_post_impl ();
        this->Value (this->Value_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // DMXPersonality_pskel
  //

  void DMXPersonality_pskel::
  Value (const ::std::string&)
  {
  }

  void DMXPersonality_pskel::
  DMXMode ()
  {
  }

  void DMXPersonality_pskel::
  post_DMXPersonality ()
  {
  }

  bool DMXPersonality_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Value" && ns.empty ())
    {
      if (this->Value_parser_)
      {
        this->Value_parser_->pre ();
        this->Value_parser_->_pre_impl ();
        this->Value_parser_->_characters (v);
        this->Value_parser_->_post_impl ();
        this->Value (this->Value_parser_->post_string ());
      }

      return true;
    }

    if (n == "DMXMode" && ns.empty ())
    {
      if (this->DMXMode_parser_)
      {
        this->DMXMode_parser_->pre ();
        this->DMXMode_parser_->_pre_impl ();
        this->DMXMode_parser_->_characters (v);
        this->DMXMode_parser_->_post_impl ();
        this->DMXMode_parser_->post_nametype ();
        this->DMXMode ();
      }

      return true;
    }

    return false;
  }

  // AttributeDefinitions_pskel
  //

  void AttributeDefinitions_pskel::
  ActivationGroups ()
  {
  }

  void AttributeDefinitions_pskel::
  FeatureGroups ()
  {
  }

  void AttributeDefinitions_pskel::
  Attributes ()
  {
  }

  void AttributeDefinitions_pskel::
  post_AttributeDefinitions ()
  {
  }

  bool AttributeDefinitions_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "ActivationGroups" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ActivationGroups_parser_;

      if (this->ActivationGroups_parser_)
        this->ActivationGroups_parser_->pre ();

      return true;
    }

    if (n == "FeatureGroups" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FeatureGroups_parser_;

      if (this->FeatureGroups_parser_)
        this->FeatureGroups_parser_->pre ();

      return true;
    }

    if (n == "Attributes" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Attributes_parser_;

      if (this->Attributes_parser_)
        this->Attributes_parser_->pre ();

      return true;
    }

    return false;
  }

  bool AttributeDefinitions_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "ActivationGroups" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->ActivationGroups_parser_)
      {
        this->ActivationGroups_parser_->post_ActivationGroups ();
        this->ActivationGroups ();
      }

      return true;
    }

    if (n == "FeatureGroups" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FeatureGroups_parser_)
      {
        this->FeatureGroups_parser_->post_FeatureGroups ();
        this->FeatureGroups ();
      }

      return true;
    }

    if (n == "Attributes" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Attributes_parser_)
      {
        this->Attributes_parser_->post_Attributes ();
        this->Attributes ();
      }

      return true;
    }

    return false;
  }

  // ActivationGroups_pskel
  //

  void ActivationGroups_pskel::
  ActivationGroup ()
  {
  }

  void ActivationGroups_pskel::
  post_ActivationGroups ()
  {
  }

  bool ActivationGroups_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "ActivationGroup" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ActivationGroup_parser_;

      if (this->ActivationGroup_parser_)
        this->ActivationGroup_parser_->pre ();

      return true;
    }

    return false;
  }

  bool ActivationGroups_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "ActivationGroup" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->ActivationGroup_parser_)
      {
        this->ActivationGroup_parser_->post_ActivationGroup ();
        this->ActivationGroup ();
      }

      return true;
    }

    return false;
  }

  // FeatureGroups_pskel
  //

  void FeatureGroups_pskel::
  FeatureGroup ()
  {
  }

  void FeatureGroups_pskel::
  post_FeatureGroups ()
  {
  }

  bool FeatureGroups_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "FeatureGroup" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->FeatureGroup_parser_;

      if (this->FeatureGroup_parser_)
        this->FeatureGroup_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FeatureGroups_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "FeatureGroup" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->FeatureGroup_parser_)
      {
        this->FeatureGroup_parser_->post_FeatureGroup ();
        this->FeatureGroup ();
      }

      return true;
    }

    return false;
  }

  // ActivationGroup_pskel
  //

  void ActivationGroup_pskel::
  Name (const ::std::string&)
  {
  }

  void ActivationGroup_pskel::
  post_ActivationGroup ()
  {
  }

  bool ActivationGroup_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // FeatureGroup_pskel
  //

  void FeatureGroup_pskel::
  Feature ()
  {
  }

  void FeatureGroup_pskel::
  Name (const ::std::string&)
  {
  }

  void FeatureGroup_pskel::
  Pretty (const ::std::string&)
  {
  }

  void FeatureGroup_pskel::
  post_FeatureGroup ()
  {
  }

  bool FeatureGroup_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Feature" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Feature_parser_;

      if (this->Feature_parser_)
        this->Feature_parser_->pre ();

      return true;
    }

    return false;
  }

  bool FeatureGroup_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Feature" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Feature_parser_)
      {
        this->Feature_parser_->post_Feature ();
        this->Feature ();
      }

      return true;
    }

    return false;
  }

  bool FeatureGroup_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    if (n == "Pretty" && ns.empty ())
    {
      if (this->Pretty_parser_)
      {
        this->Pretty_parser_->pre ();
        this->Pretty_parser_->_pre_impl ();
        this->Pretty_parser_->_characters (v);
        this->Pretty_parser_->_post_impl ();
        this->Pretty (this->Pretty_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // Feature_pskel
  //

  void Feature_pskel::
  Name (const ::std::string&)
  {
  }

  void Feature_pskel::
  post_Feature ()
  {
  }

  bool Feature_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name (this->Name_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // Attributes_pskel
  //

  void Attributes_pskel::
  Attribute ()
  {
  }

  void Attributes_pskel::
  post_Attributes ()
  {
  }

  bool Attributes_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Attribute" && ns == "http://schemas.gdtf-share.com/device")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Attribute_parser_;

      if (this->Attribute_parser_)
        this->Attribute_parser_->pre ();

      return true;
    }

    return false;
  }

  bool Attributes_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Attribute" && ns == "http://schemas.gdtf-share.com/device")
    {
      if (this->Attribute_parser_)
      {
        this->Attribute_parser_->post_Attribute ();
        this->Attribute ();
      }

      return true;
    }

    return false;
  }

  // Attribute_pskel
  //

  void Attribute_pskel::
  Name ()
  {
  }

  void Attribute_pskel::
  Pretty (const ::std::string&)
  {
  }

  void Attribute_pskel::
  ActivationGroup (const ::std::string&)
  {
  }

  void Attribute_pskel::
  PhysicalUnit ()
  {
  }

  void Attribute_pskel::
  Color ()
  {
  }

  void Attribute_pskel::
  Feature (const ::std::string&)
  {
  }

  void Attribute_pskel::
  MainAttribute (const ::std::string&)
  {
  }

  void Attribute_pskel::
  post_Attribute ()
  {
  }

  bool Attribute_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "Name" && ns.empty ())
    {
      if (this->Name_parser_)
      {
        this->Name_parser_->pre ();
        this->Name_parser_->_pre_impl ();
        this->Name_parser_->_characters (v);
        this->Name_parser_->_post_impl ();
        this->Name_parser_->post_AttributeEnum ();
        this->Name ();
      }

      return true;
    }

    if (n == "Pretty" && ns.empty ())
    {
      if (this->Pretty_parser_)
      {
        this->Pretty_parser_->pre ();
        this->Pretty_parser_->_pre_impl ();
        this->Pretty_parser_->_characters (v);
        this->Pretty_parser_->_post_impl ();
        this->Pretty (this->Pretty_parser_->post_string ());
      }

      return true;
    }

    if (n == "ActivationGroup" && ns.empty ())
    {
      if (this->ActivationGroup_parser_)
      {
        this->ActivationGroup_parser_->pre ();
        this->ActivationGroup_parser_->_pre_impl ();
        this->ActivationGroup_parser_->_characters (v);
        this->ActivationGroup_parser_->_post_impl ();
        this->ActivationGroup (this->ActivationGroup_parser_->post_string ());
      }

      return true;
    }

    if (n == "PhysicalUnit" && ns.empty ())
    {
      if (this->PhysicalUnit_parser_)
      {
        this->PhysicalUnit_parser_->pre ();
        this->PhysicalUnit_parser_->_pre_impl ();
        this->PhysicalUnit_parser_->_characters (v);
        this->PhysicalUnit_parser_->_post_impl ();
        this->PhysicalUnit_parser_->post_PhysicalUnitEnum ();
        this->PhysicalUnit ();
      }

      return true;
    }

    if (n == "Color" && ns.empty ())
    {
      if (this->Color_parser_)
      {
        this->Color_parser_->pre ();
        this->Color_parser_->_pre_impl ();
        this->Color_parser_->_characters (v);
        this->Color_parser_->_post_impl ();
        this->Color_parser_->post_colorcietype ();
        this->Color ();
      }

      return true;
    }

    if (n == "Feature" && ns.empty ())
    {
      if (this->Feature_parser_)
      {
        this->Feature_parser_->pre ();
        this->Feature_parser_->_pre_impl ();
        this->Feature_parser_->_characters (v);
        this->Feature_parser_->_post_impl ();
        this->Feature (this->Feature_parser_->post_string ());
      }

      return true;
    }

    if (n == "MainAttribute" && ns.empty ())
    {
      if (this->MainAttribute_parser_)
      {
        this->MainAttribute_parser_->pre ();
        this->MainAttribute_parser_->_pre_impl ();
        this->MainAttribute_parser_->_characters (v);
        this->MainAttribute_parser_->_post_impl ();
        this->MainAttribute (this->MainAttribute_parser_->post_string ());
      }

      return true;
    }

    return false;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

